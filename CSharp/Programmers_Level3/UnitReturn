using System;
using System.Collections.Generic;

public class Solution {
    public int[] solution(int n, int[,] roads, int[] sources, int destination) {
        // 그래프 생성: 인접 리스트 활용
        List<int>[] graph = new List<int>[n + 1];
        for (int i = 1; i <= n; i++) {
            graph[i] = new List<int>();
        }
        
        // 간선 정보 입력
        for (int i = 0; i < roads.GetLength(0); i++) {
            int start = roads[i, 0];
            int end = roads[i, 1];
            // 양방향 간선이므로 양쪽으로 연결
            graph[start].Add(end);
            graph[end].Add(start);
        }
        
        // costs 배열 초기화
        int[] costs = new int[n + 1];
        for (int i = 0; i <= n; i++) {
            costs[i] = -1; // 초기값으로 방문하지 않은 상태를 -1로 설정
        }
        
        // BFS 탐색으로 최단 경로 계산하여 costs 배열에 저장
        costs = BFS(destination, graph, costs); // costs[i]: destination에서 지역 i로 갈 때 소모되는 비용

        // sources 배열의 각 지점에 대한 최단 비용 계산
        int[] answer = new int[sources.Length];
        for (int i = 0; i < sources.Length; i++) {
            answer[i] = costs[sources[i]];
        }

        return answer;
    }
    
    // BFS 알고리즘을 이용한 최단 경로 계산
    private int[] BFS(int dest, List<int>[] graph, int[] costs) {
        Queue<int> q = new Queue<int>();
        q.Enqueue(dest); // 시작점 설정
        costs[dest] = 0; // 자기 자신으로 가는 비용: 0

        while (q.Count > 0) {
            int x = q.Dequeue(); // 큐에서 노드 추출
            foreach (int node in graph[x]) { // 노드에 연결된 모든 인접 노드에 대해 반복
                if (costs[node] == -1) { // 방문하지 않은 노드인 경우
                    q.Enqueue(node); // 큐에 추가하여 다음 노드로 탐색
                    costs[node] = costs[x] + 1; // 이전 노드의 비용에 1을 더한 값으로 비용 갱신
                }
            }
        }

        return costs; // 최단 비용 배열 반환
    }
}