using System;
using System.Collections.Generic;
using System.Linq;

public class Solution {
    // 유니온-파인드의 Find 연산을 수행하는 메서드
    public int FindParent(List<int> parent, int x) 
    {
        // 루트 노드를 찾을 때까지 부모 노드를 따라 올라감
        while (parent[x] != x) 
            x = parent[x];
        return x; // 루트 노드 반환
    }

    // 유니온-파인드의 Union 연산을 수행하는 메서드
    public void UnionSet(List<int> parent, int a, int b) 
    {
        // 두 노드의 루트 노드를 찾음
        a = FindParent(parent, a);
        b = FindParent(parent, b);
        
        if (a < b) 
            parent[b] = a; // b의 루트 노드를 a로 설정
        else 
            parent[a] = b; // a의 루트 노드를 b로 설정
    }
    
    public int solution(int n, int[,] costs) {
        List<List<int>> costsList = new List<List<int>>();
        for (int i = 0; i < costs.GetLength(0); i++) 
        {
            // 2차원 배열 costs를 List<List<int>>로 변환
            int a = costs[i, 0];
            int b = costs[i, 1];
            int cost = costs[i, 2];
            costsList.Add(new List<int> { a, b, cost });
        }

        // 간선 비용에 따라 간선 리스트를 오름차순으로 정렬
        costsList.Sort((a, b) => a[2].CompareTo(b[2]));

        // 유니온-파인드에서 사용할 부모 노드 리스트 생성
        List<int> parent = Enumerable.Range(0, n).ToList();

        int answer = 0;

        // 간선 리스트를 순회하면서 최소 비용으로 모든 노드를 연결
        foreach (var edge in costsList) 
        {
            int a = edge[0];
            int b = edge[1];
            int cost = edge[2];
            if (FindParent(parent, a) != FindParent(parent, b)) 
            {
                // 두 노드가 서로 다른 그룹에 속해 있다면 연결하고 비용 누적
                UnionSet(parent, a, b);
                answer += cost;
            }
        }

        return answer; // 최소 비용 반환
    }
}