using System;
using System.Collections.Generic;

public class Solution {
    public int[] solution(int n) {
        // n x n 크기의 2차원 배열을 생성하여 나중에 나올 나선형 패턴을 저장합니다.
        int[,] arr = new int[n, n];
        int curnum = 1; // 현재 채워질 숫자를 나타내는 변수를 초기화합니다.
        int x = -1; // x 좌표를 초기화합니다.
        int y = 0;  // y 좌표를 초기화합니다.

        // 나선형 패턴을 저장할 리스트를 생성합니다.
        List<int> answer = new List<int>();

        // 나선형 패턴을 배열에 채웁니다.
        for (int i = 0; i < n; i++)
        {
            for (int j = i; j < n; j++) 
            {
                // 현재 인덱스에 따라 이동 방향을 결정합니다.
                if (i % 3 == 0) 
                    x += 1; // 인덱스가 3의 배수일 때 오른쪽으로 이동합니다.
                else if (i % 3 == 1) 
                    y += 1; // 인덱스가 3으로 나누어 떨어지는 수보다 1 더 큰 경우 아래로 이동합니다.
                else 
                {
                    x -= 1; // 그 외의 경우 위로 이동하면서 왼쪽으로 이동합니다.
                    y -= 1;
                }

                // 현재 위치에 현재 숫자를 채웁니다.
                arr[x, y] = curnum;

                // 다음 반복을 위해 현재 숫자를 증가시킵니다.
                curnum += 1;
            }
        }

        // 배열을 탐색하며 0이 아닌 원소를 리스트에 추가합니다.
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (arr[i, j] != 0) 
                    answer.Add(arr[i, j]);
            }
        }

        // 리스트를 배열로 변환하여 결과를 반환합니다.
        return answer.ToArray();
    }
}