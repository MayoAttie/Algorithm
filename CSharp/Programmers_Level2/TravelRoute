using System;
using System.Collections.Generic;
using System.Linq;

public class Solution {
    private List<string> answer;

    // DFS 함수
    public bool Dfs(string currAirport, int ticketCount, Dictionary<string, List<string>> graph, List<string> temp)
    {
        // 현재 공항을 임시 경로에 추가
        temp.Add(currAirport);

        // 티켓을 모두 사용한 경우, 임시 경로를 정답 경로로 설정하고 탐색 종료
        if (ticketCount == 0)
        {
            answer = new List<string>(temp);
            return true;
        }

        // 현재 공항에 연결된 다른 공항들을 탐색
        if (graph.ContainsKey(currAirport))
        {
            List<string> destinations = graph[currAirport].ToList();
            for (int i = 0; i < destinations.Count; i++)
            {
                // 아직 사용하지 않은 티켓인 경우에만 탐색 진행
                if (!graph[currAirport][i].StartsWith("*"))
                {
                    string nextAirport = graph[currAirport][i];

                    // 해당 티켓을 사용했다고 표시 (여러번 사용하지 않도록 하기 위해)
                    graph[currAirport][i] = "*" + graph[currAirport][i];

                    // 다음 공항으로 이동하며 재귀적으로 DFS 수행
                    if (Dfs(nextAirport, ticketCount - 1, graph, temp))
                        return true;

                    // 탐색 결과가 false인 경우, 티켓 사용을 취소하여 다른 경로 탐색 가능하도록 함
                    graph[currAirport][i] = nextAirport;
                }
            }
        }

        // 현재 공항을 임시 경로에서 제거 (Backtracking)
        temp.RemoveAt(temp.Count - 1);
        return false;
    }

    // 주어진 티켓 리스트로부터 여행 경로를 찾는 함수
    public string[] Solution(string[,] tickets)
    {
        // 공항 간의 연결을 저장할 그래프를 생성
        Dictionary<string, List<string>> graph = new Dictionary<string, List<string>>();

        int rowCount = tickets.GetLength(0);
        int colCount = tickets.GetLength(1);

        // 그래프 생성
        for (int i = 0; i < rowCount; i++)
        {
            string startAirport = tickets[i, 0];
            string endAirport = tickets[i, 1];

            if (!graph.ContainsKey(startAirport))
                graph[startAirport] = new List<string>();

            graph[startAirport].Add(endAirport);
        }

        // 각 공항에서 연결된 공항들을 알파벳 순서로 정렬
        foreach (var entry in graph)
        {
            entry.Value.Sort();
        }

        // 임시 경로와 정답 경로를 초기화
        List<string> temp = new List<string>();
        answer = new List<string>();

        // DFS 함수를 호출하여 시작 공항이 "ICN"인 여행 경로를 탐색
        Dfs("ICN", rowCount, graph, temp);

        // 정답 경로를 문자열 배열로 변환하여 반환
        return answer.ToArray();
    }
}