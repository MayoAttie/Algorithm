using System;
using System.Collections.Generic;
using System.Linq;

public class Solution {
    public int[] solution(int[] fees, string[] records) {
        int[] answer = new int[0];
        // 차량 번호를 기준으로 입차 시간을 저장하는 딕셔너리
        Dictionary<string, string> recordTable = new Dictionary<string, string>();
        // 차량 번호를 기준으로 주차 시간을 저장하는 딕셔너리
        Dictionary<string, int> timeTable = new Dictionary<string, int>();
        
        // records 배열을 순회하며 주차 시간을 계산합니다.
        for (int i = 0; i < records.Length; i++)
        {
            string time, num, status;
            int spacePos = records[i].IndexOf(' ');
            time = records[i].Substring(0, spacePos);
            int nextSpacePos = records[i].IndexOf(' ', spacePos + 1);
            num = records[i].Substring(spacePos + 1, nextSpacePos - spacePos - 1);
            status = records[i].Substring(nextSpacePos + 1);
            
            if (status == "IN")
                recordTable[num] = time;
            else
            {
                // 출차 시간에서 입차 시간을 빼서 주차 시간을 계산합니다.
                string inTime = recordTable[num];
                recordTable.Remove(num);
                
                int inMin = int.Parse(inTime.Substring(0, 2)) * 60 + int.Parse(inTime.Substring(3));
                int outMin = int.Parse(time.Substring(0, 2)) * 60 + int.Parse(time.Substring(3));
                int parkTime = outMin - inMin;
                
                // timeTable에 차량 번호와 주차 시간을 저장합니다.
                if (timeTable.ContainsKey(num))
                {
                    int minSum = timeTable[num];
                    timeTable[num] = minSum + parkTime;
                }
                else
                    timeTable[num] = parkTime;
            }
        }
        
        // 만일 records 배열에 남아있는 입차 기록이 있다면, 23:59까지 주차한 것으로 가정하고 계산합니다.
        foreach (var pair in recordTable)
        {
            string inTime = pair.Value;
            int inMin = int.Parse(inTime.Substring(0, 2)) * 60 + int.Parse(inTime.Substring(3));
            int outMin = 23 * 60 + 59;
            int parkTime = outMin - inMin;
            
            // timeTable에 차량 번호와 주차 시간을 저장합니다.
            if (timeTable.ContainsKey(pair.Key))
            {
                int minSum = timeTable[pair.Key];
                timeTable[pair.Key] = minSum + parkTime;
            }
            else
                timeTable[pair.Key] = parkTime;
        }

        // timeTable을 차량 번호가 작은 순서대로 정렬합니다.
        var sortedTimeTable = timeTable.OrderBy(pair => pair.Key);
        
        // 정렬된 timeTable을 이용하여 주차 요금을 계산하고, 배열 answer에 저장합니다.
        answer = new int[timeTable.Count];
        int index = 0;
        foreach (var pair in sortedTimeTable)
        {
            int minSum = pair.Value;
            int fee = calculateFee(fees, minSum);
            answer[index] = fee;
            index++;
        }
        return answer;
    }
    
    // 주차 시간을 바탕으로 주차 요금을 계산하는 함수
    int calculateFee(int[] fees, int minSum)
    {
        int standardTime = fees[0];
        int standardFee = fees[1];
        int unitTime = fees[2];
        int unitFee = fees[3];

        int fee = 0;
    
        if (minSum <= standardTime) 
            fee = standardFee;
        else 
            fee = standardFee + (int)Math.Ceiling((double)(minSum - standardTime) / unitTime) * unitFee;

        return fee;
    }
}