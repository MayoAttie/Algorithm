using System;
using System.Collections.Generic;

public class Solution {
    public int[] Solution(int[] progresses, int[] speeds) {
        List<int> answer = new List<int>(); // 결과를 담을 리스트

        Queue<int> que = new Queue<int>(); // 각 작업이 완료되는데 걸리는 일 수를 담을 큐

        // 각 작업마다 걸리는 일 수를 계산하여 큐에 추가
        for (int i = 0; i < progresses.Length; i++)
        {
            int num = progresses[i]; // 현재 진행 상태
            int day = 0; // 작업이 완료되기까지 걸리는 일 수

            // 작업이 100%가 되기 전까지 반복
            while (num < 100)
            {
                num += speeds[i]; // 현재 진행 상태에 속도를 더해 진행
                day++; // 걸린 일 수 증가
            }
            que.Enqueue(day); // 걸린 일 수를 큐에 추가
        }

        int maxDay = que.Peek(); // 가장 오래 걸리는 작업의 걸린 일 수
        int count = 0; // 하루에 배포할 수 있는 작업 수를 세기 위한 변수

        // 큐가 빌 때까지 반복
        while (que.Count > 0)
        {
            if (que.Peek() <= maxDay) // 현재 작업이 가장 오래 걸리는 작업보다 빨리 끝난 경우
            {
                count++; // 하루에 배포할 수 있는 작업 수 증가
                que.Dequeue(); // 현재 작업을 큐에서 제거
            }
            else // 현재 작업이 가장 오래 걸리는 작업보다 늦게 끝난 경우
            {
                answer.Add(count); // 이전까지의 하루 배포 작업 수를 결과 리스트에 추가
                count = 0; // 하루 배포 작업 수 초기화
                maxDay = que.Peek(); // 가장 오래 걸리는 작업의 걸린 일 수 업데이트
            }
        }

        if (count > 0) // 마지막 남은 작업이 있으면
            answer.Add(count); // 마지막 하루 배포 작업 수를 결과 리스트에 추가

        return answer.ToArray(); // 결과 리스트를 배열로 변환하여 반환
    }
}