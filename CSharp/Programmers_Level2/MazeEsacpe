using System;
using System.Collections.Generic;

public class Solution {
    // 특정 문자를 maps 배열에서 찾아서 해당 위치의 (행, 열)을 반환하는 함수
    private Tuple<int, int> FindPosition(string[] maps, char target)
    {
        int y = maps.Length;        // maps 배열의 행 개수 (높이)
        int x = maps[0].Length;     // maps 배열의 열 개수 (너비)

        for (int i = 0; i < y; i++) 
        {
            for (int j = 0; j < x; j++) 
            {
                if (maps[i][j] == target)   // target 문자와 일치하는 문자를 찾으면 해당 위치 반환
                    return Tuple.Create(i, j);
            }
        }

        return Tuple.Create(-1, -1); // 찾지 못한 경우 -1, -1 반환
    }

    // BFS를 사용하여 두 좌표 (startX, startY)와 (endX, endY) 사이의 최단 거리를 계산하는 함수
    private int BFS(string[] maps, int startX, int startY, int endX, int endY)
    {
        int n = maps.Length;        // maps 배열의 행 개수 (높이)
        int m = maps[0].Length;     // maps 배열의 열 개수 (너비)
        int[][] dist = new int[n][];    // 각 좌표까지의 최단 거리를 저장할 배열
        for (int i = 0; i < n; i++) 
        {
            dist[i] = new int[m];   // 각 행마다 열 개수만큼 배열 초기화
            for (int j = 0; j < m; j++)
                dist[i][j] = -1;    // 최단 거리 배열을 -1로 초기화
        }

        Queue<Tuple<int, int>> q = new Queue<Tuple<int, int>>(); // BFS를 위한 큐
        int[] dx = { -1, 0, 1, 0 };  // 상하좌우 이동을 위한 x 방향 배열
        int[] dy = { 0, 1, 0, -1 };  // 상하좌우 이동을 위한 y 방향 배열

        q.Enqueue(Tuple.Create(startX, startY));    // 시작 위치를 큐에 추가
        dist[startX][startY] = 0;   // 시작 위치의 최단 거리를 0으로 설정

        while (q.Count > 0) 
        {
            Tuple<int, int> pos = q.Dequeue();  // 큐에서 좌표를 꺼냄
            int x = pos.Item1;
            int y = pos.Item2;

            if (x == endX && y == endY) // 목표 위치에 도달한 경우
                return dist[x][y];      // 해당 위치까지의 최단 거리 반환

            for (int i = 0; i < 4; i++) 
            {
                int nx = x + dx[i];     // 새로운 x 좌표 계산
                int ny = y + dy[i];     // 새로운 y 좌표 계산

                // 새로운 좌표가 maps 범위 내이고, 아직 방문하지 않은 곳이며, 장애물이 아닌 경우
                if (nx >= 0 && nx < n && ny >= 0 && ny < m && dist[nx][ny] == -1 && maps[nx][ny] != 'X')
                {
                    q.Enqueue(Tuple.Create(nx, ny));   // 새로운 좌표를 큐에 추가
                    dist[nx][ny] = dist[x][y] + 1;     // 새로운 좌표까지의 최단 거리 설정
                }
            }
        }

        return -1;  // 목표 위치에 도달하지 못한 경우 -1 반환
    }

    public int solution(string[] maps)
    {
        int n = maps.Length;        // maps 배열의 행 개수 (높이)
        int m = maps[0].Length;     // maps 배열의 열 개수 (너비)

        // 'S', 'L', 'E' 문자의 위치를 찾음
        Tuple<int, int> startPos = FindPosition(maps, 'S');
        Tuple<int, int> leverPos = FindPosition(maps, 'L');
        Tuple<int, int> exitPos = FindPosition(maps, 'E');

        if (startPos.Item1 == -1 || leverPos.Item1 == -1 || exitPos.Item1 == -1)
            return -1;  // 시작 위치 또는 레버 위치 또는 출구 위치를 찾지 못한 경우 -1 반환

        int startX = startPos.Item1;
        int startY = startPos.Item2;
        int leverX = leverPos.Item1;
        int leverY = leverPos.Item2;
        int exitX = exitPos.Item1;
        int exitY = exitPos.Item2;

        // 시작 위치에서 레버까지의 최단 거리와 레버에서 출구까지의 최단 거리 계산
        int startToLever = BFS(maps, startX, startY, leverX, leverY);
        int leverToExit = BFS(maps, leverX, leverY, exitX, exitY);

        if (startToLever == -1 || leverToExit == -1)
            return -1;  // 시작 위치에서 레버 또는 레버에서 출구까지의 최단 거리를 찾지 못한 경우 -1 반환

        int totalTime = startToLever + leverToExit;   // 총 소요 시간 계산
        return totalTime;    // 최종 결과 반환
    }
}