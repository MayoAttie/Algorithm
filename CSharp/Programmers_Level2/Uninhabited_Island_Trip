using System;
using System.Collections.Generic;

public class Solution {
    bool[,] visited; // 방문한 위치를 기록하는 2차원 배열

    public int[] solution(string[] maps) {
        List<int> answer = new List<int>();
        int col = maps.Length; // 지도의 행의 개수
        int row = maps[0].Length; // 지도의 열의 개수
        visited = new bool[col, row]; // 방문한 위치를 기록하기 위한 2차원 배열 초기화

        for (int i = 0; i < col; i++)
        {
            for (int j = 0; j < row; j++)
            {
                if (!visited[i, j] && maps[i][j] != 'X')
                {
                    int maxDays = BFS(i, j, maps); // 탐색 시작
                    answer.Add(maxDays); // 최대 일수를 리스트에 추가
                }
            }
        }

        if (answer.Count <= 0)
            answer.Add(-1); // 탐색 결과가 없는 경우 -1을 추가하여 처리
        else
            answer.Sort(); // 결과 리스트를 오름차순으로 정렬

        return answer.ToArray(); // 리스트를 배열로 변환하여 반환
    }

    int BFS(int startCol, int startRow, string[] maps)
    {
        int col = maps.Length; // 지도의 행의 개수
        int row = maps[0].Length; // 지도의 열의 개수

        int[] directionCol = {-1, 1, 0, 0}; // 상하좌우 이동을 위한 행 방향 배열
        int[] directionRow = {0, 0, -1, 1}; // 상하좌우 이동을 위한 열 방향 배열

        int days = 0; // 탐색한 위치의 일 수를 누적하여 저장할 변수

        Queue<Tuple<int, int>> que = new Queue<Tuple<int, int>>(); // BFS를 위한 큐 초기화
        que.Enqueue(Tuple.Create(startCol, startRow)); // 시작 위치를 큐에 추가
        visited[startCol, startRow] = true; // 시작 위치를 방문했다고 표시

        while (que.Count > 0)
        {
            int currCol = que.Peek().Item1; // 큐의 맨 앞의 행 위치
            int currRow = que.Peek().Item2; // 큐의 맨 앞의 열 위치
            que.Dequeue(); // 큐에서 해당 위치를 제거

            days += maps[currCol][currRow] - '0'; // 해당 위치의 값을 정수로 변환하여 일 수를 누적

            for (int i = 0; i < 4; i++)
            {
                int nextCol = currCol + directionCol[i]; // 다음 위치의 행 좌표 계산
                int nextRow = currRow + directionRow[i]; // 다음 위치의 열 좌표 계산

                // 다음 위치가 지도 내에 있고, 아직 방문하지 않았으며, 벽('X')이 아니라면 탐색 대상으로 추가
                if (nextCol >= 0 && nextCol < col && nextRow >= 0 && nextRow < row && !visited[nextCol, nextRow] && maps[nextCol][nextRow] != 'X')
                {
                    que.Enqueue(Tuple.Create(nextCol, nextRow)); // 다음 위치를 큐에 추가하여 탐색 진행
                    visited[nextCol, nextRow] = true; // 다음 위치를 방문했다고 표시
                }
            }
        }
        return days; // 탐색이 종료되면 누적된 일 수를 반환
    }
}