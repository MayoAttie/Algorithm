using System;

public class Solution {
    int answer = 0;
    public int solution(int k, int[,] dungeons) {
        bool[] visited = new bool[dungeons.Length / 2]; // 방문 여부를 체크할 1차원 배열 선언 (2차원 배열 크기의 절반으로 생성)
        dfsAlgorithm(k, dungeons, visited, 0);
        
        return answer;
    }
    
    void dfsAlgorithm(int k, int[,] dungeons, bool[] visited, int count)
    {
        answer = Math.Max(answer, count); // 현재까지 얻은 최대 보물 개수를 업데이트

        int n = dungeons.GetLength(0); // 2차원 배열의 행 개수를 가져옴
        for (int i = 0; i < n; i++)
        {
            if (visited[i] == false && k >= dungeons[i, 0]) // 아직 방문하지 않았고, 현재 강도(k)가 필요한 강도보다 크거나 같은 경우
            {
                visited[i] = true; // 해당 던전을 방문으로 표시
                dfsAlgorithm(k - dungeons[i, 1], dungeons, visited, count + 1); // 다음 던전으로 이동하고 보물 개수와 강도를 업데이트하여 DFS 재귀 호출
                visited[i] = false; // 해당 던전 방문 상태를 다시 원래대로 되돌림 (백트래킹)
            }
        }
    }
}