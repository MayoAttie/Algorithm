using System;
using System.Collections.Generic;

public class Solution {
    List<List<int>> graph;

    public int solution(int n, int[,] wires) {
        int answer = int.MaxValue; // 최소값을 찾기 위해 초기값을 충분히 큰 값으로 설정
        graph = new List<List<int>>(n + 1);
        for (int i = 0; i <= n; i++)
        {
            graph.Add(new List<int>());
        }

        // 그래프 구성: 연결 정보를 인접 리스트로 표현
        for (int i = 0; i < wires.GetLength(0); i++)
        {
            int v1 = wires[i, 0];
            int v2 = wires[i, 1];
            graph[v1].Add(v2);
            graph[v2].Add(v1);
        }

        // 각 선분을 하나씩 끊어보면서 최소 차이를 찾음
        for (int i = 0; i < wires.GetLength(0); i++)
        {
            int v1 = wires[i, 0];
            int v2 = wires[i, 1];

            graph[v1].Remove(v2); // 선분을 끊음
            graph[v2].Remove(v1); // 선분을 끊음

            int diff = BFS(v1, n); // BFS를 이용하여 두 부분 그래프의 크기 차이를 계산
            answer = Math.Min(answer, diff); // 최소값으로 업데이트

            graph[v1].Add(v2); // 선분을 다시 연결
            graph[v2].Add(v1); // 선분을 다시 연결
        }

        return answer; // 최소 차이를 반환
    }

    int BFS(int start, int n)
    {
        bool[] visited = new bool[n + 1]; // 방문 여부를 저장하는 배열, 크기는 n + 1
        visited[start] = true; // 시작 정점을 방문으로 표시

        Queue<int> que = new Queue<int>(); // BFS를 위한 큐 초기화
        que.Enqueue(start); // 시작 정점을 큐에 추가
        int count = 1; // 시작 정점도 하나의 정점으로 카운트

        while (que.Count > 0)
        {
            int node = que.Peek(); // 큐의 맨 앞의 정점을 가져옴
            que.Dequeue(); // 큐에서 해당 정점을 제거

            foreach (var neighbor in graph[node])
            {
                if (!visited[neighbor])
                {
                    visited[neighbor] = true; // 방문한 정점으로 표시
                    que.Enqueue(neighbor); // 인접한 정점을 큐에 추가하여 탐색 계속
                    count++; // 방문한 정점의 수를 카운트
                }
            }
        }

        int diff = Math.Abs(n - 2 * count); // 두 부분 그래프의 크기 차이 계산
        return diff; // 차이를 반환
    }
}