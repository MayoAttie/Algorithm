using System;
using System.Collections.Generic;

public class Solution {
    public int solution(string[] want, int[] number, string[] discount) {
        int answer = 0;
        int days = 10; // 검사할 기간 (10일)

        Dictionary<string, int> map = new Dictionary<string, int>();

        // want 배열과 number 배열을 map으로 묶어줍니다.
        for (int i = 0; i < want.Length; i++) 
        {
            map[want[i]] = number[i];
        }

        // discount 배열을 검사합니다. (10일씩 이동하며 확인)
        for (int i = 0; i < discount.Length - days + 1; i++) 
        {
            Dictionary<string, int> currMap = new Dictionary<string, int>();
            bool isIdentical = true; // 해당 기간 내에 모든 항목이 일치하는지 확인하는 플래그

            // 현재 기간 내에서 각 항목의 개수를 세어 currMap에 저장합니다.
            for (int j = 0; j < days; j++) 
            {
                if (currMap.ContainsKey(discount[i + j]))
                {
                    currMap[discount[i + j]]++;
                }
                else
                {
                    currMap[discount[i + j]] = 1;
                }
            }

            // map과 currMap을 비교하여 일치하는지 확인합니다.
            foreach (var pair in map) 
            {
                string key = pair.Key;
                int value = pair.Value;

                // 현재 기간의 currMap에서 해당 항목의 개수를 가져옵니다.
                if (!currMap.TryGetValue(key, out int count) || count != value) 
                {
                    // 항목이 일치하지 않으면 isIdentical을 false로 설정하고 반복문을 종료합니다.
                    isIdentical = false;
                    break;
                }
            }

            // 현재 기간의 항목들이 모두 일치하는 경우 answer를 증가시킵니다.
            answer += isIdentical ? 1 : 0;
        }

        return answer;
    }
}