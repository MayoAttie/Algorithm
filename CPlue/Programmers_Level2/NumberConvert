#include <string>
#include <vector>
#include <limits>
using namespace std;

int solution(int x, int y, int n) {
    vector<int> dp(y + 1, numeric_limits<int>::max());
    dp[x] = 0; // 시작점의 최소 연산 횟수는 0으로 초기화합니다.

    for (int i = x; i <= y; i++) 
    {
        if (dp[i] == numeric_limits<int>::max())
            continue; // 이전에 도달하지 못한 값은 스킵합니다.

        // 현재 값에서 n을 더한 경우, y보다 작거나 같으면서 최소 연산 횟수를 갱신합니다.
        if (i + n <= y)
            dp[i + n] = min(dp[i + n], dp[i] + 1);

        // 현재 값에 2를 곱한 경우, y보다 작거나 같으면서 최소 연산 횟수를 갱신합니다.
        if (i * 2 <= y)
            dp[i * 2] = min(dp[i * 2], dp[i] + 1);

        // 현재 값에 3을 곱한 경우, y보다 작거나 같으면서 최소 연산 횟수를 갱신합니다.
        if (i * 3 <= y)
            dp[i * 3] = min(dp[i * 3], dp[i] + 1);
    }

    if (dp[y] == numeric_limits<int>::max())
        return -1; // y에 도달할 수 없는 경우 -1을 반환합니다.

    return dp[y]; // y에 도달한 경우 최소 연산 횟수를 반환합니다.
}