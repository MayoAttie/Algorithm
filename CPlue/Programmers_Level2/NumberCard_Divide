#include <string>
#include <vector>
#include <algorithm>
using namespace std;

// 최대공약수(Greatest Common Divisor)를 구하는 함수
int getGcd(vector<int> arr) 
{
    int result = arr[0];
    for (int i = 1; i < arr.size(); i++) 
    {
        int a = result;
        int b = arr[i];
        
        // 유클리드 호제법을 이용하여 최대공약수 계산
        while (b != 0)
        {
            int r = a % b;
            a = b;
            b = r;
        }
        
        result = a;
    }
    return result;
}

int solution(vector<int> arrayA, vector<int> arrayB) {
    int answer = 0;
    
    // arrayA와 arrayB의 최대공약수를 구함
    int AsGcd = getGcd(arrayA);
    int BsGcd = getGcd(arrayB);
    
    bool isA_Check = false;
    bool isB_Check = false;
    
    // arrayB의 모든 원소가 arrayA의 최대공약수로 나누어지지 않으면 isA_Check를 true로 설정
    if (all_of(arrayB.begin(), arrayB.end(), [&](int num) { return num % AsGcd != 0; }))
        isA_Check = true;
    
    // arrayA의 모든 원소가 arrayB의 최대공약수로 나누어지지 않으면 isB_Check를 true로 설정
    if (all_of(arrayA.begin(), arrayA.end(), [&](int num) { return num % BsGcd != 0; }))
        isB_Check = true;
    
    // 조건에 따라 answer 값을 설정
    if (isA_Check || isB_Check)
        answer = max(AsGcd, BsGcd);
    else if (isA_Check)
        answer = AsGcd;
    else if (isB_Check)
        answer = BsGcd;
    
    return answer;
}