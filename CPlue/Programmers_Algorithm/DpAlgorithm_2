#include <string>
#include <vector>
#include <algorithm>
using namespace std;


int DP_Algorithm(vector<vector<int>> triangle)
{
    vector<vector<int>> dp(triangle.size(), vector<int>(triangle.size(), 0));
    
    dp[0][0] = triangle[0][0];
    
    for (int i = 1; i < triangle.size(); ++i) 
    {
        for (int j = 0; j <= i; ++j)
        {
            if (j == 0)
                dp[i][j] = dp[i-1][j] + triangle[i][j];
            else if (j == i)
                dp[i][j] = dp[i-1][j-1] + triangle[i][j];
            else 
                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j];
        }
    }
    
    return *max_element(dp.back().begin(), dp.back().end());
}

int solution(vector<vector<int>> triangle) {
    
    return DP_Algorithm(triangle);
}