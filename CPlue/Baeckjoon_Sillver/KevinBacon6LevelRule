#include <iostream>
#include <vector>
#include <limits.h>
using namespace std;

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    int users;
    int edges;
    int minDist = INT_MAX;
    int answer = -1;
    cin >> users >> edges;
    
    // 거리 정보를 저장할 2차원 벡터 초기화
    vector<vector<long>> distance(users+1, vector<long>(users+1));
    
    // 자기 자신으로 가는 거리는 0으로 초기화, 나머지는 아주 큰 값으로 초기화
    for(int i=1; i<=users; i++)
    {
        for(int j=1; j<=users; j++)
        {
            if(i==j)
                distance[i][j] = 0;
            else
                distance[i][j] = 999999999;
        }
    }
    
    // 간선 정보 입력 받아 거리 업데이트
    for(int i=0; i<edges; i++)
    {
        int my;
        int you;
        cin >> my >> you;
        distance[my][you] = 1;
        distance[you][my] = 1;
    }
    
    // 플로이드-와샬 알고리즘을 사용하여 최단 거리 계산
    for(int middle = 1; middle <= users; middle++)
    {
        for(int start = 1; start <= users; start++)
        {
            for(int end = 1; end <= users; end++)
            {
                distance[start][end] = min(distance[start][end], distance[start][middle] + distance[middle][end]);
            }
        }
    }
    
    // 각 사용자의 합의 거리를 계산하고, 최소값을 가지는 사용자 번호 찾기
    for(int i=1; i<=users; i++)
    {
        int temp = 0;
        for(int j=1; j<=users; j++)
        {
            temp += distance[i][j];
        }
        if(minDist > temp)
        {
            minDist = temp;
            answer = i;
        }
    }
    
    // 최소 합의 거리를 가지는 사용자 번호 출력
    cout << answer;
    
    return 0;
}