#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int n, m;
int dx[] = { -1, -1, -1, 0, 1, 0, 1, 1 };
int dy[] = { -1, 0, 1, 1, 1, -1, 0, -1 };
vector<vector<int>> graph;
int ans = 0;

// BFS 함수: 시작 위치 (x, y)에서 아기 상어까지의 거리를 찾음
int bfs(int x, int y) 
{
    vector<vector<bool>> visited(n, vector<bool>(m, false));
    queue<pair<int, pair<int, int>>> q;
    q.push({ x, {y, 0} }); // 시작 위치와 거리를 큐에 추가
    visited[x][y] = true;

    while (!q.empty()) 
    {
        int x = q.front().first; // 큐에서 현재 위치 x를 꺼냄
        int y = q.front().second.first; // 현재 위치 y를 꺼냄
        int distance = q.front().second.second; // 현재까지의 거리를 꺼냄
        q.pop();

        for (int i = 0; i < 8; i++) 
        {
            int nx = x + dx[i]; // 다음 위치의 x 좌표
            int ny = y + dy[i]; // 다음 위치의 y 좌표

            if (0 <= nx && nx < n && 0 <= ny && ny < m && !visited[nx][ny]) 
            {
                if (graph[nx][ny] == 0)
                {
                    q.push({ nx, {ny, distance + 1} }); // 빈 칸이면 큐에 추가하고 거리를 증가
                    visited[nx][ny] = true; // 방문 표시
                }
                else 
                    return distance + 1; // 아기 상어를 찾으면 현재까지의 거리 + 1 반환
            }
        }
    }

    return -1; // 아기 상어를 찾지 못한 경우
}

int main() 
{
    cin >> n >> m; // 공간의 크기 입력
    graph = vector<vector<int>>(n, vector<int>(m));

    for (int i = 0; i < n; i++) 
    {
        for (int j = 0; j < m; j++) 
        {
            cin >> graph[i][j]; // 공간 상태 입력 (0: 빈 칸, 1: 아기 상어)
        }
    }

    for (int i = 0; i < n; i++) 
    {
        for (int j = 0; j < m; j++) 
        {
            if (graph[i][j] == 0)
                ans = max(ans, bfs(i, j)); // 빈 칸에서부터 BFS를 수행하여 최대 거리 찾기
        }
    }

    cout << ans << endl; // 최대 거리 출력

    return 0;
}