#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<vector<int>> graph;
vector<int> visited;

void BFS(int start, int depth);

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    int N, M, S;
    cin >> N >> M >> S;
    
    graph = vector<vector<int>>(N+1);
    visited = vector<int>(N+1, -1);
    
    for(int i=0; i<M; i++)
    {
        int a, b;
        cin >> a >> b;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }
    
    BFS(S, 0);
    
    for(int i=1; i<=N; i++)
    {
        cout << visited[i] << "\n";
    }
}

void BFS(int start, int depth)
{
    queue<int> que;
    que.push(start);
    visited[start] = 0;
    
    while(!que.empty())
    {
        int cur = que.front();
        que.pop();
        
        for(int i : graph[cur])
        {
            if(visited[i] == -1)
            {
                que.push(i);
                visited[i] = visited[cur]+1;
            }
        }
    }
}
