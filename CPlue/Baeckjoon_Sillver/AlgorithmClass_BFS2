#include <stdio.h>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

vector<vector<int>> graph;
vector<bool> visited;
vector<int> answer;

void BFS(int start);

int main()
{
    int nodes, edges, start;
    scanf("%d %d %d", &nodes, &edges, &start);

    graph = vector<vector<int>>(nodes + 1);
    visited = vector<bool>(nodes + 1);
    answer = vector<int>(nodes + 1);

    for (int i = 0; i < edges; i++)
    {
        int a, b;
        scanf("%d %d", &a, &b);

        graph[a].push_back(b);
        graph[b].push_back(a);
    }

    for (int i = 1; i <= nodes; i++)
    {
        sort(graph[i].begin(), graph[i].end(), greater<int>());
    }

    BFS(start);

    for (int i = 1; i <= nodes; i++)
    {
        printf("%d\n", answer[i]);
    }

    return 0;
}

void BFS(int start)
{
    int order = 1;
    queue<int> que;
    que.push(start);
    visited[start] = true;

    while (!que.empty())
    {
        int current = que.front();
        que.pop();
        answer[current] = order;
        order++;

        for (auto i : graph[current])
        {
            if (!visited[i])
            {
                visited[i] = true;
                que.push(i);
            }
        }
    }
}