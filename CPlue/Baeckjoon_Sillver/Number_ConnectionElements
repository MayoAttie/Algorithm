#include <iostream>
#include <vector>

using namespace std;


/*
문제
방향 없는 그래프가 주어졌을 때, 
연결 요소 (Connected Component)의 개수를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 정점의 개수 N과 간선의 개수 M이 주어진다.
(1 ≤ N ≤ 1,000, 0 ≤ M ≤ N×(N-1)/2)

둘째 줄부터 M개의 줄에 간선의 양 끝점 u와 v가 주어진다.
(1 ≤ u, v ≤ N, u ≠ v) 같은 간선은 한 번만 주어진다.


출력
첫째 줄에 연결 요소의 개수를 출력한다.
*/


vector<vector<int>> graph; // 그래프를 저장하는 2차원 벡터
vector<bool> visited; // 노드 방문 여부를 저장하는 배열

// 깊이 우선 탐색 함수 선언
void DFS(int node);

int main()
{
    int answer = 0; // 연결 요소의 개수를 저장할 변수
    int nodes;
    int edges;
    cin >> nodes >> edges;

    // 각 노드마다 연결된 노드를 저장하는 그래프 초기화
    graph = vector<vector<int>>(nodes + 1);
    visited = vector<bool>(nodes + 1, false);

    // 간선 정보 입력 및 그래프 구성
    for (int i = 0; i < edges; i++)
    {
        int node, edge;
        cin >> node >> edge;
        graph[node].push_back(edge); // 양방향 간선 추가
        graph[edge].push_back(node);
    }

    // 모든 노드에 대해 연결 요소 개수 확인
    for (int i = 1; i <= nodes; i++)
    {
        if (!visited[i]) // 방문하지 않은 노드일 때
        {
            answer++; // 새로운 연결 요소 시작
            DFS(i); // 해당 노드부터 DFS 탐색
        }
    }

    cout << answer << endl; // 연결 요소 개수 출력

    return 0;
}

// 깊이 우선 탐색 함수 정의
void DFS(int node)
{
    visited[node] = true; // 현재 노드를 방문 처리

    // 현재 노드에 연결된 모든 노드에 대해 탐색
    for (int i = 0; i < graph[node].size(); i++)
    {
        int next = graph[node][i]; // 다음 노드 선택

        if (!visited[next]) // 방문하지 않은 노드일 때
        {
            DFS(next); // 다음 노드에 대해 DFS 수행
        }
    }
}