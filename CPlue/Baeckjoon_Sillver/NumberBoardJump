#include <iostream>
#include <vector>
#include <map>

using namespace std;

int drX[4] = { 1, 0, -1, 0 };
int drY[4] = { 0, 1, 0, -1 };

void DFS(vector<vector<int>>& table, int x, int y, int depth, map<int, bool>& visited, int num) {
    if (depth == 6) 
    {
        visited[num] = true; // 6자리 수를 완성했을 때, 해당 수를 방문한 것으로 표시
        return;
    }

    for (int i = 0; i < 4; i++) {
        int nextX = x + drX[i];
        int nextY = y + drY[i];

        if (nextX >= 0 && nextX < 5 && nextY >= 0 && nextY < 5) 
        {
            int nextNum = num * 10 + table[nextX][nextY]; // 다음 칸의 숫자를 현재 숫자에 붙여서 새로운 수를 만듦
            DFS(table, nextX, nextY, depth + 1, visited, nextNum); // 재귀적으로 다음 칸으로 이동
        }
    }
}

int main() {
    vector<vector<int>> table = vector<vector<int>>(5, vector<int>(5, 0));

    for (int i = 0; i < 5; i++) 
    {
        for (int j = 0; j < 5; j++) 
        {
            cin >> table[i][j]; // 숫자판 정보 입력
        }
    }

    map<int, bool> visited;
    for (int i = 0; i < 5; i++) 
    {
        for (int j = 0; j < 5; j++) 
        {
            DFS(table, i, j, 1, visited, table[i][j]); // 모든 칸에서 DFS 시작
        }
    }

    cout << visited.size() << endl; // 중복 없이 만들 수 있는 수들의 개수 출력
}



/*
문제
5×5 크기의 숫자판이 있다. 
각각의 칸에는 숫자(digit, 0부터 9까지)가 적혀 있다. 
이 숫자판의 임의의 위치에서 시작해서, 인접해 있는 네 방향으로 다섯 번 이동하면서, 
각 칸에 적혀있는 숫자를 차례로 붙이면 6자리의 수가 된다. 
이동을 할 때에는 한 번 거쳤던 칸을 다시 거쳐도 되며, 0으로 시작하는 000123과 같은 수로 만들 수 있다.

숫자판이 주어졌을 때, 만들 수 있는 서로 다른 여섯 자리의 수들의 개수를 구하는 프로그램을 작성하시오.

입력
다섯 개의 줄에 다섯 개의 정수로 숫자판이 주어진다.

출력
첫째 줄에 만들 수 있는 수들의 개수를 출력한다.
*/