#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

vector<vector<int>> graph;
vector<bool> visited;
vector<int> depths;

void DFS(int node, int depth);

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int N, M, R;
    cin >> N >> M >> R;

    graph = vector<vector<int>>(N + 1);
    visited = vector<bool>(N + 1, false);
    depths = vector<int>(N + 1, -1);

    for (int i = 0; i < M; i++)
    {
        int a, b;
        cin >> a >> b;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }

    for (int i = 1; i <= N; i++)
    {
        sort(graph[i].begin(), graph[i].end());
    }

    DFS(R, 0);

    for (int i = 1; i <= N; i++)
    {
        cout << depths[i] << "\n";
    }

}

void DFS(int node, int depth)
{
    visited[node] = true;
    depths[node] = depth;

    for (int i = 0; i < graph[node].size(); i++)
    {
        int next = graph[node][i];
        if (!visited[next])
        {
            DFS(next, depth + 1);
        }
    }
}