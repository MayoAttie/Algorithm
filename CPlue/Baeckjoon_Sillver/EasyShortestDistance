#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<vector<int>> table;         
vector<vector<bool>> visited;    
int drX[4] = { 1, 0, -1, 0 };   
int drY[4] = { 0, 1, 0, -1 };

struct node
{
    int y;    // 현재 위치의 y 좌표
    int x;    // 현재 위치의 x 좌표
};

// BFS 알고리즘을 사용하여 최단 거리 계산하는 함수
void BFS(pair<int, int> start);

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int col, row;
    cin >> col >> row;
    pair<int, int> start;

    table = vector<vector<int>>(col, vector<int>(row, 0));  // 미로 정보를 저장할 2D 배열 초기화
    visited = vector<vector<bool>>(col, vector<bool>(row, false)); // 방문 여부를 저장할 2D 배열 초기화

    // 미로 정보 입력
    for (int i = 0; i < col; i++)
    {
        for (int j = 0; j < row; j++)
        {
            cin >> table[i][j];
            if (table[i][j] == 2) // 시작 지점을 찾았다면
            {
                start = make_pair(i, j); // 시작 지점 좌표 저장
                table[i][j] = 0; // 시작 지점은 0으로 초기화
            }
        }
    }

    BFS(start); // BFS로 최단 거리 계산

    // 최단 거리 정보를 출력
    for (int i = 0; i < col; i++)
    {
        for (int j = 0; j < row; j++)
        {
            if (!visited[i][j] && table[i][j] != 0)
                table[i][j] = -1; // 방문하지 않은 지역을 -1로 수정
            
            cout << table[i][j] << " ";
        }
        cout << endl;
    }
}

// BFS 알고리즘 구현
void BFS(pair<int, int> start)
{
    queue<node> que;
    que.push({ start.first, start.second }); // 시작 지점 큐에 넣음
    visited[start.first][start.second] = true; // 시작 지점 방문 표시

    while (!que.empty())
    {
        int curY = que.front().y;
        int curX = que.front().x;
        que.pop(); // 큐에서 현재 위치를 꺼냄

        for (int i = 0; i < 4; i++)
        {
            int nY = curY + drY[i];
            int nX = curX + drX[i];

            if (nY >= 0 && nY < table.size() && nX >= 0 && nX < table[0].size() &&
                table[nY][nX] == 1 && !visited[nY][nX])
            {
                visited[nY][nX] = true;
                table[nY][nX] = table[curY][curX] + 1; // 거리 정보 업데이트
                que.push({ nY, nX }); // 다음 위치 큐에 넣음
            }
        }
    }
}