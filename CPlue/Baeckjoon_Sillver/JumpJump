#include <iostream>
#include <vector>
#include <limits>

using namespace std;

int main() {
    int N;
    cin >> N;

    vector<int> table(N + 1);
    for (int i = 1; i <= N; ++i) {
        cin >> table[i];
    }

    // jumpCount[i]: i 위치까지의 최소 점프 횟수를 저장하는 배열
    vector<int> jumpCount(N + 1, -1);

    // BFS 탐색을 위한 큐
    queue<int> q;

    // 시작 위치를 큐에 추가하고 최소 점프 횟수를 0으로 초기화
    q.push(1);
    jumpCount[1] = 0;

    // BFS 탐색
    while (!q.empty()) {
        int currentPos = q.front();
        q.pop();

        // 현재 위치에서 가능한 모든 점프를 탐색
        for (int jump = 1; jump <= table[currentPos] && currentPos + jump <= N; ++jump) {
            int nextPos = currentPos + jump;
            
            // 아직 방문하지 않은 위치라면
            if (jumpCount[nextPos] == -1) {
                // 최소 점프 횟수 갱신 및 큐에 추가
                jumpCount[nextPos] = jumpCount[currentPos] + 1;
                q.push(nextPos);
            }
        }
    }

    // 마지막 위치까지의 최소 점프 횟수 출력
    cout << jumpCount[N] << endl;

    return 0;
}

/*
문제
재환이가 1×N 크기의 미로에 갇혀있다. 
미로는 1×1 크기의 칸으로 이루어져 있고, 각 칸에는 정수가 하나 쓰여 있다. 
i번째 칸에 쓰여 있는 수를 Ai라고 했을 때, 재환이는 Ai이하만큼 오른쪽으로 떨어진 칸으로 한 번에 점프할 수 있다.  
예를 들어, 3번째 칸에 쓰여 있는 수가 3이면, 재환이는 4, 5, 6번 칸 중 하나로 점프할 수 있다.

재환이는 지금 미로의 가장 왼쪽 끝에 있고, 가장 오른쪽 끝으로 가려고 한다. 
이때, 최소 몇 번 점프를 해야 갈 수 있는지 구하는 프로그램을 작성하시오. 
만약, 가장 오른쪽 끝으로 갈 수 없는 경우에는 -1을 출력한다.

입력
첫째 줄에 N(1 ≤ N ≤ 1,000)이 주어진다. 둘째 줄에는 Ai (0 ≤ Ai ≤ 100)가 주어진다.

출력
재환이가 최소 몇 번 점프를 해야 가장 오른쪽 끝 칸으로 갈 수 있는지 출력한다. 만약, 
가장 오른쪽 끝으로 갈 수 없는 경우에는 -1을 출력한다.
*/