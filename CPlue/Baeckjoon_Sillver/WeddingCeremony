#include <iostream>
#include <vector>
#include <stack>
using namespace std;

vector<vector<int>> graph;  // 그래프의 인접 리스트
vector<bool> visited;  // 방문 여부

int DFS(int node);  // DFS 함수 선언

int main()
{
    int friends;
    int edges;

    cin >> friends >> edges;

    graph = vector<vector<int>>(friends + 1);  // 인접 리스트 초기화
    visited = vector<bool>(friends + 1, false);  // 방문 여부 초기화

    for (int i = 0; i < edges; i++)
    {
        int a, b;
        cin >> a >> b;

        // 양방향 친구 관계 추가
        graph[a].push_back(b);
        graph[b].push_back(a);
    }

    int answer = DFS(1);  // 상근이는 학번 1에서 시작
    cout << answer << endl;
}

int DFS(int node)
{
    stack<pair<int, int>> stk;  // (노드, 현재까지의 깊이)를 저장하는 스택
    int result = 0;  // 초대할 동기의 수
    visited[node] = true;
    stk.push(make_pair(node, 0));  // 시작 노드와 초기 깊이 0을 스택에 추가

    while (!stk.empty())
    {
        pair<int, int> current = stk.top();
        stk.pop();

        for (int i = 0; i < graph[current.first].size(); i++)
        {
            int friendNode = graph[current.first][i];
            if (!visited[friendNode] && current.second < 2)
            {
                result++;  // 초대할 동기 수 증가
                visited[friendNode] = true;
                stk.push(make_pair(friendNode, current.second + 1));  // 깊이를 1 증가시켜서 스택에 추가
            }
        }
    }

    return result;  // 최종적으로 초대할 동기의 수 반환
}


/**
 * 문제
상근이는 자신의 결혼식에 학교 동기 중 자신의 친구와 친구의 친구를 초대하기로 했다. 
상근이의 동기는 모두 N명이고, 이 학생들의 학번은 모두 1부터 N까지이다. 상근이의 학번은 1이다.

상근이는 동기들의 친구 관계를 모두 조사한 리스트를 가지고 있다.
이 리스트를 바탕으로 결혼식에 초대할 사람의 수를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 상근이의 동기의 수 n (2 ≤ n ≤ 500)이 주어진다.
 둘째 줄에는 리스트의 길이 m (1 ≤ m ≤ 10000)이 주어진다.
  다음 줄부터 m개 줄에는 친구 관계 ai bi가 주어진다.
   (1 ≤ ai < bi ≤ n) ai와 bi가 친구라는 뜻이며, bi와 ai도 친구관계이다. 

출력
첫째 줄에 상근이의 결혼식에 초대하는 동기의 수를 출력한다.
**/