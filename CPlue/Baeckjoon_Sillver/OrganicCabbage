#include <iostream>
#include <vector>

using namespace std;

/*
차세대 영농인 한나는 강원도 고랭지에서 유기농 배추를 재배하기로 하였다.
농약을 쓰지 않고 배추를 재배하려면 배추를 해충으로부터 보호하는 것이 중요하기 때문에,
한나는 해충 방지에 효과적인 배추흰지렁이를 구입하기로 결심한다.
이 지렁이는 배추근처에 서식하며 해충을 잡아 먹음으로써 배추를 보호한다. 
특히, 어떤 배추에 배추흰지렁이가 한 마리라도 살고 있으면 이 지렁이는 인접한 다른 배추로 이동할 수 있어, 
그 배추들 역시 해충으로부터 보호받을 수 있다.
한 배추의 상하좌우 네 방향에 다른 배추가 위치한 경우에 서로 인접해있는 것이다.

한나가 배추를 재배하는 땅은 고르지 못해서 배추를 군데군데 심어 놓았다.
배추들이 모여있는 곳에는 배추흰지렁이가 한 마리만 있으면 되므로 
서로 인접해있는 배추들이 몇 군데에 퍼져있는지 조사하면 총 몇 마리의 지렁이가 필요한지 알 수 있다. 
예를 들어 배추밭이 아래와 같이 구성되어 있으면 최소 5마리의 배추흰지렁이가 필요하다.
0은 배추가 심어져 있지 않은 땅이고, 1은 배추가 심어져 있는 땅을 나타낸다.

1	1	0	0	0	0	0	0	0	0
0	1	0	0	0	0	0	0	0	0
0	0	0	0	1	0	0	0	0	0
0	0	0	0	1	0	0	0	0	0
0	0	1	1	0	0	0	1	1	1
0	0	0	0	1	0	0	1	1	1

입력
입력의 첫 줄에는 테스트 케이스의 개수 T가 주어진다. 
그 다음 줄부터 각각의 테스트 케이스에 대해 
첫째 줄에는 배추를 심은 배추밭의 가로길이 M(1 ≤ M ≤ 50)과 세로길이 N(1 ≤ N ≤ 50),
그리고 배추가 심어져 있는 위치의 개수 K(1 ≤ K ≤ 2500)이 주어진다.
그 다음 K줄에는 배추의 위치 X(0 ≤ X ≤ M-1), Y(0 ≤ Y ≤ N-1)가 주어진다.
두 배추의 위치가 같은 경우는 없다.

출력
각 테스트 케이스에 대해 필요한 최소의 배추흰지렁이 마리 수를 출력한다.

*/



// 배추밭의 정보와 관련된 변수와 함수
vector<vector<int>> table;     // 배추밭 정보를 저장할 2차원 벡터
vector<vector<bool>> visited;  // 각 위치의 방문 여부를 저장할 2차원 벡터
vector<vector<int>> cabbageVec; // 배추의 위치를 저장할 2차원 벡터

// 상하좌우 이동을 위한 배열
int drX[4] = {1, 0, -1, 0};
int drY[4] = {0, 1, 0, -1};

int answer = 0; // 한 테스트 케이스에서 필요한 배추흰지렁이의 수

// 깊이 우선 탐색 (DFS) 함수
void DFS(int x, int y, const int row, const int col);

int main()
{
    int T;
    int index = 0;
    cin >> T;

    while (index < T)
    {
        int row, col, cabbageNum;
        cin >> row >> col >> cabbageNum;

        // 초기화
        table = vector<vector<int>>(row, vector<int>(col, 0));
        visited = vector<vector<bool>>(row, vector<bool>(col, false));
        cabbageVec = vector<vector<int>>(cabbageNum, vector<int>(2, 0));

        // 배추 위치 정보 입력
        for (int i = 0; i < cabbageNum; i++)
        {
            int x, y;
            cin >> x >> y;
            table[x][y] = 1; // 배추 위치 표시
        }

        // 배추흰지렁이 수 세기
        for (int i = 0; i < row; i++)
        {
            for (int j = 0; j < col; j++)
            {
                if (table[i][j] == 1 && !visited[i][j])
                {
                    answer++;
                    DFS(i, j, row, col);
                }
            }
        }

        // 결과 출력
        cout << answer << endl;

        // 변수 초기화
        answer = 0;
        index++;
    }

    return 0;
}

// DFS 함수 정의
void DFS(int x, int y, const int row, const int col)
{
    visited[x][y] = true;

    for (int i = 0; i < 4; i++)
    {
        int nX = x + drX[i];
        int nY = y + drY[i];

        // 인접한 배추가 있고 방문하지 않았다면 재귀 호출
        if (nX >= 0 && nX < row && nY >= 0 && nY < col)
        {
            if (!visited[nX][nY] && table[nX][nY] == 1)
                DFS(nX, nY, row, col);
        }
    }
}