#include <iostream>
#include <vector>

using namespace std;

const int MAX_N = 101;
int n;
vector<vector<int>> graph(MAX_N, vector<int>(MAX_N, 0));
vector<vector<bool>> visited(MAX_N, vector<bool>(MAX_N, false));
int dx[] = {1, 0};
int dy[] = {0, 1};

bool inRange(int x, int y) {
    return (x >= 0 && x < n && y >= 0 && y < n);
}

bool dfs(int x, int y) {
    visited[x][y] = true;
    for (int i = 0; i < 2; i++) {
        int nx = x + dx[i] * graph[x][y];
        int ny = y + dy[i] * graph[x][y];
        if (inRange(nx, ny) && !visited[nx][ny]) {
            if (graph[nx][ny] == -1) {
                cout << "HaruHaru" << endl;
                exit(0);
            } else {
                if (dfs(nx, ny)) {
                    return true;
                }
            }
        }
    }
    return false;
}

int main() {
    cin >> n;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> graph[i][j];
        }
    }

    if (!dfs(0, 0)) {
        cout << "Hing" << endl;
    }

    return 0;
}