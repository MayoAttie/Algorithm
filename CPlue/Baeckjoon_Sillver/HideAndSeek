#include <iostream>
#include <vector>
#include <queue>
using namespace std;

/*
문제
수빈이는 동생과 숨바꼭질을 하고 있다. 수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고, 
동생은 점 K(0 ≤ K ≤ 100,000)에 있다. 수빈이는 걷거나 순간이동을 할 수 있다.
만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다.
순간이동을 하는 경우에는 1초 후에 2*X의 위치로 이동하게 된다.

수빈이와 동생의 위치가 주어졌을 때, 
수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지 구하는 프로그램을 작성하시오.

입력
첫 번째 줄에 수빈이가 있는 위치 N과 동생이 있는 위치 K가 주어진다. N과 K는 정수이다.

출력
수빈이가 동생을 찾는 가장 빠른 시간을 출력한다.
*/

int main()
{
    int seeker;
    int hider;
    cin >> seeker >> hider;

    vector<int> time(100001, -1); // 각 위치까지 도달하는데 걸리는 시간을 저장하는 배열, 초기값은 -1로 설정
    queue<int> que; // 탐색에 사용할 큐를 선언

    que.push(seeker); // 수빈이의 초기 위치를 큐에 추가
    time[seeker] = 0; // 시작 위치의 시간은 0

    while (!que.empty())
    {
        int current = que.front(); // 큐의 가장 앞에 있는 위치를 선택
        que.pop(); // 해당 위치를 큐에서 제거

        if (current == hider)
        {
            cout << time[current] << endl; // 동생을 찾은 경우, 해당 위치에 도달하는데 걸린 시간을 출력하고 종료
            break;
        }

        if (current - 1 >= 0 && time[current - 1] == -1)
        {
            que.push(current - 1); // X-1 위치를 큐에 추가하여 탐색 계속
            time[current - 1] = time[current] + 1; // X-1 위치에 도달하는데 걸린 시간 업데이트
        }

        if (current + 1 < 100001 && time[current + 1] == -1)
        {
            que.push(current + 1); // X+1 위치를 큐에 추가하여 탐색 계속
            time[current + 1] = time[current] + 1; // X+1 위치에 도달하는데 걸린 시간 업데이트
        }

        if (current * 2 < 100001 && time[current * 2] == -1)
        {
            que.push(current * 2); // 2*X 위치를 큐에 추가하여 탐색 계속
            time[current * 2] = time[current] + 1; // 2*X 위치에 도달하는데 걸린 시간 업데이트
        }
    }

    return 0;
}