#include <iostream>
#include <vector>
#include <queue>
#include <map>
#include <cmath>
#include <string>
using namespace std;

bool isNotPrime[10001];

void checkPrime() {
    for (int i = 2; i < 10000; i++) 
    {
        if (!isNotPrime[i]) {
            for (int j = i * i; j < 10000; j += i) 
            {
                isNotPrime[j] = true;  // j는 i의 배수이므로 소수가 아님을 표시
            }
        }
    }
}

string bfs(int src, int answer) {
    queue<int> q;  // BFS를 위한 큐
    map<int, int> mp;  // 이미 방문한 숫자와 해당 숫자까지의 최단 이동 횟수를 저장하는 맵

    mp[src] = 0;  // 시작 숫자의 최단 이동 횟수는 0
    q.push(src);  // 시작 숫자를 큐에 넣음

    while (!q.empty()) {
        int pos = q.front();  // 큐에서 숫자를 하나 꺼냄
        int move = mp[pos];  // 해당 숫자까지의 최단 이동 횟수
        q.pop();  // 꺼낸 숫자를 큐에서 제거

        if (pos == answer) {
            return to_string(move);  // 목표 숫자에 도달하면 최단 이동 횟수를 문자열로 변환하여 반환
        }

        int pNum[4] = { pos / 1000, (pos / 100) % 10, (pos / 10) % 10, pos % 10 };  // 각 자릿수별로 분리된 숫자 배열
        for (int i = 0; i < 4; i++) 
        {
            for (int j = 0; j < 10; j++)
            {
                if (i == 0 && j == 0)
                    continue;  // 첫 자릿수가 0이면 유효하지 않음

                int tmp = pNum[i];
                pNum[i] = j;  // i번째 자릿수를 j로 변경
                int next = 0;
                for (int k = 0; k < 4; k++) 
                {
                    next += pNum[k] * pow(10, 3 - k);  // 변경된 자릿수 배열을 숫자로 조합
                }
                pNum[i] = tmp;  // 다음 반복을 위해 원래 값으로 복원

                if (isNotPrime[next]) 
                    continue;  // 만들어진 숫자가 소수가 아니면 스킵

                if (mp.find(next) == mp.end()) 
                {
                    q.push(next);  // 큐에 새로운 숫자를 추가하여 BFS 진행
                    mp[next] = move + 1;  // 새로운 숫자까지의 최단 이동 횟수를 업데이트
                }
            }
        }
    }

    return "Impossible";  // 목표 숫자에 도달하지 못하면 "Impossible" 반환
}

int main() 
{
    int t;
    cin >> t;

    checkPrime();  // 소수 여부를 체크하는 함수 호출

    while (t--) 
    {
        int src, answer;
        cin >> src >> answer;  // 시작 숫자와 목표 숫자 입력
        cout << bfs(src, answer) << endl;  // 결과 출력
    }

    return 0;
}