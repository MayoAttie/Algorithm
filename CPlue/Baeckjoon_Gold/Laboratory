#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

vector<vector<int>> graph; // 초기 맵 정보
vector<vector<int>> tempGraph; // 바이러스 퍼뜨린 후의 맵 정보
vector<pair<int, int>> virus; // 초기 바이러스 위치 저장

int maxSafePos = 0;

void spreadVirus();
int CountSafeZone();
void buildWall(int count);

int col,row;

int drX[4] = {1, 0, -1, 0};
int drY[4] = {0, 1, 0, -1};

int main()
{
    
    cin >> col >> row;

    graph = vector<vector<int>>(col, vector<int>(row, 0));

    for (int i = 0; i < col; i++)
    {
        for (int j = 0; j < row; j++)
        {
            cin >> graph[i][j];
            if (graph[i][j] == 2)
                virus.push_back(make_pair(i, j));
        }
    }

    buildWall(0);

    cout << maxSafePos << endl;

    return 0;
}

// 바이러스 퍼뜨리는 함수
void spreadVirus()
{
    tempGraph = graph;
    queue<pair<int,int>> que;

    for(auto& i : virus)
        que.push(i);

    while(!que.empty())
    {
        pair<int,int> current = que.front();
        que.pop();

        for(int i=0; i<4; i++)
        {
            int nY = current.first + drY[i];
            int nX = current.second + drX[i];

            // 범위 검사 및 빈 칸인지 확인
            if(nY >= 0 && nY < col && nX >= 0 && nX < row && tempGraph[nY][nX] == 0)
            {
                tempGraph[nY][nX] = 2;
                que.push(make_pair(nY,nX));
            }
        }
    }
}

// 안전 영역 개수 계산 함수
int CountSafeZone()
{
    int safePos = 0;
    for(int i=0; i<col; i++)
    {
        for(int j=0; j<row; j++)
        {
            if(tempGraph[i][j] == 0)
                safePos++;
        }
    }
    return safePos;
}
// 벽을 세우는 함수 (조합을 이용하여 벽을 3개 세우는 모든 경우를 고려)
void buildWall(int count)
{
    if(count == 3)
    {
        spreadVirus();
        maxSafePos = max(maxSafePos, CountSafeZone());
        return;
    }

    for(size_t i=0; i<col; i++)
    {
        for(size_t j=0; j<row; j++)
        {
            if(graph[i][j] == 0)
            {
                graph[i][j] = 1; // 벽을 세움
                buildWall(count + 1); // 재귀적으로 다음 벽 세우기
                graph[i][j] = 0; // 벽 제거 (백트래킹)
            }
        }
    }
}



/*

입력
첫째 줄에 지도의 세로 크기 N과 가로 크기 M이 주어진다. (3 ≤ N, M ≤ 8)

둘째 줄부터 N개의 줄에 지도의 모양이 주어진다. 0은 빈 칸, 1은 벽, 2는 바이러스가 있는 위치이다.
2의 개수는 2보다 크거나 같고, 10보다 작거나 같은 자연수이다.

빈 칸의 개수는 3개 이상이다.

출력
첫째 줄에 얻을 수 있는 안전 영역의 최대 크기를 출력한다.



문제
인체에 치명적인 바이러스를 연구하던 연구소에서 바이러스가 유출되었다. 
다행히 바이러스는 아직 퍼지지 않았고, 바이러스의 확산을 막기 위해서 연구소에 벽을 세우려고 한다.

연구소는 크기가 N×M인 직사각형으로 나타낼 수 있으며, 직사각형은 1×1 크기의 정사각형으로 나누어져 있다. 
연구소는 빈 칸, 벽으로 이루어져 있으며, 벽은 칸 하나를 가득 차지한다. 

일부 칸은 바이러스가 존재하며, 이 바이러스는 상하좌우로 인접한 빈 칸으로 모두 퍼져나갈 수 있다. 
새로 세울 수 있는 벽의 개수는 3개이며, 꼭 3개를 세워야 한다.

예를 들어, 아래와 같이 연구소가 생긴 경우를 살펴보자.

2 0 0 0 1 1 0
0 0 1 0 1 2 0
0 1 1 0 1 0 0
0 1 0 0 0 0 0
0 0 0 0 0 1 1
0 1 0 0 0 0 0
0 1 0 0 0 0 0
이때, 0은 빈 칸, 1은 벽, 2는 바이러스가 있는 곳이다. 아무런 벽을 세우지 않는다면, 바이러스는 모든 빈 칸으로 퍼져나갈 수 있다.

2행 1열, 1행 2열, 4행 6열에 벽을 세운다면 지도의 모양은 아래와 같아지게 된다.

2 1 0 0 1 1 0
1 0 1 0 1 2 0
0 1 1 0 1 0 0
0 1 0 0 0 1 0
0 0 0 0 0 1 1
0 1 0 0 0 0 0
0 1 0 0 0 0 0
바이러스가 퍼진 뒤의 모습은 아래와 같아진다.

2 1 0 0 1 1 2
1 0 1 0 1 2 2
0 1 1 0 1 2 2
0 1 0 0 0 1 2
0 0 0 0 0 1 1
0 1 0 0 0 0 0
0 1 0 0 0 0 0
벽을 3개 세운 뒤, 바이러스가 퍼질 수 없는 곳을 안전 영역이라고 한다. 위의 지도에서 안전 영역의 크기는 27이다.

연구소의 지도가 주어졌을 때 얻을 수 있는 안전 영역 크기의 최댓값을 구하는 프로그램을 작성하시오.


*/