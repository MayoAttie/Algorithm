#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int MAX = 987654321;

vector<int> items;              // 각 노드의 아이템 값 저장
vector<vector<int>> graph;      // 그래프의 연결 정보와 거리 저장

int main()
{
    ios::sync_with_stdio(false); // 입출력 속도 향상을 위한 설정
    cin.tie(NULL);               // 입력과 출력을 동기화하여 속도 향상
    cout.tie(NULL);

    int nodes, range, roads;
    int result = 0;              // 최종 결과값 초기화
    cin >> nodes >> range >> roads;

    items = vector<int>(nodes + 1);               // 노드의 아이템 값들 저장할 벡터
    graph = vector<vector<int>>(nodes + 1, vector<int>(nodes + 1)); // 그래프 초기화

    for (int i = 1; i <= nodes; i++)
    {
        for (int j = 1; j <= nodes; j++)
        {
            if (i != j)
                graph[i][j] = MAX; // 그래프의 초기 거리를 MAX 값으로 설정
        }
    }

    for (int i = 1; i <= nodes; i++)
    {
        cin >> items[i]; // 각 노드의 아이템 값 입력
    }

    for (int i = 0; i < roads; i++)
    {
        int a, b, c;
        cin >> a >> b >> c;
        graph[a][b] = c;   // 그래프의 간선 정보와 거리 입력
        graph[b][a] = c;   // 양방향 간선이므로 양쪽에 거리 설정
    }

    for (int i = 1; i <= nodes; i++)
    {
        for (int j = 1; j <= nodes; j++)
        {
            for (int k = 1; k <= nodes; k++)
            {
                if (graph[j][k] > graph[j][i] + graph[i][k])
                {
                    graph[j][k] = graph[j][i] + graph[i][k]; // 플로이드-와샬 알고리즘 적용
                }
            }
        }
    }

    for (int i = 1; i <= nodes; i++)
    {
        int tmp = 0; // 현재 노드에서 수집할 아이템 값의 임시 저장소
        for (int j = 1; j <= nodes; j++)
        {
            if (graph[i][j] <= range)
                tmp += items[j]; // 범위 내의 노드의 아이템 값을 누적
        }
        result = max(result, tmp); // 최댓값 갱신
    }

    cout << result; // 결과 출력
}

// 플로이드-와샬 알고리즘