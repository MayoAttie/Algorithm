#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Edge 
{
    int start;
    int end;
    int weight;

    Edge(int _start, int _end, int _weight) : start(_start), end(_end), weight(_weight) {}

    // 정렬을 위한 연산자 오버로딩
    bool operator<(const Edge &other) const 
    {
        return weight < other.weight;
    }
};

vector<int> parent;  // 각 정점의 부모를 저장할 배열
vector<Edge> edgeList;  // 간선들의 리스트

// 각 정점의 최상위 부모를 찾는 함수 (Union-Find 연산)
int find(int x) 
{
    if (x == parent[x]) 
    {
        return x;
    }
    // 경로 압축을 위해 부모를 최상위 부모로 갱신
    return parent[x] = find(parent[x]);
}

// 두 집합을 합치는 함수 (Union-Find 연산)
void unionSets(int x, int y) 
{
    x = find(x);
    y = find(y);
    if (x != y) {
        parent[y] = x;
    }
}

int main() 
{
    int N, M;
    cin >> N >> M;

    edgeList.reserve(M);  // 메모리 할당 미리 수행
    for (int i = 0; i < M; i++) 
    {
        int start, end, weight;
        cin >> start >> end >> weight;
        edgeList.emplace_back(start, end, weight);  // 간선 정보를 리스트에 저장
    }

    sort(edgeList.begin(), edgeList.end());  // 간선 리스트 정렬

    parent.resize(N + 1);  // 부모 배열 크기 조정
    for (int i = 1; i <= N; i++) 
    {
        parent[i] = i;  // 각 정점의 초기 부모를 자기 자신으로 설정
    }

    int ans = 0;
    int bigCost = 0;
    for (const Edge &edge : edgeList) 
    {
        if (find(edge.start) != find(edge.end)) 
        {
            ans += edge.weight;  // 최소 스패닝 트리의 비용 계산
            unionSets(edge.start, edge.end);  // 두 집합을 합치기
            bigCost = edge.weight;  // 마지막으로 선택된 간선의 가중치 저장
        }
    }

    // 마지막으로 선택된 간선의 가중치를 뺀 최소 스패닝 트리 비용 출력
    cout << ans - bigCost << endl;

    return 0;
}