#include <iostream>
#include <vector>
using namespace std;

int N, M;
int cnt = 0;
vector<bool> visited;

void DFS(vector<vector<int>>& graph, int v);

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> N >> M;
    vector<vector<int>> small(N + 1);
    vector<vector<int>> tall(N + 1);

    for (int i = 0; i < M; i++)
    {
        int a, b;
        cin >> a >> b;
        tall[a].push_back(b);
        small[b].push_back(a);
    }

    int answer = 0;
    for (int i = 1; i <= N; i++)
    {
        visited = vector<bool>(N + 1);
        DFS(tall, i);
        visited = vector<bool>(N + 1);
        DFS(small, i);

        if (cnt == N - 1)
            answer++;
        cnt = 0;
    }

    cout << answer;
}

void DFS(vector<vector<int>>& graph, int v)
{
    visited[v] = true;

    for (int i = 0; i < graph[v].size(); i++)
    {
        int next = graph[v][i];

        if (visited[next])
            continue;
        cnt++;
        DFS(graph, next);
    }
}