#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<vector<pair<int, int>>> graph;
vector<bool> visited;
void BFS(int start, int end);

int main()
{
    int N, M;
    cin >> N >> M;
    graph = vector<vector<pair<int, int>>>(N + 1);

    for (int i = 0; i < N - 1; i++)
    {
        int s, e, d;
        cin >> s >> e >> d;
        graph[s].push_back(make_pair(e, d));
        graph[e].push_back(make_pair(s, d));
    }

    for (int i = 0; i < M; i++)
    {
        visited = vector<bool>(N + 1, false);
        int s, e;
        cin >> s >> e;
        BFS(s, e);
    }
}

void BFS(int start, int end)
{
    queue<pair<int, int>> que;
    que.push({ start, 0 });
    visited[start] = true;

    while (!que.empty())
    {
        int curPos = que.front().first;
        int curDis = que.front().second;
        que.pop();

        if (curPos == end)
        {
            cout << curDis << "\n";
            return;
        }

        for (auto i : graph[curPos])
        {
            if (!visited[i.first])
            {
                que.push({ i.first, curDis + i.second });
                visited[i.first] = true;
            }
        }
    }
}