#include <iostream>
#include <vector>

using namespace std;

// 합집합 연산 수행
void unionFunc(vector<int>& unionGraph, int a, int b);

// 루트 노드 찾기
int find(vector<int>& unionGraph, int num);

// 두 노드가 같은 집합에 속해있는지 확인
bool checkSame(vector<int>& unionGraph, int a, int b);

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    int node;
    int edge;
    vector<int> unionGraph;
    
    // 노드 개수와 간선 개수 입력
    cin >> node >> edge;
    unionGraph.resize(node + 1);
    
    // 초기에는 각 노드가 자신을 가리키도록 설정
    for (int i = 1; i <= node; i++)
    {
        unionGraph[i] = i;
    }
    
    // 간선 정보 입력 및 연산 수행
    for (int i = 0; i < edge; i++)
    {
        int index;
        int a, b;
        cin >> index >> a >> b;
        if (index == 0)
        {
            // 합집합 연산 수행
            unionFunc(unionGraph, a, b);
        }
        else
        {
            // 같은 집합에 속해있는지 확인하여 출력
            if (checkSame(unionGraph, a, b))
                cout << "YES" << "\n";
            else
                cout << "NO" << "\n";
        }
    }
}

// 합집합 연산 수행
void unionFunc(vector<int>& unionGraph, int a, int b)
{
    // 각각의 루트 노드를 찾음
    a = find(unionGraph, a);
    b = find(unionGraph, b);
    
    // 루트 노드가 다르면 하나의 집합으로 합침
    if (a != b)
    {
        unionGraph[b] = a;
    }
}

// 루트 노드 찾기 (경로 압축 기법 사용)
int find(vector<int>& unionGraph, int num)
{
    // 루트 노드인 경우 자기 자신 반환
    if (num == unionGraph[num])
        return num;
    else
        // 재귀적으로 루트 노드를 찾고 경로 압축
        return unionGraph[num] = find(unionGraph, unionGraph[num]);
}

// 두 노드가 같은 집합에 속해있는지 확인
bool checkSame(vector<int>& unionGraph, int a, int b)
{
    // 각각의 루트 노드를 찾음
    a = find(unionGraph, a);
    b = find(unionGraph, b);
    
    // 루트 노드가 같으면 같은 집합에 속해있음
    if (a == b)
        return true;
    else
        return false;
}