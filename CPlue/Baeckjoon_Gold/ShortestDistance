#include <iostream>
#include <vector>
#include <queue>
#include <limits.h>
using namespace std;
typedef pair<int, int> edge;

int main()
{
    ios::sync_with_stdio(false);  // 입출력 속도를 빠르게 설정합니다.
    cin.tie(NULL);
    cout.tie(NULL);
    
    int nodes;  // 노드 개수
    int edges;  // 간선 개수
    int starting;  // 시작 노드
    vector<vector<edge>> graph;  // 그래프 정보를 저장할 2차원 벡터
    vector<int> distance;  // 시작 노드로부터의 최단 거리를 저장할 벡터
    vector<bool> visited;  // 방문 여부를 저장할 벡터
    priority_queue<edge, vector<edge>, greater<edge>> priQue;  // 우선순위 큐
    
    cin >> nodes >> edges >> starting;  // 노드 개수, 간선 개수, 시작 노드를 입력받습니다.
    
    distance.resize(nodes+1);  // 시작 노드로부터의 최단 거리를 저장할 벡터 크기를 설정합니다.
    fill(distance.begin(), distance.end(), INT_MAX);  // 최단 거리를 무한대로 초기화합니다.
    
    visited.resize(nodes+1);  // 방문 여부를 저장할 벡터 크기를 설정합니다.
    fill(visited.begin(), visited.end(), false);  // 방문 여부를 모두 false로 초기화합니다.
    
    graph.resize(nodes+1);  // 그래프 벡터 크기를 설정합니다.
    
    // 간선 정보를 입력받아 그래프에 저장합니다.
    for(int i=0; i<edges; i++)
    {
        int my;
        int target;
        int data;
        cin >> my >> target >> data;
        
        graph[my].push_back(make_pair(target, data));  // my에서 target으로 가는 가중치가 data인 간선을 추가합니다.
    }
    
    priQue.push(make_pair(0, starting));  // 시작 노드를 우선순위 큐에 추가합니다. 시작 노드로 가는 거리는 0입니다.
    distance[starting] = 0;  // 시작 노드로 가는 거리를 0으로 설정합니다.
    
    while(!priQue.empty())
    {
        edge current = priQue.top();  // 우선순위 큐에서 가장 작은 가중치를 가진 간선을 가져옵니다.
        priQue.pop();  // 가져온 간선은 큐에서 제거합니다.
        int curTarget = current.second;  // 간선의 도착 노드를 가져옵니다.
        
        if(visited[curTarget])  // 이미 방문한 노드라면 건너뜁니다.
            continue;
        
        visited[curTarget] = true;  // 현재 노드를 방문했음을 표시합니다.
        
        // 현재 노드와 연결된 모든 간선에 대해 최단 거리를 갱신합니다.
        for(int i=0; i<graph[curTarget].size(); i++)
        {
            edge tmp = graph[curTarget][i];  // 현재 노드와 연결된 간선 정보를 가져옵니다.
            int next = tmp.first;  // 간선의 도착 노드를 가져옵니다.
            int value = tmp.second;  // 간선의 가중치를 가져옵니다.
            
            // 시작 노드로부터 도착 노드까지의 거리가 현재까지 계산된 최단 거리보다 작다면 최단 거리를 갱신하고 우선순위 큐에 추가합니다.
            if(distance[next] > distance[curTarget] + value)
            {
                distance[next] = distance[curTarget] + value;
                priQue.push(make_pair(distance[next], next));
            }
        }
    }
    
    // 모든 노드에 대해 최단 거리를 출력합니다.
    for(int i=1; i<= nodes; i++)
    {
        if(visited[i])  // 방문한 노드라면 최단 거리를 출력합니다.
            cout << distance[i] << "\n";
        else  // 방문하지 않은 노드라면 도달할 수 없는 노드이므로 "INF"를 출력합니다.
            cout << "INF" << "\n";
    }
}