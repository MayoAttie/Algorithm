#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<vector<int>> graph;  // 그래프의 인접 리스트 표현
vector<int> colors;          // 각 정점의 색 정보를 저장하는 배열

// DFS를 이용하여 이분 그래프 여부를 판별하는 함수
bool isBipartite(int start) 
{
    queue<int> q;
    q.push(start);
    colors[start] = 1;  // 시작 정점을 첫 번째 그룹으로 칠함

    while (!q.empty()) 
    {
        int current = q.front();
        q.pop();

        for (int neighbor : graph[current]) 
        {
            if (colors[neighbor] == 0) 
            {
                colors[neighbor] = -colors[current];  // 인접한 그룹으로 칠함
                q.push(neighbor);
            } else if (colors[neighbor] == colors[current]) 
                return false;  // 인접한 정점이 같은 색으로 칠해져 있는 경우 이분 그래프가 아님
            
        }
    }

    return true;
}

int main() 
{
    int K;
    cin >> K;

    while (K--) 
    {
        int V, E;
        cin >> V >> E;

        graph.clear();
        graph.resize(V + 1);      // 정점 번호는 1부터 V까지
        colors.assign(V + 1, 0);  // 색 배열 초기화

        for (int i = 0; i < E; i++) 
        {
            int u, v;
            cin >> u >> v;
            graph[u].push_back(v);  // 양방향 간선 정보 추가
            graph[v].push_back(u);
        }

        bool isBipartiteGraph = true;
        for (int i = 1; i <= V; i++) 
        {
            if (colors[i] == 0) 
            {
                if (!isBipartite(i)) 
                {
                    isBipartiteGraph = false;
                    break;
                }
            }
        }

        if (isBipartiteGraph)
        {
            cout << "YES" << endl;
        } else {
            cout << "NO" << endl;
        }
    }

    return 0;
}