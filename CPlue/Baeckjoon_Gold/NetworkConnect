#include <iostream>
#include <vector>
#include <queue>
using namespace std;

const int INF = 10001; // 무한대 값으로 초기화

struct Edge 
{
    int to;
    int cost;
    Edge(int _to, int _cost) : to(_to), cost(_cost) {}
};

int main() 
{
    int N, M;
    cin >> N >> M;

    vector<vector<Edge>> graph(N + 1);    // 노드 간의 간선 정보를 저장하는 그래프
    vector<int> minCost(N + 1, INF);       // 시작 노드로부터의 최소 비용을 저장하는 배열
    vector<bool> visited(N + 1, false);    // 방문 여부를 저장하는 배열

    for (int i = 0; i < M; ++i) 
    {
        int a, b, c;
        cin >> a >> b >> c;
        graph[a].emplace_back(b, c);       // 양방향 그래프로 저장
        graph[b].emplace_back(a, c);
    }

    // 시작 노드를 1로 설정
    int startNode = 1;
    minCost[startNode] = 0;

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push(make_pair(0, startNode));     // 시작 노드와 비용을 우선순위 큐에 삽입

    int totalCost = 0;  // 최종적으로 모든 노드를 연결하는데 드는 총 비용

    while (!pq.empty()) 
    {
        int cost = pq.top().first;   // 현재까지의 최소 비용
        int node = pq.top().second;  // 현재 노드
        pq.pop();

        if (visited[node])  // 이미 방문한 노드라면 스킵
            continue;

        visited[node] = true;   // 현재 노드 방문 표시
        totalCost += cost;      // 총 비용에 현재 비용 더함

        for (const Edge& edge : graph[node]) 
        {
            int nextNode = edge.to;    // 다음 노드
            int edgeCost = edge.cost;  // 현재 노드에서 다음 노드로 가는 비용

            if (!visited[nextNode] && edgeCost < minCost[nextNode]) 
            {
                minCost[nextNode] = edgeCost;       // 다음 노드의 최소 비용 갱신
                pq.push(make_pair(edgeCost, nextNode));   // 다음 노드와 비용을 우선순위 큐에 삽입
            }
        }
    }

    cout << totalCost << endl;   // 모든 노드를 연결하는데 드는 최소 비용 출력

    return 0;
}