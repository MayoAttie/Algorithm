#include <iostream>
#include <vector>
#include <deque>
#include <numeric>

using namespace std;

int solution(vector<int>& queue1, vector<int>& queue2) {
    long long answer = 0;

    deque<int> q1(queue1.begin(), queue1.end());
    deque<int> q2(queue2.begin(), queue2.end());

    long long sum1 = accumulate(queue1.begin(), queue1.end(), 0);
    long long sum2 = accumulate(queue2.begin(), queue2.end(), 0);

    // 큐의 총 합이 홀수인 경우, 반으로 나눠질 수 없으므로 -1 반환
    if ((sum1 + sum2) % 2 != 0) 
        return -1;

    while (true)
     {
        // 반복 횟수가 큐의 길이의 4배와 같아지면 나누기 불가능한 경우이므로 -1 반환
        if (answer == 4 * queue1.size()) 
            return -1;

        // 큐1의 합이 큐2의 합보다 큰 경우
        if (sum1 > sum2) {
            int value = q1.front();  // 큐1에서 원소 추출
            q1.pop_front();
            q2.push_back(value);  // 큐2에 원소 추가
            sum1 -= value;  // 큐1의 합에서 추출한 원소 감소
            sum2 += value;  // 큐2의 합에 원소 추가
        }
        // 큐2의 합이 큐1의 합보다 큰 경우
        else if (sum1 < sum2) 
        {
            int value = q2.front();  // 큐2에서 원소 추출
            q2.pop_front();
            q1.push_back(value);  // 큐1에 원소 추가
            sum1 += value;  // 큐1의 합에 원소 추가
            sum2 -= value;  // 큐2의 합에서 추출한 원소 감소
        }
        // 큐1과 큐2의 합이 같은 경우
        else 
            return answer;  // 작업 횟수 반환

        answer++;  // 작업 횟수 증가
    }
}

int main() 
{
    vector<int> queue1 = {3, 2, 7, 2};
    vector<int> queue2 = {4, 6, 5, 1};

    int result = solution(queue1, queue2);

    cout << "Minimum operations: " << result << endl;

    return 0;
}