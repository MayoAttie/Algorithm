#include <string>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

// 깊이 우선 탐색 (DFS) 함수
void dfs(vector<vector<int>>& graph, vector<bool>& visited, int node, int& cnt) 
{
    visited[node] = true;  // 현재 노드를 방문했음을 표시
    for (int next : graph[node]) 
    {
        // 방문하지 않은 인접 노드일 경우
        if (!visited[next]) 
        {  
            cnt++;  // 그룹 크기 증가
            dfs(graph, visited, next, cnt);  // 재귀적으로 인접 노드 탐색
        }
    }
}

int solution(vector<int> cards) {
    int answer = 0;
    int n = cards.size();
    vector<bool> visited(n + 1, false);  // 노드 방문 여부를 저장하는 배열
    vector<int> groupSizes;  // 그룹 크기를 저장하는 배열
    vector<vector<int>> graph(n + 1);  // 그래프 구조를 저장하는 2차원 배열

    // 그래프 생성
    for (int i = 0; i < n; i++) 
    {
        graph[i + 1].push_back(cards[i]);
    }

    // 그래프 탐색
    for (int i = 1; i <= n; i++) 
    {
        if (!visited[i]) 
        {
            int cnt = 1;  // 그룹 크기 초기값 설정
            dfs(graph, visited, i, cnt);  // DFS 탐색
            groupSizes.push_back(cnt);  // 그룹 크기 저장
        }
    }

    sort(groupSizes.rbegin(), groupSizes.rend());  // 그룹 크기를 내림차순으로 정렬

    if (groupSizes.size() >= 2) 
        answer = groupSizes[0] * groupSizes[1];  // 최고 점수 계산

    return answer;
}