#include <iostream>
#include <vector>
#include <unordered_map>

using namespace std;


/*
* N : 유저의 수, M : 로그파일의 수
* record : <t, i, s> == t:레이스 시간 /  i:유저번호  /  s: 레이스 출발/도착(0-출발, 1-도착)
*/
bool solution(int N,int M,vector<vector<int>> record)
{
	unordered_map<int, vector<int>> map_Checker;

	for (int i = 0; i < M; i++) {
		int raceTime = record[i][0];
		int userId = record[i][1];
		int startFinish = record[i][2];

		// 유저 번호 유효성 검사
		if (userId < 1 || userId > N) 
			return false;

		// 시작과 종료의 짝 맞추기
		if (startFinish == 0) 
		{  
			// 시작
			if (map_Checker[userId].size() > 0 && map_Checker[userId].back() == 0)
				return false;
		}
		else if (startFinish == 1)
		{  
			// 종료
			if (map_Checker[userId].empty() || map_Checker[userId].back() == 1)
				return false;
		}

		// 유저번호를 킷값으로 하여 레이스 시간과 출발/도착 정보 저장
		map_Checker[userId].push_back(raceTime);
		map_Checker[userId].push_back(startFinish);
	}

	// 무결성 검사: 최소 레이스 시간 검사
	for (const auto& entry : map_Checker) {
		int userId = entry.first;
		const std::vector<int>& raceInfo = entry.second;

		// 시작과 종료가 짝을 이루지 못한 경우
		if (raceInfo.size() < 4) 
			return false;

		int startTime = raceInfo[0];
		int finishTime = raceInfo[raceInfo.size() - 2];

		// 최소 레이스 시간 검사
		if (finishTime - startTime < 60)
			return false;
	}

	return true; // 무결성 검사 결과 반환
}


void printBool(bool income)
{
	income == true ? cout << "YES" : cout << "NO";
}

int main()
{
	vector<vector<int>> record_1 =
	{
		{100, 1, 0},
		{200, 3, 0},
		{300, 2, 0},
		{400, 1, 1},
		{500, 2, 1},
		{600, 3, 1}
	};
	vector<vector<int>> record_2 =
	{
		{7624, 1, 0},
		{7700, 1, 1},
		{7791, 1, 1},
	};
	vector<vector<int>> record_3 =
	{
		{1023, 1, 0},
		{1102, 1, 0},
		{1296, 1, 1}
	};
	vector<vector<int>> record_4 =
	{
		{10, 1, 0},
		{47, 1, 1}
	};
	vector<vector<int>> record_5 =
	{
		{37,1,0}
	};

	cout << "record 1 == ";
	printBool(solution(3, 6, record_1));
	cout << endl;

	cout << "record 2 == ";
	printBool(solution(1, 3, record_2));
	cout << endl;

	cout << "record 3 == ";
	printBool(solution(1, 3, record_3));
	cout << endl;

	cout << "record 4 == ";
	printBool(solution(1, 2, record_4));
	cout << endl;

	cout << "record 5 == ";
	printBool(solution(1, 1, record_5));
	cout << endl;
}