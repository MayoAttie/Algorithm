#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

bool compareFirst(const pair<int, int>& a, const pair<int, int>& b) 
{
    return a.first < b.first;
}

bool compareSecond(const pair<int, int>& a, const pair<int, int>& b) 
{
    return a.second < b.second;
}

int main() 
{
    int length;
    cin >> length;
    string cmd;
    cin >> cmd;

    int dx[4] = { 0, 1, 0, -1 };
    int dy[4] = { 1, 0, -1, 0 };

    int x = 0;
    int y = 0;
    int dir = 1;

    vector<pair<int, int>> maze = { {x, y} };

    for (char i : cmd)
    {
        if (i == 'R')
            dir = (dir + 1) % 4;
        else if (i == 'L')
            dir = (dir + 3) % 4;
        else if (i == 'F') 
        {
            x = x + dx[dir];
            y = y + dy[dir];
            maze.push_back({ x, y });
        }
    }

    int n = max_element(maze.begin(), maze.end(), compareFirst)->first - min_element(maze.begin(), maze.end(), compareFirst)->first + 1;
    int m = max_element(maze.begin(), maze.end(), compareSecond)->second - min_element(maze.begin(), maze.end(), compareSecond)->second + 1;

    int min_x = min_element(maze.begin(), maze.end(), compareFirst)->first;
    int min_y = min_element(maze.begin(), maze.end(), compareSecond)->second;

    for (auto& i : maze) 
    {
        i.first += abs(min_x);
        i.second += abs(min_y);
    }

    vector<vector<char>> map(n, vector<char>(m, '#'));

    for (auto& i : maze)
        map[i.first][i.second] = '.';

    for (auto& i : map) 
    {
        for (char j : i)
            cout << j;
        cout << '\n';
    }

    return 0;
}