#include <iostream>
#include <string>
#include <vector>
#include <unordered_map>
#include <bitset>
#include <algorithm>
#include <climits>

using namespace std;
int n, m, k;
vector<vector<int>> quests; 
vector<bool> visited;
int answer = 0;

void backtracking(int depth, int idx)
{
    if (depth == n)
    {
        int cnt = 0;

        for (int i = 0; i < m; i++)
        {
            bool isPossible = true;
            for (int j = 0; j < k; j++)
            {
                if (!visited[quests[i][j]])
                {
                    isPossible = false;
                    break;
                }
            }
            if (isPossible)
                cnt++;
        }

        answer = max(answer, cnt);
        return;
    }

    for (int i = idx; i <= n * 2; i++)
    {
        if (!visited[i])
        {
            visited[i] = true;
            backtracking(depth + 1, i + 1);
            visited[i] = false;
        }
    }
}


int main()
{
    cin >> n >> m >> k;

    quests.resize(m, vector<int>(k));
    visited.resize(n * 2+1, false);
    for (int i = 0; i < m; i++)
    {
        for (int j = 0; j < k; j++)
        {
            cin >> quests[i][j];
        }
    }
    backtracking(0, 1);

    cout << answer;
    

    return 0;
}