#include <iostream>
#include <vector>
#include <queue>

using namespace std;

vector<vector<int>> graph;
vector<bool> visited;

int BFS(int start, int end);

int main()
{
    int a, b;
    int N, M;
    cin >> a >> b >> N >> M;

    graph = vector<vector<int>>(N+1);
    visited = vector<bool>(N+1);

    for(int i=0; i<M; i++)
    {
        int my, you;
        cin >> my >> you;
        
        graph[my].push_back(you);
        graph[you].push_back(my);
    }

    int answer = BFS(a, b);
    cout << answer;

}

int BFS(int start, int end)
{
    int cnt = 0;
    queue<int> que;
    que.push(start);
    visited[start] = true;

    while(!que.empty())
    {
        int size = que.size();
        for(int i = 0; i < size; i++)
        {
            int current = que.front();
            que.pop();

            if(current == end)
                return cnt;

            for(int next : graph[current])
            {
                if(!visited[next])
                {
                    visited[next] = true;
                    que.push(next);
                }
            }
        }
        cnt++;
    }

    return -1;
}