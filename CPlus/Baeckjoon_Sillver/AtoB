#include <iostream>
#include <queue>
#include <unordered_set>
using namespace std;


/*
문제
정수 A를 B로 바꾸려고 한다. 가능한 연산은 다음과 같은 두 가지이다.

2를 곱한다.
1을 수의 가장 오른쪽에 추가한다. 
A를 B로 바꾸는데 필요한 연산의 최솟값을 구해보자.

입력
첫째 줄에 A, B (1 ≤ A < B ≤ 109)가 주어진다.

출력
A를 B로 바꾸는데 필요한 연산의 최솟값에 1을 더한 값을 출력한다. 만들 수 없는 경우에는 -1을 출력한다.
*/

// BFS 함수 정의
int BFS(int A, int B);

int main()
{
    int A, B;
    cin >> A >> B;

    // BFS 함수 호출 및 결과 출력
    int answer = BFS(A, B);
    cout << answer << endl;

    return 0;
}

// BFS 함수 구현
int BFS(int A, int B)
{
    unordered_set<long> visited; // 방문한 수를 저장하는 집합
    queue<pair<long, int>> q; // 숫자와 연산 횟수를 함께 저장하는 큐
    q.push(make_pair(A, 0)); // 시작 숫자와 연산 횟수 0을 큐에 넣음

    while (!q.empty())
    {
        long current = q.front().first; // 현재 숫자
        int operations = q.front().second; // 현재까지의 연산 횟수
        q.pop(); // 큐에서 제거

        if (current == B)
            return operations + 1; // 목표 숫자에 도달했으면 필요한 연산 횟수에 1을 더한 값을 반환

        if (current * 2 <= B && visited.find(current * 2) == visited.end())
        {
            visited.insert(current * 2); // 방문 표시
            q.push(make_pair(current * 2, operations + 1)); // 큐에 새로운 숫자와 연산 횟수를 추가
        }

        if (current * 10 + 1 <= B && visited.find(current * 10 + 1) == visited.end())
        {
            visited.insert(current * 10 + 1); // 방문 표시
            q.push(make_pair(current * 10 + 1, operations + 1)); // 큐에 새로운 숫자와 연산 횟수를 추가
        }
    }

    return -1; // BFS 탐색을 마치고도 목표 숫자에 도달하지 못한 경우 -1을 반환
}