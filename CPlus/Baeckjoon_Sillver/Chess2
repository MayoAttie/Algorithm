#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;
using namespace std;

int n, m, a, b, c;
vector<vector<int>> board;
vector<pair<int, int>> queens;
vector<pair<int, int>> knights;

void MoveQueen(pair<int, int> pos) 
{
    int x = pos.first;
    int y = pos.second;

    int dx[8] = { 1, 0, -1, 0, 1, 1, -1, -1 };
    int dy[8] = { 0, 1, 0, -1, 1, -1, 1, -1 };

    for (int i = 0; i < 8; i++) 
    {
        int nx = x + dx[i];
        int ny = y + dy[i];

        while (nx >= 0 && nx < n && ny >= 0 && ny < m) 
        {
            if (board[nx][ny] == 1) 
                break; 
            board[nx][ny] = 2;
            nx += dx[i];
            ny += dy[i];
        }
    }
}

void MoveKnight(pair<int, int> pos) 
{
    int x = pos.first;
    int y = pos.second;

    int dx[8] = { -2, -1, 1, 2, 2, 1, -1, -2 };
    int dy[8] = { -1, -2, -2, -1, 1, 2, 2, 1 };

    for (int i = 0; i < 8; i++) 
    {
        int nx = x + dx[i];
        int ny = y + dy[i];
        if (nx >= 0 && nx < n && ny >= 0 && ny < m) 
        {
            if (board[nx][ny] != 1)
                board[nx][ny] = 2;
        }
    }
}

int main() 
{
    cin >> n >> m;
    board.resize(n, vector<int>(m, 0));
    cin >> a;
    if(a >0)
        queens.resize(a);
    for (int i = 0; i < a; i++) 
    {
        cin >> queens[i].first >> queens[i].second;
        queens[i].first--;
        queens[i].second--;
        board[queens[i].first][queens[i].second] = 1;
    }
    cin >> b;
    if (b > 0)
        knights.resize(b);
    for (int i = 0; i < b; i++) 
    {
        cin >> knights[i].first >> knights[i].second;
        knights[i].first--;
        knights[i].second--;
        board[knights[i].first][knights[i].second] = 1;
    }
    cin >> c;
    for (int i = 0; i < c; i++)
    {
        int x, y;
        cin >> x >> y;
        x--; y--;
        board[x][y] = 1;
    }
    

    for (int i = 0; i < a; i++) 
    {
        MoveQueen(queens[i]);
    }
    for (int i = 0; i < b; i++) 
    {
        MoveKnight(knights[i]);
    }

    int answer = 0;
    for (int i = 0; i < n; i++) 
    {
        for (int j = 0; j < m; j++) 
        {
            if (board[i][j] == 0)
                answer++;
        }
    }

    cout << answer;
}