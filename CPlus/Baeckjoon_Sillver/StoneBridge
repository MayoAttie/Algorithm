#include <iostream>
#include <vector>
#include <queue>

using namespace std;

const int MAX = 100001;

bool visited[MAX];

struct Jump
{
    int dist;
    int count;
};

int BFS(int A, int B, int start, int end);

int main()
{
    int equipA;
    int equipB;
    int start, end;
    cin >> equipA >> equipB >> start >> end;

    cout << BFS(equipA, equipB, start, end) << endl;



}

int BFS(int A, int B, int start, int end)
{
    queue<Jump> que;
    que.push({ start, 0 });
    visited[start] = true;

    while (!que.empty())
    {
        int current = que.front().dist;
        int count = que.front().count;

        que.pop();

        if (current == end)
            return count;

        if (current + 1 < MAX && !visited[current + 1])
        {
            visited[current + 1] = true;
            que.push({ current + 1, count + 1 });
        }

        if (current - 1 >= 0 && !visited[current - 1])
        {
            visited[current - 1] = true;
            que.push({ current - 1, count + 1 });
        }

        if (current + A < MAX && !visited[current + A])
        {
            visited[current + A] = true;
            que.push({ current + A, count + 1 });
        }

        if (current - A >= 0 && !visited[current - A])
        {
            visited[current - A] = true;
            que.push({ current - A, count + 1 });
        }

        if (current + B < MAX && !visited[current + B])
        {
            visited[current + B] = true;
            que.push({ current + B, count + 1 });
        }

        if (current - B >= 0 && !visited[current - B])
        {
            visited[current - B] = true;
            que.push({ current - B, count + 1 });
        }

        if (current * A < MAX && !visited[current * A])
        {
            visited[current * A] = true;
            que.push({ current * A, count + 1 });
        }

        if (current * B < MAX && !visited[current * B])
        {
            visited[current * B] = true;
            que.push({ current * B, count + 1 });
        }
    }

    return -1;

}