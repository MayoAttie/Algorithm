#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

vector<vector<int>> graph;  // 그래프의 인접 리스트를 저장하는 벡터
vector<int> visited;        // 각 노드의 깊이를 저장하는 배열
vector<int> order;          // 각 노드의 방문 순서를 저장하는 배열

void BFS(int start);

int main()
{
    int n, m, r;
    cin >> n >> m >> r; // 정점의 수, 간선의 수, 시작 정점 입력 받음

    graph.resize(n + 1); // 그래프의 크기를 정점의 수 + 1로 설정
    visited.resize(n + 1, -1); // 각 노드의 깊이 배열 초기화 (-1은 미방문을 의미)
    order.resize(n + 1, 0);    // 각 노드의 방문 순서 배열 초기화 (0은 시작 정점의 깊이)

    for (int i = 0; i < m; i++)
    {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v); // 양방향 간선 정보 입력
        graph[v].push_back(u); // 양방향 간선 정보 입력
    }
    for (int i = 1; i <= n; i++)
        sort(graph[i].begin(), graph[i].end()); // 각 노드의 인접 노드를 오름차순으로 정렬

    BFS(r); // BFS 함수 호출하여 깊이와 방문 순서 계산

    long long sum = 0; // 결과를 저장할 변수 선언
    for (int i = 1; i <= n; i++)
    {
        sum += (long long)order[i] * visited[i]; // 각 노드의 di * ti 값을 더하여 결과 계산
    }

    cout << sum << endl; // 결과 출력

    return 0;
}

void BFS(int start)
{
    int cnt = 1; // 방문 순서를 나타내는 변수 초기화
    queue<int> q; // 큐를 사용하여 BFS 탐색을 위한 자료구조 초기화
    q.push(start); // 시작 정점을 큐에 추가
    visited[start] = 0; // 시작 정점의 깊이를 0으로 설정
    order[start] = 0;   // 시작 정점의 방문 순서를 0으로 설정

    while (!q.empty()) // 큐가 비어있을 때까지 반복
    {
        int current = q.front(); // 현재 노드를 큐에서 꺼내옴
        q.pop();

        for (int i : graph[current]) // 현재 노드의 인접 노드들을 순회
        {
            if (visited[i] == -1) // 미방문 노드라면
            {
                visited[i] = visited[current] + 1; // 깊이를 증가시키고 저장
                order[i] = ++cnt; // 방문 순서 증가시키고 저장
                q.push(i); // 다음에 방문할 노드로 큐에 추가
            }
        }
    }
}