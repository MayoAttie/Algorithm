#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <string>
#include <set>
using namespace std;

int n, m, k;
vector<vector<int>> dp;

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    cin >> n >> m >> k;
    dp.resize(n, vector<int>(m, 0));

    for (int i = 0; i < n; i++)
        dp[i][0] = 1;
    for (int i = 0; i < m; i++)
        dp[0][i] = 1;

    for (int i = 1; i < n; i++)
    {
        for (int j = 1; j < m; j++)
        {
            dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
        }
    }

    if (k != 0)
    {
        int kx = (k - 1) / m;
        int ky = (k - 1) % m;

        int pathK = dp[kx][ky];

        dp.assign(n, vector<int>(m, 0));

        for (int i = kx; i < n; i++) 
            dp[i][ky] = 1;
        for (int j = ky; j < m; j++) 
            dp[kx][j] = 1;

        for (int i = kx+1; i < n; i++)
        {
            for (int j = ky+1; j < m; j++)
            {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }

        cout << pathK * dp[n - 1][m - 1];
    }
    else
        cout << dp[n - 1][m - 1];

    return 0;
}