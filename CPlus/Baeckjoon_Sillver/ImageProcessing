#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<vector<int>> table;
vector<vector<bool>> visited;
int N, M, T;
int dx[4] = { -1, 1, 0, 0 };
int dy[4] = { 0, 0, -1, 1 };

void BFS(int x, int y) 
{
    queue<pair<int, int>> que;
    que.push({ x, y });
    visited[x][y] = true;

    while (!que.empty()) 
    {
        int cx = que.front().first;
        int cy = que.front().second;
        que.pop();

        for (int i = 0; i < 4; i++) 
        {
            int nx = cx + dx[i];
            int ny = cy + dy[i];

            if (nx >= 0 && nx < N && ny >= 0 && ny < M) 
            {
                if (!visited[nx][ny] && table[nx][ny] >= T)
                {
                    visited[nx][ny] = true;
                    que.push({ nx, ny });
                }
            }
        }
    }
}

int main() 
{
    cin >> N >> M;

    table = vector<vector<int>>(N, vector<int>(M));
    visited = vector<vector<bool>>(N, vector<bool>(M, false));

    for (int i = 0; i < N; i++) 
    {
        for (int j = 0; j < M; j++) 
        {
            int r, g, b;
            cin >> r >> g >> b;
            table[i][j] = r + g + b;
        }
    }

    cin >> T;
    T *= 3;

    int cnt = 0;

    for (int i = 0; i < N; i++) 
    {
        for (int j = 0; j < M; j++) 
        {
            if (table[i][j] >= T && !visited[i][j])
            {
                BFS(i, j);
                cnt++;
            }
        }
    }

    cout << cnt << endl;

    return 0;
}


