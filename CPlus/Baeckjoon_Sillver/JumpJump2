#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<int>maps;
vector<int> dp;

void BFS(int start, const int N);

int main()
{
    int N,start;
    cin >> N;

    maps = vector<int>(N + 1);
    dp = vector<int>(N + 1, 0);
    for (int i = 1; i <= N; i++)
    {
        cin >> maps[i];
    }

    cin >> start;

    dp[start] = 1;


    BFS(start, N);

    int answer = 0;
    for (int i = 1; i <= N; i++)
    {
        if (dp[i] == 1)
            answer++;
    }

    cout << answer;
}

void BFS(int start, const int N)
{
    queue<int> que;
    que.push(start);

    while (!que.empty())
    {
        int current = que.front();
        que.pop();

        int left = current - maps[current];
        int right = current + maps[current];

        if (left >= 1 && dp[left] == 0)
        {
            dp[left] = 1;
            que.push(left);
        }

        if (right <= N && dp[right] == 0)
        {
            dp[right] = 1;
            que.push(right);
        }
    }

}