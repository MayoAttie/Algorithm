#include <iostream>
#include <vector>

using namespace std;

int dy[4] = { 0, 1, 0, -1 };
int dx[4] = { 1, 0, -1, 0 };
vector<vector<int>> graph(5, vector<int>(5));
vector<vector<bool>> visited(5, vector<bool>(5, false));

int dfs(int y, int x, int depth, int cnt) 
{
    visited[y][x] = true;
    if (graph[y][x] == 1) 
        cnt += 1;
    
    if (cnt >= 2) 
        return 1;
    
    if (depth > 2) 
    {
        visited[y][x] = false;
        return 0;
    }
    for (int i = 0; i < 4; ++i) 
    {
        int ny = y + dy[i];
        int nx = x + dx[i];
        if (ny >= 0 && ny < 5 && nx >= 0 && nx < 5) 
        {
            if (!visited[ny][nx] && graph[ny][nx] != -1) 
            {
                if (dfs(ny, nx, depth + 1, cnt) == 1) 
                    return 1;
            }
        }
    }
    visited[y][x] = false;
    return 0;
}

int main() {
    for (int i = 0; i < 5; ++i) 
    {
        for (int j = 0; j < 5; ++j) 
        {
            cin >> graph[i][j];
        }
    }

    int r, c;
    cin >> r >> c;

    cout << dfs(r, c, 0, 0) << endl;

    return 0;
}