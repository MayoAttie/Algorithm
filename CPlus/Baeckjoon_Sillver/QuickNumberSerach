#include <iostream>
#include <vector>
#include <queue>

using namespace std;

vector<vector<int>> graph(5, vector<int>(5));
int r, c;

int drX[4] = { 1,-1,0,0 };
int drY[4] = { 0,0,1,-1 };
void BFS(pair<int, int>target);
int main()
{
    pair<int, int> target;
    for (int i = 0; i < 5; i++)
    {
        for (int j = 0; j < 5; j++)
        {
            cin >> graph[i][j];
            if (graph[i][j] == 1)
            {
                target.first = i;
                target.second = j;
            }
        }
    }

    cin >> r >> c;

    BFS(target);

}

void BFS(pair<int, int>target)
{
    queue<pair<int, int>> que;
    que.push({ r,c });
    graph[r][c] = -1;
    int cnt = 0;

    while (!que.empty())
    {
        int len = que.size();
        for (int m = 0; m < len; m++)
        {
            int curX = que.front().first;
            int curY = que.front().second;
            que.pop();

            if (curX == target.first && curY == target.second)
            {
                cout << cnt << endl;
                return;
            }

            for (int i = 0; i < 4; i++)
            {
                int nX = curX + drX[i];
                int nY = curY + drY[i];
                if (nX >= 0 && nX < 5 && nY >= 0 && nY < 5)
                {
                    if (graph[nX][nY] != -1)
                    {
                        que.push({ nX,nY });
                        graph[nX][nY] = -1;
                    }
                }
            }
        }
        cnt++;
    }

    cout << -1 << endl;
}