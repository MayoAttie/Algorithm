#include <iostream>
#include <vector>
#include <queue>
using namespace std;

// 그래프와 방문 여부를 나타내는 2차원 벡터 정의
vector<vector<char>> graph;
vector<vector<bool>> visited;

// 네 가지 방향으로 이동하는 배열
int drX[4] = { 1, 0, -1, 0 };
int drY[4] = { 0, 1, 0, -1 };

// BFS 함수 선언
int BFS(pair<int, int> start);

int main()
{
    int row, col;
    cin >> col >> row;

    // 그래프와 방문 여부 벡터 초기화
    graph = vector<vector<char>>(col, vector<char>(row, '.'));
    visited = vector<vector<bool>>(col, vector<bool>(row, false));

    pair<int, int> start;

    for (int i = 0; i < col; i++)
    {
        string str;
        cin >> str;

        for (int j = 0; j < row; j++)
        {
            graph[i][j] = str[j];
            if(graph[i][j] == '.')
                start = make_pair(i, j);
        }
    }

    int result = BFS(start);

    cout << result;

}

int BFS(pair<int, int> start)
{
    int c = graph.size();
    int r = graph[0].size();

    queue<pair<int, int>> que;
    que.push(start);

    while (!que.empty())
    {
        pair<int, int> current = que.front();
        que.pop();

        int cnt = 0;

        for (int i = 0; i < 4; i++)
        {
            int nextY = current.first + drY[i];
            int nextX = current.second + drX[i];

            // 다음 위치가 유효하고, 그래프에서 점('.')인 경우
            if (nextY >= 0 && nextY < c && nextX >= 0 && nextX < r &&
                graph[nextY][nextX] == '.')
            {
                cnt++;

                // 아직 방문하지 않았다면
                if (!visited[nextY][nextX])
                {
                    visited[nextY][nextX] = true;
                    que.push({ nextY, nextX });
                }
            }
        }
        
        // 주변에 길이 2개 미만인 경우 1을 반환
        if (cnt < 2)
            return 1;
    }

    // 모든 탐색을 마쳤다면 0을 반환
    return 0;
}