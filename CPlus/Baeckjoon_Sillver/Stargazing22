#include <iostream>
#include <vector>

using namespace std;

vector<vector<char>> matrix;

void backtracking(int n, int idx) 
{
    if (n == 1) 
    {
        matrix[idx][idx] = '*';
        matrix[idx + 1][idx] = '*';
        matrix[idx + 2][idx] = '*';
        return;
    }

    int row = 4 * (n - 1) + 1;
    int col = 4 * (n - 1) + 3;

    for (int r = idx; r < row + idx; ++r)
    {
        for (int c = idx; c < col + idx; ++c)
        {
            if (r == idx || c == idx || r == row + idx - 1 || c == col + idx - 1)
                matrix[c][r] = '*';
        }
    }

    matrix[idx + 1][idx + row - 1] = ' ';
    matrix[idx + 2][idx + row - 2] = '*';

    backtracking(n - 1, idx + 2);
}



int main() 
{
    int N;
    cin >> N;

    if (N == 1) 
    {
        cout << "*" << '\n';
    }
    else
    {
        int row = 4 * (N - 1) + 1;
        int col = 4 * (N - 1) + 3;

        matrix.resize(col, vector<char>(row, ' '));

        backtracking(N, 0);
        for (int i = 0; i < col; ++i) 
        {
            if (i == 1) 
            {
                cout << '*' << '\n';
                continue;
            }
            for (int j = 0; j < row; ++j) 
            {
                cout << matrix[i][j];
            }
            cout << '\n';
        }
    }
}