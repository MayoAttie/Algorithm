#include<iostream>
#include<vector>
using namespace std;

void Merge(vector<int>& arr, int left, int mid, int right)
{
    int n1 = mid - left + 1;
    int n2 = right - mid;

    vector<int> Left(n1);
    vector<int> Right(n2);

    for (int i = 0; i < n1; i++)
    {
        Left[i] = arr[left + i];
    }
    for (int i = 0; i < n2; i++)
    {
        Right[i] = arr[mid + 1 + i];
    }

    int i = 0;
    int j = 0;
    int k = left;

    while (i < n1 && j < n2)
    {
        if (Left[i] <= Right[j])
        {
            arr[k] = Left[i];
            i++;
        }
        else
        {
            arr[k] = Right[j];
            j++;
        }
        k++;
    }

    while (i < n1) 
    {
        arr[k] = Left[i];
        i++;
        k++;
    }


    while (j < n2)
    {
        arr[k] = Right[j];
        j++;
        k++;
    }
}

void MergeSort(vector<int>& arr, int left, int right)
{
    if (left < right)
    {
        int mid = (left + right) / 2;
        MergeSort(arr, left, mid);
        MergeSort(arr, mid + 1, right);

        Merge(arr, left, mid, right);
    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int N;
    cin >> N;
    vector<int> arr(N);

    for (int i = 0; i < N; i++)
        cin >> arr[i];

    MergeSort(arr, 0, N - 1);

    for (int i : arr)
    {
        cout << i << '\n'; 
    }

    return 0;
}