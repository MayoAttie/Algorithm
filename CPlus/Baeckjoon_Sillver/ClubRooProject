#include <iostream>
#include <string>
#include <vector>    
using namespace std;

vector<int> parent, high;

int find(int x)
{
    if (parent[x] == x)
        return x;   
    return parent[x] = find(parent[x]);
}

void Union(int x, int y)
{
    x = find(x);
    y = find(y);

    if (x != y)
        if (high[x] < high[y])
            swap(x, y);

    parent[y] = x;
    if (high[x] == high[y])
        high[x]++;
}

int main() 
{
    int N, M, answer=0;
    cin >> N >> M;

    parent.resize(N + 1);
    high.resize(N + 1, 0);

    for (int i = 1; i <= N; i++)
    {
        parent[i] = i;
    }

    for (int i = 0; i < M; i++)
    {
        int x, y;
        cin >> x >> y;
        for (int j = x; j < y; j++)
            Union(j, j + 1);
    }
    for (int i = 1; i <= N; i++)
    {
        if (find(i) == i)
            answer++;
    }

    cout << answer;
    

    return 0;
}