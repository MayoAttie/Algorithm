#include <iostream>
#include <vector>
using namespace std;

int main() {
    int n;
    cin >> n;

    vector<vector<char>> array(n, vector<char>(n));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> array[i][j];
        }
    }

    int maxCount = 0; // 최대 사탕 개수를 초기화

    // 배열의 행마다 같은 색의 사탕이 몇 개 있는지 계산
    auto width = [&]() 
    {
        int maxCountRow = 0;

        for (int k = 0; k < n; k++) 
        {
            int countRow = 1; // 초기 개수를 1로 초기화
            for (int l = 0; l < n - 1; l++) 
            {
                if (array[k][l] == array[k][l + 1])
                { 
                    // 만약 같은 열의 사탕의 색이 같다면
                    countRow++; // 사탕 개수 1 증가
                    maxCountRow = max(maxCountRow, countRow); // 증가시킨 값과 최대 사탕 개수를 비교하여 큰 값을 대입
                }
                else
                { 
                    // 만약 같은 열의 사탕 개수가 다르다면
                    countRow = 1; // 개수를 1로 초기화
                }
            }
        }
        maxCount = max(maxCount, maxCountRow);
    };

    // 배열의 열마다 같은 색의 사탕이 몇 개 있는지 계산
    auto height = [&]() 
    {
        int maxCountColumn = 0;

        for (int k = 0; k < n; k++) 
        {
            int countColumn = 1; // 초기 개수를 1로 초기화
            for (int l = 0; l < n - 1; l++) 
            {
                if (array[l][k] == array[l + 1][k]) 
                {
                    // 만약 같은 행의 사탕의 색이 같다면
                    countColumn++; // 사탕 개수를 1개씩 증가시켜주고
                    maxCountColumn = max(maxCountColumn, countColumn); // 증가시킨 값과 최대 사탕 개수를 비교하여 큰 값을 대입
                }
                else 
                {
                    // 만약 같은 행의 색이 다르다면
                    countColumn = 1; // 개수를 1로 초기화
                }
            }
        }
        maxCount = max(maxCount, maxCountColumn);
    };

    for (int i = 0; i < n; i++) 
    {
        for (int j = 0; j < n - 1; j++) 
        {
            // 만약 입력 받은 배열의 행의 원소가 다르다면
            if (array[i][j] != array[i][j + 1]) 
            {
                swap(array[i][j], array[i][j + 1]);
                width();
                height();
                swap(array[i][j + 1], array[i][j]);
            }
            // 만약 입력 받은 배열의 열의 원소가 다르다면
            if (array[j][i] != array[j + 1][i]) 
            {
                swap(array[j][i], array[j + 1][i]);
                width();
                height();
                swap(array[j + 1][i], array[j][i]);
            }
        }
    }

    cout << maxCount << endl; // 색이 같은 사탕 개수 최대값을 출력

    return 0;
}