#include <iostream>
#include <vector>
#include <queue>

using namespace std;

vector<vector<int>> board;
vector<vector<int>> visited;
int n, m;
int dy[] = { 0, 1 };
int dx[] = { 1, 0 };

int BFS() 
{
    queue<pair<int, int>> que;
    visited[0][0] = 0;
    que.push({ 0, 0 });

    while (!que.empty())
    {
        int curY = que.front().first;
        int curX = que.front().second;
        que.pop();

        for (int i = 0; i < 2; i++) 
        {
            int ny = curY;
            int nx = curX;
            for (int j = 0; j < board[curY][curX]; j++)
            {
                ny += dy[i];
                nx += dx[i];
                if (0 <= ny && ny < n && 0 <= nx && nx < m && visited[ny][nx] == 0) 
                {
                    que.push({ ny, nx });
                    visited[ny][nx] = visited[curY][curX] + 1;
                }
            }
        }
    }

    return visited[n - 1][m - 1];
}

int main() 
{
    cin >> n >> m;
    board = vector<vector<int>>(n, vector<int>(m));
    visited = vector<vector<int>>(n, vector<int>(m, 0));

    for (int i = 0; i < n; i++) 
    {
        for (int j = 0; j < m; j++) 
        {
            cin >> board[i][j];
        }
    }


    cout << BFS() << endl;

    return 0;
}