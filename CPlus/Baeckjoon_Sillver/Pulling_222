#include <iostream>
#include <vector>	
#include <algorithm>

using namespace  std;

vector<vector<int>> matrix;

int backtracking(int N, int left, int right)
{
	int M = N / 2;

	if (N == 2)
	{
		vector<int> arr = { matrix[left][right], matrix[left + 1][right], matrix[left][right + 1], matrix[left + 1][right + 1] };
		sort(arr.begin(), arr.end());
		return arr[2];
	}

	int leftTop = backtracking(M, left, right);
	int rightTop = backtracking(M, left + M, right);
	int leftBottom = backtracking(M, left, right + M);
	int rightBottom = backtracking(M, left + M, right + M);

	vector<int> arr = { leftTop,rightTop,leftBottom,rightBottom };
	sort(arr.begin(), arr.end());
	return arr[2];
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);

	int N;
	cin >> N;
	matrix.resize(N, vector<int>(N, 0));

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			cin >> matrix[i][j];
		}
	}

	int answer = backtracking(N, 0, 0);
	cout << answer;
	
}