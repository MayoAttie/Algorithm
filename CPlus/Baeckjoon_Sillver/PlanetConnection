#include <iostream>
#include <vector>
#include <queue>

using namespace std;

vector<vector<long long>> graph; // 플로우 관리 비용을 저장할 인접 행렬
vector<bool> visited; // 방문 여부를 저장할 배열
vector<long long> minCost; // 최소 비용을 저장할 배열

const long long INF = 1e9; // 무한대 값 설정

long long Prim(long long startNode); // 프림 알고리즘 함수

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int N;
    cin >> N; // 행성의 수 입력

    graph = vector<vector<long long>>(N, vector<long long>(N, 0)); // 그래프 초기화
    visited = vector<bool>(N, false); // 방문 배열 초기화
    minCost = vector<long long>(N, INF); // 최소 비용 배열 초기화

    // 플로우 관리 비용 입력
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            cin >> graph[i][j];
        }
    }

    long long answer = Prim(0); // 프림 알고리즘으로 최소 비용 계산

    cout << answer; // 최소 플로우의 관리 비용 출력
}

long long Prim(long long startNode)
{
    minCost[startNode] = 0;
    long long totalCost = 0;

    // 우선순위 큐를 사용하여 가장 작은 비용의 노드 선택
    priority_queue<pair<long long, long long>, vector<pair<long long, long long>>, greater<pair<long long, long long>>> priQ;
    priQ.push({ 0, startNode });

    while (!priQ.empty())
    {
        long long currentNode = priQ.top().second; // 현재 노드 선택
        long long currentCost = priQ.top().first; // 현재 노드의 비용 선택
        priQ.pop();

        if (visited[currentNode])
            continue; // 이미 방문한 노드는 건너뜀

        visited[currentNode] = true; // 현재 노드를 방문 처리
        totalCost += currentCost; // 비용 누적

        // 모든 연결된 노드를 검사
        for (int i = 0; i < graph.size(); i++)
        {
            if (!visited[i] && graph[currentNode][i] < minCost[i])
            {
                minCost[i] = graph[currentNode][i]; // 최소 비용 갱신
                priQ.push({ minCost[i], i }); // 큐에 새로운 노드 추가
            }
        }
    }

    return totalCost; // 최소 비용 반환
}