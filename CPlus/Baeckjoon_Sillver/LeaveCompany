#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    int n;
    cin >> n;  // 전체 일 수 입력 받기
    vector<int> t(n + 1);  // 각 상담의 소요 일수
    vector<int> p(n + 1);  // 각 상담의 보수
    vector<int> dp(n + 1);  // 동적 계획법을 위한 배열

    // 각 상담의 소요 일수와 보수 입력 받기
    for (int i = 1; i <= n; i++) {
        cin >> t[i] >> p[i];
        dp[i] = p[i];  // 초기 값으로 각 상담의 보수 설정
    }

    // 동적 계획법을 이용하여 최대 이익 계산
    for (int i = 2; i <= n; i++) {
        for (int j = 1; j < i; j++) {
            // i번째 날에 상담이 가능한 경우, 현재 상담의 보수와 j번째 날까지의 최대 보수를 더한 값 중 큰 값을 선택
            if (i - j >= t[j])
                dp[i] = max(p[i] + dp[j], dp[i]);
        }
    }

    int maxProfit = 0;  // 최대 이익을 저장하는 변수 초기화
    for (int i = 1; i <= n; i++) {
        // i번째 날에 상담이 가능한 경우, 최대 이익 갱신
        if (i + t[i] <= n + 1)
            maxProfit = max(maxProfit, dp[i]);
    }

    cout << maxProfit << endl;  // 최대 이익 출력

    return 0;
}