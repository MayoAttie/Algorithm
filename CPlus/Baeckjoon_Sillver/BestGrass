#include <iostream>
#include <vector>
#include <queue>

using namespace std;

const int dx[] = { 0, 0, 1, -1 };
const int dy[] = { 1, -1, 0, 0 };
vector<string> graph;
vector<vector<bool>> visited;
// BFS 함수
int bfs(int startX, int startY) 
{
    int R = graph.size();
    int C = graph[0].size();
    queue<pair<int, int>> que;
    que.push(make_pair(startX, startY));
    visited[startX][startY] = true;

    while (!que.empty()) 
    {
        int x = que.front().first;
        int y = que.front().second;
        que.pop();

        for (int k = 0; k < 4; k++) 
        {
            int nx = x + dx[k];
            int ny = y + dy[k];

            if (nx >= 0 && nx < R && ny >= 0 && ny < C && graph[nx][ny] == '#' && !visited[nx][ny]) 
            {
                que.push(make_pair(nx, ny));
                visited[nx][ny] = true;
            }
        }
    }

    return 1;
}

int main() {
    int R, C;
    cin >> R >> C;

    graph.resize(R);
    for (int i = 0; i < R; i++) 
    {
        cin >> graph[i];
    }

    visited.resize(R, vector<bool>(C, false));
    int clumpCount = 0;

    for (int i = 0; i < R; i++) 
    {
        for (int j = 0; j < C; j++) 
        {
            if (graph[i][j] == '#' && !visited[i][j])
            {
                clumpCount += bfs(i, j);
            }
        }
    }

    cout << clumpCount << endl;

    return 0;
}