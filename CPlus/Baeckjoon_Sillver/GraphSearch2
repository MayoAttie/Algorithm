#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

vector<int> bfs(int n, vector<vector<int>>& graph)
{
	vector<int> dist(n + 1, -1);
	queue<int> que;
	que.push(1);

	dist[1] = 0;

	while (!que.empty())
	{
		int cur = que.front();
		que.pop();

		for (int i : graph[cur])
		{
			if (dist[i] == -1)
			{
				dist[i] = dist[cur]+1;
				que.push(i);
			}
		}
	}

	dist.erase(dist.begin());
	return dist;
}

int main()
{
	int n, m;
	cin >> n >> m;

	vector<pair<int, int>> cities(m);
	for (int i = 0; i < m; i++)
	{
		cin >> cities[i].first >> cities[i].second;
	}

	int q;
	cin >> q;
	vector<pair<int, int>> roads(q);
	for (int i = 0; i < q; i++)
	{
		cin >> roads[i].first >> roads[i].second;
	}

	vector<vector<int>> graph(n + 1);
	for (auto i : cities)
	{
		int u = i.first;
		int v = i.second;
		graph[u].push_back(v);
		graph[v].push_back(u);
	}

	for (auto i : roads)
	{
		int u = i.first;
		int v = i.second;

		if (find(graph[u].begin(), graph[u].end(), v) == graph[u].end())
		{
			graph[u].push_back(v);
			graph[v].push_back(u);
		}

		vector<int> answer = bfs(n, graph);
		for (int i = 0; i < answer.size(); i++)
		{
			cout << answer[i] << " ";
		}
		cout << '\n';
	}

}