#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> arr;        // 각 선배가 알고 있는 선배의 번호를 저장할 배열
vector<bool> visited;   // 방문 여부를 저장할 배열

// DFS (깊이 우선 탐색) 함수
void DFS(int index) 
{
    visited[index] = true;
    while (!visited[arr[index]]) 
    {
        DFS(arr[index]);
    }
}

int main() 
{
    int N;
    cin >> N;

    arr.resize(N + 1);             // 배열 크기 설정
    vector<int> answer(N + 1, 0);  // 선배별로 만날 수 있는 선배의 수를 저장할 배열

    // 선배들의 대답을 입력으로 받음
    for (int i = 1; i <= N; i++) 
    {
        cin >> arr[i];
    }

    int maxCount = 0;   // 가장 많은 선배를 만날 수 있는 횟수
    int maxIndex = 0;   // 가장 많은 선배를 만날 수 있는 선배 번호

    for (int i = 1; i <= N; i++) 
    {
        visited.assign(N + 1, false);  // 방문 여부 배열 초기화
        DFS(i);  // 현재 선배로부터 시작하는 DFS 실행
        int cnt = count(visited.begin() + 1, visited.end(), true);  // 방문한 선배의 수 카운트
        answer[i] = cnt;  // 선배별로 만날 수 있는 선배의 수 저장

        if (cnt > maxCount) 
        {
            maxCount = cnt;  // 최댓값 업데이트
            maxIndex = i;    // 최댓값을 가진 선배 번호 업데이트
        }
    }

    cout << maxIndex << endl;  // 가장 많은 선배를 만날 수 있는 선배 번호 출력

    return 0;
}