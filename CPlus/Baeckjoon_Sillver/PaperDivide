#include <iostream>
#include <vector>
using namespace std;

vector<vector<int>> arr;
int minus_cnt, zero_cnt, one_cnt;

void division(int start_row, int start_col, int size);

int main() 
{
    int n;
    cin >> n;

    arr.resize(n, vector<int>(n));

    for (int i = 0; i < n; ++i) 
    {
        for (int j = 0; j < n; ++j) 
            cin >> arr[i][j];
        
    }

    minus_cnt = 0;
    zero_cnt = 0;
    one_cnt = 0;

    division(0, 0, n);

    cout << minus_cnt << '\n';
    cout << zero_cnt << '\n';
    cout << one_cnt << '\n';

    return 0;
}


void division(int start_row, int start_col, int size)
{
    bool flag = true;
    int num = arr[start_row][start_col];

    for (int row = start_row; row < start_row + size; row++)
    {
        for (int col = start_col; col < start_col + size; col++)
        {
            if (num != arr[row][col])
            {
                flag = false;
                break;
            }
        }

        if (!flag)
            break;

    }

    if (flag)
    {
        if (num == -1)
            minus_cnt += 1;
        else if (num == 0)
            zero_cnt += 1;
        else
            one_cnt += 1;

    }
    else
    {
        size /= 3;
        int divideRow_2 = start_row + size;
        int divideRow_3 = start_row + size * 2;
        int divideCol_2 = start_col + size;
        int divideCol_3 = start_col + size * 2;

        division(start_row, start_col, size);
        division(divideRow_2, start_col, size);
        division(start_row, divideCol_2, size);
        division(divideRow_2, divideCol_2, size);
        division(divideRow_3, start_col, size);
        division(start_row, divideCol_3, size);
        division(divideRow_3, divideCol_2, size);
        division(divideRow_2, divideCol_3, size);
        division(divideRow_3, divideCol_3, size);
    }
}
