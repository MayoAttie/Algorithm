#include <iostream>
#include <unordered_map>
#include <string>
#include <algorithm>
#include <vector>
#include <set>
using namespace std;

int n;
vector<vector<int>> ground;
vector<vector<int>> visited;
vector<pair<int, int>> flowerPos;
int answer = 1e9;

int dx[5] = { 0,1,0,-1,0 };
int dy[5] = { 0,0,1,0,-1 };

bool canPlant(int x, int y)
{
    for (int i = 0; i < 5; i++)
    {
        int nx = x + dx[i];
        int ny = y + dy[i];

        if (nx >= 0 && nx < n && ny >= 0 && ny < n && visited[nx][ny] == 0)
        {
        }
        else
            return false;
    }
    return true;
}

int plantFunc(int x, int y, bool flag)
{
    int cost = 0;
    for (int i = 0; i < 5; i++)
    {
        int nx = x + dx[i];
        int ny = y + dy[i];

        visited[nx][ny] = flag;
        if (flag)
            cost += ground[nx][ny];
    }
    return cost;
}

void backtracking(int cost, int depth)
{
    if (depth == 3)
    {
        answer = min(answer, cost);
        return;
    }

    for (int i = 1; i < n - 1; i++)
    {
        for (int j = 1; j < n - 1; j++)
        {
            if (canPlant(i, j))
            {
                int tmpCost = plantFunc(i, j, true);
                backtracking(cost + tmpCost, depth + 1);
                plantFunc(i, j, false);
            }
        }
    }
}

int main() 
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> n;
    ground.resize(n, vector<int>(n));
    visited.resize(n, vector<int>(n,0));

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cin >> ground[i][j];
        }
    }

    backtracking(0, 0);
    cout << answer;
}