#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() 
{
    int r, c;
    cin >> r >> c;
    vector<vector<char>> arr(r);
    vector<int> result, result_team;
    vector<int> check;
    int rank = 1;

    for (int i = 0; i < r; i++) 
    {
        arr[i].resize(c);
        for (int j = 0; j < c; j++) 
        {
            cin >> arr[i][j];
        }
    }

    for (int i = 0; i < r; i++) 
    {
        int cnt = 0;
        for (int j = 0; j < c; j++) 
        {
            if (arr[i][j] != 'S' && arr[i][j] != '.' && arr[i][j] != 'F')
            {
                arr[i].erase(arr[i].begin() + j);
                cnt++;
                j--;
            }
            if (cnt == 2) 
                break;
        }
    }

    for (int i = 0; i < r; i++) 
    {
        check.push_back(arr[i].size());
    }
    int delete_idx = distance(check.begin(), max_element(check.begin(), check.end()));
    arr.erase(arr.begin() + delete_idx);

    for (int i = 1; i < c - 1; i++) 
    {
        int cnt = 0;
        for (int j = 0; j < r - 1; j++) 
        {
            if (arr[j][arr[j].size() - i - 1] != 'F' && arr[j][arr[j].size() - i - 1] != '.' && arr[j][arr[j].size() - i - 1] != 'S')
            {
                result.push_back(rank);
                result_team.push_back(arr[j][arr[j].size() - i - 1] - '0');
                cnt++;
            }
        }
        if (cnt > 0) rank++;
    }

    for (int i = 1; i <= 9; i++) 
    {
        cout << result[find(result_team.begin(), result_team.end(), i) - result_team.begin()] << '\n';
    }

    return 0;
}