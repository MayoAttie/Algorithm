#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

/*
문제
재난방재청에서는 많은 비가 내리는 장마철에 대비해서 다음과 같은 일을 계획하고 있다. 
먼저 어떤 지역의 높이 정보를 파악한다. 
그 다음에 그 지역에 많은 비가 내렸을 때 물에 잠기지 않는 안전한 영역이 최대로 몇 개가 만들어 지는 지를 조사하려고 한다.
이때, 문제를 간단하게 하기 위하여, 장마철에 내리는 비의 양에 따라 일정한 높이 이하의 모든 지점은 물에 잠긴다고 가정한다.

어떤 지역의 높이 정보는 행과 열의 크기가 각각 N인 2차원 배열 형태로 주어지며 배열의 각 원소는 해당 지점의 높이를 표시하는 자연수이다.
예를 들어, 다음은 N=5인 지역의 높이 정보이다.

물에 잠기지 않는 안전한 영역이라 함은 물에 잠기지 않는 지점들이 위, 아래, 오른쪽 혹은 왼쪽으로 인접해 있으며 그 크기가 최대인 영역을 말한다.
위의 경우에서 물에 잠기지 않는 안전한 영역은 5개가 된다(꼭짓점으로만 붙어 있는 두 지점은 인접하지 않는다고 취급한다).

같은 지역에서 내리는 비의 양에 따른 모든 경우를 다 조사해 보면 물에 잠기지 않는 안전한 영역의 개수 중에서 최대인 경우는 5임을 알 수 있다.

어떤 지역의 높이 정보가 주어졌을 때, 
장마철에 물에 잠기지 않는 안전한 영역의 최대 개수를 계산하는 프로그램을 작성하시오.


입력
첫째 줄에는 어떤 지역을 나타내는 2차원 배열의 행과 열의 개수를 나타내는 수 N이 입력된다. 
N은 2 이상 100 이하의 정수이다. 

둘째 줄부터 N개의 각 줄에는 2차원 배열의 첫 번째 행부터 N번째 행까지 순서대로 한 행씩 높이 정보가 입력된다. 
각 줄에는 각 행의 첫 번째 열부터 N번째 열까지 N개의 높이 정보를 나타내는 자연수가 빈 칸을 사이에 두고 입력된다. 

높이는 1이상 100 이하의 정수이다.

출력
첫째 줄에 장마철에 물에 잠기지 않는 안전한 영역의 최대 개수를 출력한다.
*/

// DFS 함수 선언
void DFS(int x, int y, int rainHigh);

int main()
{
    int len;
    int nMax = 0;
    int answer = 0;
    cin >> len;  // 지역의 크기 입력

    // 높이 정보를 담을 2차원 벡터 graph 생성
    vector<vector<int>> graph(len, vector<int>(len, 0));

    // 높이 정보 입력과 최대 높이 갱신
    for (int i = 0; i < len; i++)
    {
        for (int j = 0; j < len; j++)
        {
            int data;
            cin >> data;
            nMax = max(data, nMax);  // 최대 높이 갱신
            graph[i][j] = data;  // 높이 정보 저장
        }
    }

    // 높이 정보에 따라서 안전한 영역 개수 조사
    for (int k = 0; k <= nMax; k++)
    {
        int tmp = 0;
        // 방문 여부를 저장하는 2차원 벡터 visited 초기화
        vector<vector<bool>> visited(len, vector<bool>(len, false));

        // 모든 지점에 대해 안전한 영역 개수 조사
        for (int i = 0; i < len; i++)
        {
            for (int j = 0; j < len; j++)
            {
                // 방문하지 않았고, 높이가 비의 양보다 높을 경우
                if (!visited[i][j] && graph[i][j] > k)
                {
                    DFS(i, j, k);  // DFS로 연결된 영역을 탐색하고 안전한 영역 개수 증가
                    tmp++;
                }
            }
        }

        // 기존의 최대 안전한 영역 개수와 비교하여 더 큰 값으로 갱신
        answer = max(answer, tmp);
    }

    // 최대 안전한 영역 개수 출력
    cout << answer << endl;
}

// DFS 함수 구현
void DFS(int x, int y, int rainHigh)
{
    if (visited[x][y] || graph[x][y] <= rainHigh)
        return;

    visited[x][y] = true;

    // 상하좌우 이동을 위한 배열
    int dirX[4] = { 1, 0, -1, 0 };
    int dirY[4] = { 0, 1, 0, -1 };

    // 상하좌우 이동 탐색
    for (int i = 0; i < 4; i++)
    {
        int nX = x + dirX[i];
        int nY = y + dirY[i];

        // 유효한 범위 내에서 방문하지 않았고, 높이가 비의 양보다 높을 경우
        if (nX >= 0 && nX < graph.size() && nY >= 0 && nY < graph[0].size() && !visited[nX][nY] && graph[nX][nY] > rainHigh)
        {
            DFS(nX, nY, rainHigh);  // 재귀적으로 DFS 호출
        }
    }
}