#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
using namespace std;

int N, M;
vector<int> arr;
set<int> primes;

bool isPrime(int num)
{
    if (num <= 1)
        return false;
    for (int i = 2; i * i <= num; i++)
    {
        if (num % i == 0)
            return false;
    }
    return true;
}

void backtracking(int idx, int sum, int cnt)
{
    if (cnt == M)
    {
        if (isPrime(sum))
            primes.insert(sum);
        return;
    }

    for (int i = idx; i < N; i++)
    {
        backtracking(i + 1, sum + arr[i], cnt + 1);
    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> N >> M;
    arr.resize(N);
    for (int i = 0; i < N; i++)
    {
        cin >> arr[i];
    }

    backtracking(0, 0, 0);

    if (primes.empty())
    {
        cout << -1;
    }
    else
    {
        for (int prime : primes)
        {
            cout << prime << " ";
        }
    }

    return 0;
}