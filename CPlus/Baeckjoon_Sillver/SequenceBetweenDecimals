#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> sieve(int n) 
{
    vector<bool> isPrime(n + 1, true);
    vector<int> primes;
    for (int p = 2; p * p <= n; ++p) 
    {
        if (isPrime[p]) 
        {
            for (int i = p * p; i <= n; i += p) 
                isPrime[i] = false;
        }
    }
    for (int p = 2; p <= n; ++p) 
    {
        if (isPrime[p]) 
            primes.push_back(p);
    }
    return primes;
}

int main() 
{
    int T;
    cin >> T;

    vector<int> primes = sieve(1299709);

    while (T--) 
    {
        int k;
        cin >> k;

        bool is_k_prime = false;
        for (int prime : primes) 
        {
            if (prime == k) 
            {
                is_k_prime = true;
                break;
            }
        }

        if (is_k_prime) 
            cout << 0 << endl;
        else 
        {
            auto it = upper_bound(primes.begin(), primes.end(), k);
            int idx = it - primes.begin();
            cout << primes[idx] - primes[idx - 1] << '\n';
        }
    }

    return 0;
}