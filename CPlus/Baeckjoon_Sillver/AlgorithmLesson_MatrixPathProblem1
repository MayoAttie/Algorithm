#include <iostream>
#include <unordered_map>
#include <string>
#include <algorithm>
#include <vector>
#include <set>
#include <cctype>
using namespace std;

int n;
vector<vector<int>> arr;
int backCnt = 0;
int dpCnt = 0;
vector<vector<int>> dp;

int backtracking(int x, int y)
{
    if (x < 0 || y < 0)
        return 0;
    else
    {
        backCnt++;
        return arr[x][y] + max(backtracking(x - 1, y), backtracking(x, y - 1));
    }
}
int matrix_path(int x, int y)
{
    backCnt++;
    return backtracking(x, y);
}


int Dynamic()
{
    for (int i = 0; i < n; i++)
    {
        dp[i][0] = 0;
        dpCnt++;

    }
    for (int i = 1; i < n; i++)
    {
        dp[0][i] = 0;
        dpCnt++;
    }

    for (int i = 1; i < n; i++)
    {
        for (int j = 1; j < n; j++)
        {
            dpCnt++;
            dp[i][j] = arr[i][j] + max(dp[i - 1][j], dp[i][j - 1]);
        }
    }

    return dp[n - 1][n - 1];
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    cin >> n;
    arr.resize(n, vector<int>(n));
    dp.resize(n, vector<int>(n));
    for (int i = 0; i < n; i++) 
    {
        for (int j = 0; j < n; j++)
        {
            cin >> arr[i][j];
        }
    }

    matrix_path(n - 1, n - 1);
    Dynamic();

    cout << backCnt << " " << dpCnt;

    return 0;
}