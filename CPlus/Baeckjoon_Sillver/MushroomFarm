#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int N, M, K, M2;
vector<vector<int>> graph;
vector<vector<bool>> visited;
int dx[] = { -1, 0, 1, 0 }; 
int dy[] = { 0, 1, 0, -1 };

void bfs(int x, int y) 
{
    queue<pair<int, int>> q;
    q.push({ x, y }); 
    visited[x][y] = true; 
    int cnt = 1; 

    while (!q.empty()) 
    {
        pair<int, int> cur = q.front(); 
        q.pop();

        for (int dir = 0; dir < 4; dir++) 
        {
            int nx = cur.first + dx[dir]; 
            int ny = cur.second + dy[dir];

            if (0 <= nx && nx < N && 0 <= ny && ny < N && graph[nx][ny] == 0 && !visited[nx][ny])
            {
                q.push({ nx, ny }); 
                visited[nx][ny] = true; 
                cnt++; 
            }
        }
    }

    M -= (cnt + K - 1) / K; 
}

int main() 
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    cin >> N >> M >> K; 
    M2 = M; 

    graph.resize(N, vector<int>(N)); 
    visited.resize(N, vector<bool>(N, false));

    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            cin >> graph[i][j];
        }
    }

    for (int i = 0; i < N; i++) 
    {
        for (int j = 0; j < N; j++)
        {
            if (graph[i][j] == 0 && !visited[i][j]) 
            {
                bfs(i, j); 
                if (M < 0) 
                {
                    cout << "IMPOSSIBLE";
                    return 0;
                }
            }
        }
    }

    if (M == M2) 
    {
        cout << "IMPOSSIBLE";
    }
    else 
    {
        cout << "POSSIBLE\n";
        cout << M;
    }

    return 0;
}