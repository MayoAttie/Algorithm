#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<vector<int>> graph;
vector<int> visited;
vector<int> depths;
int order = 1;
void DFS(int node, int depth);

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int N, M, R;
    cin >> N >> M >> R;

    graph.resize(N + 1);
    visited.resize(N + 1, 0);
    depths.resize(N + 1, -1);

    for (int i = 0; i < M; i++)
    {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u);
    }

    for (int i = 1; i <= N; i++)
        sort(graph[i].begin(), graph[i].end());

    DFS(R, 0);

    long long answer = 0;
    for (int i = 1; i <= N; i++)
    {
        long long t = visited[i];
        long long d = depths[i];
        answer += t * d;
    }
    cout << answer;
}

void DFS(int node, int depth)
{
    visited[node] = order;
    depths[node] = depth;

    for (int neighbor : graph[node])
    {
        if (!visited[neighbor])
        {
            order++;
            DFS(neighbor, depth + 1);
        }
    }
}