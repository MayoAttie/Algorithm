#include <iostream>
#include <deque>
#include <vector>
#include <sstream>
#include <algorithm>

using namespace std;

bool comparer(const pair<char, int>& a, const pair<char, int>& b) 
{
    if (a.first == b.first) 
        return a.second < b.second;
    return a.first < b.first;
}

int main() 
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int N;
    cin >> N;
    cin.ignore();

    deque<deque<pair<char, int>>> dq;
    vector<pair<char, int>> sortedArr;

    for (int i = 0; i < N; i++) 
    {
        string str;
        getline(cin, str);
        istringstream iss(str);
        string tmp;

        deque<pair<char, int>> tmpQ;
        while (iss >> tmp)
        {
            char space = tmp[0];
            int number = stoi(tmp.substr(2));
            tmpQ.emplace_back(space, number);
            sortedArr.emplace_back(space, number);
        }

        dq.push_back(tmpQ);
    }

    sort(sortedArr.begin(), sortedArr.end(), comparer);
    deque<pair<char, int>> enterQ(sortedArr.begin(), sortedArr.end());

    vector<pair<char, int>> temp;

    while (!enterQ.empty())
    {
        pair<char, int> person = enterQ.front();

        if (!dq.empty() && !dq.front().empty() && dq.front().front() == person)
        {
            enterQ.pop_front();
            dq.front().pop_front();
        }
        else if (!temp.empty() && temp.back() == person) 
        {
            temp.pop_back();
            enterQ.pop_front();
        }
        else 
        {
            if (dq.empty() || dq.front().empty()) break;
            temp.push_back(dq.front().front());
            dq.front().pop_front();
        }

        if (!dq.empty() && dq.front().empty()) 
        {
            dq.pop_front();
        }
    }

    cout << (enterQ.empty() ? "GOOD" : "BAD") << "\n";
    return 0;
}
