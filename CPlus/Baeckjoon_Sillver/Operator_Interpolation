#include <iostream>
#include <vector>
#include <climits>
using namespace std;

int N;  // 숫자의 개수
vector<int> operands;  // 입력된 숫자들을 저장할 vector
int operators[4];  // 덧셈, 뺄셈, 곱셈, 나눗셈 연산자 개수 배열
int minValue = INT_MAX;  // 최소값을 저장하는 변수
int maxValue = INT_MIN;  // 최대값을 저장하는 변수

void Solution(int num, int idx);

int main()
{
    cin >> N;

    operands.resize(N);  // 입력된 숫자의 개수에 맞게 vector 크기를 조정

    for (int i = 0; i < N; i++)
    {
        cin >> operands[i];  // 각 숫자를 입력받아 vector에 저장
    }

    for (int i = 0; i < 4; i++)
    {
        cin >> operators[i];  // 덧셈, 뺄셈, 곱셈, 나눗셈 연산자 개수를 입력받아 배열에 저장
    }

    Solution(operands[0], 1);  // 첫 번째 숫자부터 시작하여 연산을 수행

    cout << maxValue << endl;  // 최대값 출력
    cout << minValue << endl;  // 최소값 출력
}

// 현재 숫자와 연산자 인덱스를 매개변수로 받아 최대값과 최소값을 갱신하는 함수
void Solution(int num, int idx)
{
    if (idx == N)
    {
        if (num > maxValue)
            maxValue = num;
        if (num < minValue)
            minValue = num;
        return;
    }

    // 덧셈, 뺄셈, 곱셈, 나눗셈 연산자를 순서대로 검사
    for (int i = 0; i < 4; i++)
    {
        if (operators[i] > 0)
        {
            operators[i]--;  // 해당 연산자를 하나 사용하였으므로 개수를 감소

            // 연산자에 따라 다음 숫자를 계산하여 재귀 호출
            if (i == 0)
                Solution(num + operands[idx], idx + 1);  // 덧셈
            else if (i == 1)
                Solution(num - operands[idx], idx + 1);  // 뺄셈
            else if (i == 2)
                Solution(num * operands[idx], idx + 1);  // 곱셈
            else
                Solution(num / operands[idx], idx + 1);  // 나눗셈

            operators[i]++;  // 재귀 호출이 끝나면 다시 해당 연산자 개수를 복구
        }
    }

    return;
}