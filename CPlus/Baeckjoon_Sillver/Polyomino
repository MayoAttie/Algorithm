#include <iostream>
#include <string>
#include <vector>
using namespace std;

bool canCoverAAAA(string& board, int index);
bool canCoverBB(string& board, int index);

int main() 
{
    string board;
    cin >> board;
    vector<string> answer; // 답을 저장할 벡터

    int n = board.length();

    for (int i = 0; i < n; i++) 
    {
        if (board[i] == 'X') 
        {
            if (i + 3 < n && canCoverAAAA(board, i)) 
            {
                answer.push_back("AAAA"); // 'AAAA'로 덮음
                i += 3; // 인덱스를 3만큼 증가하여 'AAAA' 부분을 건너뜀
            }
            else if (i + 1 < n && canCoverBB(board, i)) 
            {
                answer.push_back("BB"); // 'BB'로 덮음
                i += 1; // 인덱스를 1만큼 증가하여 'BB' 부분을 건너뜀
            }
            else 
            {
                cout << -1 << endl; // 덮을 수 없는 경우 -1 출력
                return 0;
            }
        }
        else 
        {
            answer.push_back("."); // 'X'가 아니면 그대로 출력
        }
    }

    for (int i = 0; i < answer.size(); i++)
    {
        cout << answer[i]; // 결과 출력
    }
    return 0;
}

// 폴리오미노 'AAAA'로 덮을 수 있는지 확인하는 함수
bool canCoverAAAA(string& board, int index)
{
    for (int i = 0; i < 4; i++) {
        if (board[index + i] != 'X')
            return false;
    }
    return true;
}

// 폴리오미노 'BB'로 덮을 수 있는지 확인하는 함수
bool canCoverBB(string& board, int index) 
{
    for (int i = 0; i < 2; i++)
    {
        if (board[index + i] != 'X')
            return false;
    }
    return true;
}