#include <iostream>
#include <vector>
using namespace std;

vector<vector<pair<int, int>>> graph;

long long DFS(int node, int parent)
{
    long long maxDist = 0;
    for (auto next : graph[node]) 
    {
        long long nextNode = next.first;
        long long dist = next.second;

        if (nextNode != parent)
        {
            long long afterDist = dist + DFS(nextNode, node);
            maxDist = max(maxDist, afterDist);
        }
    }
    return maxDist;
}

int main() 
{
    int N;
    cin >> N;
    graph.resize(N);

    for (int i = 0; i < N - 1; i++) 
    {
        int A, B, C;
        cin >> A >> B >> C;
        graph[A - 1].push_back({ B - 1, C });
        graph[B - 1].push_back({ A - 1, C });
    }

    long long result = DFS(0, -1);
    cout << result << endl;

    return 0;
}