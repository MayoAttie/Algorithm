#include <iostream>
#include <vector>

using namespace std;

vector<int> parent; // 부모 노드를 저장하는 배열
vector<int> nodes;  // 각 선수가 가리키는 다른 선수의 번호를 저장하는 배열

// 특정 원소 a가 속한 집합을 찾는 함수
int Find(int a) 
{
    if (parent[a] == a) // 자기 자신이 루트 노드인 경우
        return a;
    else
        return parent[a] = Find(parent[a]); // 경로 압축(Path Compression)을 통해 루트 노드를 찾음
}

// 두 원소가 속한 집합을 합치는 함수
void UnionFunc(int a, int b) 
{
    a = Find(a); // a의 루트 노드를 찾음
    b = Find(b); // b의 루트 노드를 찾음

    if (a != b) // a와 b가 다른 집합에 속한 경우
        parent[b] = a; // b의 루트를 a로 설정하여 두 집합을 합침

}

int main() 
{
    int n;
    cin >> n; // 테스트 케이스 개수 입력

    for (int i = 0; i < n; i++) 
    {
        int player;
        cin >> player; // 선수 수 입력
        nodes = vector<int>(player + 1, 0); // 가리키는 정보 테이블 초기화
        parent = vector<int>(player + 1, 0); // 부모 테이블 초기화
        
        for (int j = 1; j <= player; j++) 
        {
            cin >> nodes[j]; // 각 선수가 가리키는 다른 선수의 번호 입력
        }

        for (int j = 1; j <= player; j++) 
        {
            parent[j] = j; // 부모 테이블을 자기 자신으로 초기화
        }

        bool cycle = false; // 사이클 여부를 나타내는 변수
        int check_index = 1; // 검사를 시작하는 인덱스
        int result = 1; // 결과값을 저장하는 변수

        while (nodes[check_index] != player) 
        {  
            if (Find(check_index) == Find(nodes[check_index])) 
            { 
                cycle = true; // 사이클이 발생한 경우
                break;
            }
            else 
            {
                result += 1; // 다음 선수로 이동하면서 결과값을 증가
                UnionFunc(check_index, nodes[check_index]); // 두 선수를 같은 집합으로 합침
                check_index = nodes[check_index]; // 다음 선수로 이동
            }
        }

        if (cycle) 
            cout << 0 << endl; // 사이클이 발생한 경우 0 출력
        else 
            cout << result << endl; // 사이클이 발생하지 않은 경우 결과값 출력
    }

    return 0;
}