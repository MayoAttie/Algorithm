#include <iostream>
#include <map>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

#define ll long long

int n, m, k;
vector<vector<pair<int,int>>> graph;
vector<priority_queue<int>> dist;

void djikstra(int start)
{
    priority_queue<pair<int, int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
    dist[start].push(0);
    pq.push({ 0, start });

    while (!pq.empty())
    {
        int curNode = pq.top().second;
        int curDist = pq.top().first;
        pq.pop();

        for (auto& next : graph[curNode])
        {
            int nNode = next.first;
            int nCost = next.second + curDist;

            if (dist[nNode].size() < k)
            {
                dist[nNode].push(nCost);
                pq.emplace(nCost, nNode);
            }
            else if (dist[nNode].top() > nCost)
            {
                dist[nNode].pop();
                dist[nNode].push(nCost);
                pq.emplace(nCost, nNode);
            }
        }
    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    cin >> n >> m >> k;

    graph.resize(n + 1);
    dist.resize(n + 1);

    for (int i = 0; i < m; i++)
    {
        int a, b, c;
        cin >> a >> b >> c;

        graph[a].emplace_back(b, c);
    }

    djikstra(1);

    for (int i = 1; i <= n; i++)
    {
        if (dist[i].size() < k)
            cout << -1 << '\n';
        else
            cout << dist[i].top() << '\n';
    }



    return 0;
}