#include <iostream>
#include <algorithm>
#include <vector>
#include <stack>

using namespace std;

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);

	while (true)
	{
		int n;
		cin >> n;
		if (n == 0)
			break;

		vector<int> arr(n + 1);
		for (int i = 1; i <= n; i++)
		{
			cin >> arr[i];
		}

		stack<pair<int, int>> stk;
		long long result = 0; 

		for (int i = 1; i <= n; i++)
		{
			while (!stk.empty() && stk.top().second > arr[i])
			{
				pair<int, int> top = stk.top();
				stk.pop();

				int width = (stk.empty() ? i - 1 : i - stk.top().first - 1);
				result = max(result, static_cast<long long>(top.second) * width);
			}
			stk.push({ i, arr[i] });
		}

		while (!stk.empty())
		{
			pair<int, int> top = stk.top();
			stk.pop();
			int width = (stk.empty() ? n : n - stk.top().first);
			result = max(result, static_cast<long long>(top.second) * width); 
		}

		cout << result << '\n';
	}

	return 0;
}