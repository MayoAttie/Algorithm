#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

// 행성 구조체
struct Planet
{
    int x, y, z, index; // x, y, z 좌표 및 인덱스
};

// 간선 구조체
struct Edge
{
    int cost, node; // 비용과 도착 노드
    bool operator>(const Edge& other) const // 우선순위 큐에서 오름차순 정렬을 위한 연산자 오버로딩
    {
        return cost > other.cost;
    }
};

int N; 
vector<vector<pair<int, int>>> arr; // 인접 리스트 형태의 그래프

void prim(int start) 
{
    long long result = 0;                                   // 결과 값 초기화
    priority_queue<Edge, vector<Edge>, greater<Edge>> pq;   // 우선순위 큐 선언
    vector<bool> visited(N, false);                         // 방문 여부를 저장하는 배열
    int count = 0;                                          // 처리한 노드의 개수

    pq.push({ 0, start });                                  // 시작 노드를 우선순위 큐에 삽입
    while (!pq.empty())                                     // 우선순위 큐가 비어있지 않은 동안 반복
    {
        if (count == N) break;                              // 모든 노드를 처리했으면 종료

        Edge tmp = pq.top();                                // 우선순위 큐에서 가장 작은 비용을 가진 간선을 꺼냄
        pq.pop();
        int cost = tmp.cost;                                // 꺼낸 간선의 비용
        int node = tmp.node;                                // 꺼낸 간선의 도착 노드

        if (!visited[node])                                 // 해당 노드를 방문하지 않았다면
        {
            count++;                                        // 노드 개수 증가
            result += cost;                                 // 결과에 비용 추가
            visited[node] = true;                           // 노드를 방문했다고 표시

                                                            // 현재 노드와 연결된 간선들에 대해 처리
            for (const pair<int, int>& edge : arr[node])
            {
                int ncost = edge.first;                     // 연결된 노드로 가는 비용
                int nnode = edge.second;                    // 연결된 노드

                pq.push({ ncost, nnode });                  // 연결된 노드와의 간선을 우선순위 큐에 삽입
            }
        }
    }

    cout << result << endl;
}

int main() 
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    cin >> N; // 행성의 개수 입력

    vector<Planet> planets(N); // 행성들을 저장할 벡터 선언
    for (int i = 0; i < N; ++i) // 각 행성의 좌표와 인덱스를 입력받음
    {
        cin >> planets[i].x >> planets[i].y >> planets[i].z;
        planets[i].index = i;
    }

    vector<Planet> planets_x = planets; // x 좌표에 대해 정렬할 벡터
    vector<Planet> planets_y = planets; // y 좌표에 대해 정렬할 벡터
    vector<Planet> planets_z = planets; // z 좌표에 대해 정렬할 벡터

    // 각 좌표에 대해 정렬
    sort(planets_x.begin(), planets_x.end(), [](const auto& a, const auto& b) {
        return a.x < b.x;
        });
    sort(planets_y.begin(), planets_y.end(), [](const auto& a, const auto& b) {
        return a.y < b.y;
        });
    sort(planets_z.begin(), planets_z.end(), [](const auto& a, const auto& b) {
        return a.z < b.z;
        });

    // 각 행성 간의 비용 계산 및 인접 리스트 생성
    arr.resize(N);
    for (int i = 1; i < N; ++i)
    {
        int cost;

        // x 좌표에 대해 연결된 행성 간의 비용 계산 및 인접 리스트 갱신
        cost = min({ abs(planets_x[i - 1].x - planets_x[i].x), abs(planets_x[i - 1].y - planets_x[i].y), abs(planets_x[i - 1].z - planets_x[i].z) });
        arr[planets_x[i - 1].index].push_back({ cost, planets_x[i].index });
        arr[planets_x[i].index].push_back({ cost, planets_x[i - 1].index });

        // y 좌표에 대해 연결된 행성 간의 비용 계산 및 인접 리스트 갱신
        cost = min({ abs(planets_y[i - 1].x - planets_y[i].x), abs(planets_y[i - 1].y - planets_y[i].y), abs(planets_y[i - 1].z - planets_y[i].z) });
        arr[planets_y[i - 1].index].push_back({ cost, planets_y[i].index });
        arr[planets_y[i].index].push_back({ cost, planets_y[i - 1].index });

        // z 좌표에 대해 연결된 행성 간의 비용 계산 및 인접 리스트 갱신
        cost = min({ abs(planets_z[i - 1].x - planets_z[i].x), abs(planets_z[i - 1].y - planets_z[i].y), abs(planets_z[i - 1].z - planets_z[i].z) });
        arr[planets_z[i - 1].index].push_back({ cost, planets_z[i].index });
        arr[planets_z[i].index].push_back({ cost, planets_z[i - 1].index });
    }

    prim(0); // 최소 스패닝 트리를 찾는 함수 호출

    return 0; // 프로그램 종료
}