#include <string>
#include <vector>
#include <algorithm>	
using namespace std;

string solution(string a, string b)
{
    string answer;

    if (a.size() > b.size())
    {
        while (a.size() != b.size())
            b = '0' + b;
    }
    else
    {
        while (a.size() != b.size())
            a = '0' + a;
    }

    int sum = 0;
    int carry = 0;

    for (int i = a.size() - 1; i >= 0; i--)
    {
        sum = (a[i] - '0') + (b[i] - '0') + carry;
        if (sum >= 10)
        {
            sum -= 10;
            carry = 1;
        }
        else
            carry = 0;

        answer = to_string(sum) + answer;
    }

    if (carry == 1)
        answer = '1' + answer;

    return answer;
}




#include <string>
#include <vector>
#include <boost/multiprecision/cpp_int.hpp>

using namespace std;
using namespace boost::multiprecision;

string solution(string a, string b)
{
    cpp_int sum = cpp_int(a) + cpp_int(b);
    return sum.str();
}