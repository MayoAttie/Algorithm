#include <string>
#include <vector>
#include <queue>
using namespace std;

vector<int> edge[100001];

// 너비 우선 탐색(BFS)을 통해 최단 거리를 구하는 함수
int bfs(int start, int n, int destination)
{
    int current, next;
    vector<int> visited(n + 1, -1); // 방문 여부 및 거리를 저장하는 배열
    queue<int> que;
    
    visited[start] = 0; // 시작 노드의 거리는 0으로 설정
    que.push(start);
    
    while (!que.empty())
    {
        current = que.front();
        que.pop();
        for (int i = 0; i < edge[current].size(); i++)
        {
            next = edge[current][i];
            if (visited[next] > -1) // 이미 방문한 노드인 경우 건너뜀
                continue;
            
            que.push(next);
            visited[next] = visited[current] + 1; // 이전 노드의 거리에 1을 더해 현재 노드의 거리 설정
        }
    }
    
    return visited[destination]; // 목적지까지의 거리 반환
}

vector<int> solution(int n, vector<vector<int>> roads, vector<int> sources, int destination) {
    vector<int> answer;

    // 각 도시의 인접한 도시들을 저장하기 위한 그래프(edge) 생성
    for (int i = 0; i < roads.size(); i++)
    {
        int start = roads[i][0];
        int end = roads[i][1];
        
        edge[start].push_back(end);
        edge[end].push_back(start);
    }
    
    // 각 출발지로부터 목적지까지의 최단 거리를 계산하여 결과(answer)에 저장
    for (int i = 0; i < sources.size(); i++)
    {
        answer.push_back(bfs(sources[i], n, destination));
    }
    
    return answer;
}
