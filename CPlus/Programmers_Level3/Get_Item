#include <string>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

class ItemGet
{
    struct node
    {
        int x;
        int y;
        int dist;
    };
    
    vector<vector<int>> graph;
    vector<vector<bool>> visited;
    pair<int,int> itemPos;
    pair<int,int> characPos;
    int dx[4] = {1,0,-1,0};
    int dy[4] = {0,1,0,-1};
    
public:
    ItemGet(vector<vector<int>> rectangle, int characX, int characY, int itemX, int itemY)
    {
        itemPos.first = itemX * 2;
        itemPos.second = itemY * 2;
        characPos.first = characX * 2;
        characPos.second = characY * 2;
        
        visited.resize(102, vector<bool>(102, false));
        graph.resize(102,vector<int>(102,-1));
        for(auto& vec : rectangle)
        {
            int x1 = vec[0] * 2;
            int y1 = vec[1] * 2;
            int x2 = vec[2] * 2;
            int y2 = vec[3] * 2;
            
            for(int i=x1; i<=x2; i++)
            {
                for(int j=y1; j<= y2; j++)
                {
                    if(i > x1 && i < x2 && j > y1 && j < y2)
                        graph[i][j] = 0;
                    else if(graph[i][j] != 0)
                        graph[i][j] = 1;
                }
            }
        }
    }
    int solve()
    {
        return bfs()/2;
    }
private:
    int bfs()
    {
        queue<node> que;
        que.push({characPos.first, characPos.second, 0});
        visited[characPos.first][characPos.second] = true;
        
        while(!que.empty())
        {
            int curX = que.front().x;
            int curY = que.front().y;
            int curDist = que.front().dist;
            que.pop();
            
            if(curX == itemPos.first && curY == itemPos.second)
            {
                return curDist;
            }
            
            for(int i=0; i<4; i++)
            {
                int nx = curX + dx[i];
                int ny = curY + dy[i];
                if(graph[nx][ny] == 1 && !visited[nx][ny])
                {
                    que.push({nx,ny,curDist+1});
                    visited[nx][ny] = true;
                }
            }
        }
        return -1;
    }
};

int solution(vector<vector<int>> rectangle, int characterX, int characterY, int itemX, int itemY) 
{
    int answer = 0;
    ItemGet func(rectangle, characterX,characterY,itemX,itemY);
    answer = func.solve();
    return answer;
}