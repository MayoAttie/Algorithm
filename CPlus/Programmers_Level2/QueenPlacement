#include <string>
#include <vector>

using namespace std;

bool isValid(const vector<int>& board, int row, int col) 
{
    // 같은 열에 퀸이 있는지 확인
    for (int i = 0; i < row; i++) 
    {
        if (board[i] == col)
            return false;

        // 대각선에 퀸이 있는지 확인
        if (abs(board[i] - col) == abs(row - i))
            return false;
    }
    return true;
}

int backtrack(vector<int>& board, int row, int n) 
{
    int count = 0;

    if (row == n) 
        return 1;  // 모든 행에 퀸을 배치한 경우 1을 반환 (해를 찾은 경우)

    for (int col = 0; col < n; col++) 
    {
        if (isValid(board, row, col)) 
        {
            board[row] = col;  // 현재 행의 퀸을 해당 열에 배치
            count += backtrack(board, row + 1, n);  // 다음 행으로 재귀적으로 호출하여 탐색
            board[row] = -1;  // 백트래킹을 위해 퀸의 위치를 초기화
        }
    }

    return count;  // 가능한 경우의 수 반환
}

int solution(int n) {
    vector<int> board(n, -1);  // 퀸의 위치를 저장할 벡터 초기화
    return backtrack(board, 0, n);  // 백트래킹 알고리즘 수행
}