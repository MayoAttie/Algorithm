#include <string>
#include <vector>
#include <unordered_map>
using namespace std;

int solution(vector<string> want, vector<int> number, vector<string> discount) {
    int answer = 0;
    int days = 10;

    unordered_map<string, int> map;

    // 주어진 'want' 배열과 'number' 배열을 맵에 저장
    for (int i = 0; i < want.size(); i++) 
    {
        map[want[i]] = number[i];
    }

    // 할인 배열을 순회
    for (int i = 0; i < discount.size() - days + 1; i++) 
    {
        unordered_map<string, int> currMap;
        bool isIdentical = true;
        
        // 현재 처리 중인 할인 배열의 각 요소를 카운트하여 'currMap'에 저장
        for (int j = 0; j < days; j++) 
        {
            currMap[discount[i + j]] = currMap[discount[i + j]] + 1;
        }

        // 'map'과 'currMap'을 비교하여 모든 키에 대해 값이 동일한지 확인
        for (const auto& pair : map) 
        {
            const string& key = pair.first;
            int value = pair.second;

            if (value != currMap[key]) 
            {
                isIdentical = false;
                break;
            }
        }

        // 동일한 경우 'answer'를 증가
        answer += isIdentical ? 1 : 0;
    }

    return answer;
}