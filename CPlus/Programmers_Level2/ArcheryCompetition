#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
#include <map>
using namespace std;

int maxDiff;
vector<int> answer(1, -1);

bool CheckSize(vector<int>& A)
{
    for (int i = 10; i >= 0; i--)
    {
        if (A[i] > answer[i])
            return true;
        else if (A[i] < answer[i])
            return false;
    }
}

void Exhaustive(int idx, int n, vector<int>& A, vector<int>& B) 
{
    if (idx == 11 || n == 0) 
    {
        A[10] += n;

        int aScore = 0;
        int bScore = 0;
        for (int i = 0; i < 11; i++)
        {
            if (A[i] > B[i])
                aScore += 10 - i;
            else if (B[i] > 0)
                bScore += 10 - i;
        }

        int diff = aScore - bScore;
        if (diff > 0 && diff >= maxDiff)
        {
            if (maxDiff == diff && !CheckSize(A))
                return;

            maxDiff = diff;
            answer = A;
        }


        A[10] -= n;
        return;
    }

    if (B[idx] < n) 
    {
        A[idx] += B[idx] + 1;
        Exhaustive(idx + 1, n - B[idx] - 1, A, B);
        A[idx] -= B[idx] + 1;
    }

    Exhaustive(idx + 1, n, A, B);
}

vector<int> solution(int n, vector<int> info) 
{
    vector<int> A(11, 0);
    Exhaustive(0, n, A, info);

    return answer;
}