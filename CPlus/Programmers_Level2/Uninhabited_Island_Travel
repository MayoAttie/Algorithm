#include <string>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

int BFS(int startRow, int startCol, const vector<string>& maps, vector<vector<bool>>& visited) {
    int rows = maps.size();
    int cols = maps[0].size();

    // 방향 벡터 (상, 하, 좌, 우)
    vector<int> directionRow = {-1, 1, 0, 0};
    vector<int> directionCol = {0, 0, -1, 1};

    int days = 0; // 머무를 수 있는 일수

    // 큐를 사용하여 BFS 탐색 수행
    queue<pair<int, int>> que;
    que.push({startRow, startCol});
    visited[startRow][startCol] = true;

    while (!que.empty())
    {
        int currRow = que.front().first;
        int currCol = que.front().second;
        que.pop();

        // 현재 위치에서 식량 값 누적
        days += maps[currRow][currCol] - '0';

        // 상하좌우 탐색
        for (int k = 0; k < 4; k++) {
            int nextRow = currRow + directionRow[k];
            int nextCol = currCol + directionCol[k];

            // 범위 체크 및 방문 여부 체크
            if (nextRow >= 0 && nextRow < rows && nextCol >= 0 && nextCol < cols && !visited[nextRow][nextCol] &&
                maps[nextRow][nextCol] != 'X') {
                que.push({nextRow, nextCol});
                visited[nextRow][nextCol] = true;
            }
        }
    }

    return days;
}

vector<int> solution(vector<string> maps) {
    vector<int> answer;
    int rows = maps.size();
    int cols = maps[0].size();
    vector<vector<bool>> visited(rows, vector<bool>(cols, false));
    
    for(int i=0; i< rows; i++)
    {
        for(int j=0; j<cols; j++)
        {
            if (visited[i][j] == false && maps[i][j] != 'X') {
                int maxDays = BFS(i, j, maps, visited);
                answer.push_back(maxDays);
            }
        }
    }

    if(answer.size() <=0)
        answer.push_back(-1);
    else
        sort(answer.begin(), answer.end());
    
    return answer;
}