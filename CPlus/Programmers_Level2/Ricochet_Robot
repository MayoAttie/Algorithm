#include <string>
#include <vector>
#include <queue>
using namespace std;

struct Node
{
    int x, y, level;
};

int solution(vector<string> board) {
    int answer = -1;
    int n = board.size();
    int m = board[0].size();

    vector<pair<int, int>> direction = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    int sx, sy, tx, ty;

    // 시작 위치와 목표 위치 찾기
    for (int x = 0; x < n; x++) 
    {
        for (int y = 0; y < m; y++) 
        {
            if (board[x][y] == 'R') 
            {
                sx = x;
                sy = y;
            } 
            else if (board[x][y] == 'G') 
            {
                tx = x;
                ty = y;
            }
        }
    }

    vector<vector<bool>> visited(n, vector<bool>(m, false));
    queue<Node> q;

    q.push({sx, sy, 0});

    while (!q.empty()) 
    {
        int x = q.front().x;
        int y = q.front().y;
        int level = q.front().level;
        q.pop();

        if (board[x][y] == 'G')
        {
            answer = level;
            break;
        }

        // 한 방향으로 미끄러져 이동
        for (auto& dir : direction)
        {
            int dx = dir.first;
            int dy = dir.second;
            int scope = 1;

            while (true) 
            {
                int nx = x + dx * scope;
                int ny = y + dy * scope;

                // 경계를 벗어나거나 목표 지점인 'D'에 도달한 경우
                if (nx < 0 || nx >= n || ny < 0 || ny >= m || board[nx][ny] == 'D')
                {
                    // 방문하지 않은 새로운 위치인 경우 큐에 추가
                    if (!visited[nx - dx][ny - dy])
                    {
                        visited[nx - dx][ny - dy] = true;
                        q.push({nx - dx, ny - dy, level + 1});
                    }
                    break;
                }

                scope++;
            }
        }
    }

    return answer;
}
