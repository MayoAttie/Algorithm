#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

const int INF = 987654321;
int n, d, c;

void dijkstra(vector<vector<pair<int, int>>>& graph)
{
	vector<int> dp(n+1, INF);

	dp[c] = 0;
	priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>>pq;

	pq.push({ 0,c });

	while (!pq.empty())
	{
		int curNode = pq.top().second;
		int curTime = pq.top().first;
		pq.pop();

		if (dp[curNode] < curTime)
			continue;

		for (int i = 0; i < graph[curNode].size(); i++)
		{
			int nextNode = graph[curNode][i].first;
			int nextTime = graph[curNode][i].second;

			if (nextTime + curTime < dp[nextNode])
			{
				dp[nextNode] = nextTime + curTime;
				pq.push({ nextTime + curTime, nextNode });
			}
		}
	}

	int cnt = 0;
	int result = 0;
	for (int i = 1; i <= n; i++)
	{
		if (dp[i] != INF)
		{
			cnt++;
			result = max(result, dp[i]);
		}
	}
	cout << cnt << ' ' << result << '\n';
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int T;
	cin >> T;

	while (T--)
	{
		cin >> n >> d >> c;
		vector<vector<pair<int, int>>> graph(n+1);
		for (int i = 0; i < d; i++)
		{
			int a, b, s;
			cin >> a >> b >> s;
			graph[b].push_back({ a,s });
		}
		dijkstra(graph);
	}
}