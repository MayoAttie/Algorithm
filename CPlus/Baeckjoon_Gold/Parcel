#include <iostream>
#include <vector>
#include <cmath>
#include <queue>
#include <tuple>
#include <climits>
using namespace std;

const int INF = INT_MAX;
vector<vector<tuple<int, int, int>>> graph;
vector<vector<int>> matrix;

void Dijkstra(int start, int N)
{
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> que;
    que.emplace(0, start);
    vector<int> dist(N + 1, INF);
    vector<int> chart(N + 1, 0);
    dist[start] = 0;

    while (!que.empty())
    {
        int curNode = que.top().second;
        int curCost = que.top().first;
        que.pop();

        if (dist[curNode] < curCost)
            continue;

        for (const auto& edge : graph[curNode])
        {
            int nextCost, nextNode, now;
            tie(nextCost, nextNode, now) = edge;

            nextCost = nextCost + curCost;
            if (nextCost < dist[nextNode])
            {
                dist[nextNode] = nextCost;
                chart[nextNode] = now;
                que.emplace(nextCost, nextNode);
            }
        }
    }

    matrix[start] = chart;
}
int main() 
{
    int N, M;
    cin >> N >> M;

    graph.resize(N + 1);
    for (int i = 0; i < M; i++) 
    {
        int a, b, c;
        cin >> a >> b >> c;
        graph[a].emplace_back(c, b, a);
        graph[b].emplace_back(c, a, b);
    }

    matrix.resize(N + 1, vector<int>(N + 1, 0));

    for (int j = 1; j <= N; j++) 
    {
        Dijkstra(j, N);
    }

    for (int i = 1; i <= N; i++) 
    {
        for (int j = 1; j <= N; j++) 
        {
            if (i == j) 
                cout << "- ";
            else 
                cout << matrix[j][i] << " ";
        }
        cout << '\n';
    }

    return 0;
}