#include <iostream>
#include <vector>
#include <algorithm>
#include <array>
using namespace std;

vector<bool>visited;

class Node
{
public:
	int val;
	Node* left;
	Node* right;
	Node(int value) : val(value), left(nullptr), right(nullptr) {}
};

Node* getTree(vector<int>& pre, vector<int>& in, int preStart, int preEnd, int inStart, int inEnd)
{
	if (preStart > preEnd || inStart > inEnd) 
		return nullptr;
	
	int rootValue = pre[preStart];
	Node* root = new Node(rootValue);

	int rootIdx = find(in.begin() + inStart, in.begin() + inEnd + 1, rootValue) - in.begin();
	int leftSub = rootIdx - inStart;

	root->left = getTree(pre, in, preStart +1, preStart + leftSub, inStart, rootIdx - 1);
	root->right = getTree(pre, in, preStart + leftSub, preEnd, rootIdx + 1, inEnd);
	
	return root;
}

void PrintPost(Node* node)
{
	if (!node) 
		return;
	PrintPost(node->left);
	PrintPost(node->right);
	if (!visited[node->val-1])
	{
		cout << node->val << " ";
		visited[node->val-1] = true;
	}
}

void DeleteTree(Node* node)
{
	if (!node)
		return;
	DeleteTree(node->left);
	DeleteTree(node->right);
	delete node;
}

int main()
{
	int t;
	cin >> t;

	while (t--)
	{
		int n;
		cin >> n;
		visited = vector<bool>(n, false);
		vector<int> pre(n);
		vector<int> in(n);
		for (int i = 0; i < n; i++)
			cin >> pre[i];
		for (int i = 0; i < n; i++)
			cin >> in[i];

		Node* root = getTree(pre, in, 0, n - 1, 0, n - 1);
		
		PrintPost(root);
		cout << '\n';

		DeleteTree(root);
	}
}
