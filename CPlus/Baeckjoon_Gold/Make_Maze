#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

vector<vector<int>> maps;
vector<vector<int>> dist;
int N;
int drX[4] = {1, 0, -1, 0};
int drY[4] = {0, 1, 0, -1};

void BFS(pair<int, int> start, pair<int, int> finish) ;

int main() 
{
    cin >> N;
    maps.resize(N, vector<int>(N));
    dist.resize(N, vector<int>(N, INT_MAX));

    for (int i = 0; i < N; i++) 
    {
        string str;
        cin >> str;
        for (int j = 0; j < N; j++) 
        {
            maps[i][j] = str[j] - '0';
        }
    }

    BFS({0, 0}, {N - 1, N - 1});

    cout << dist[N - 1][N - 1] << endl;
}

void BFS(pair<int, int> start, pair<int, int> finish) 
{
    queue<pair<int, int>> que;
    que.push(start);
    dist[start.first][start.second] = 0;

    while (!que.empty()) 
    {
        pair<int, int> current = que.front();
        que.pop();

        for (int i = 0; i < 4; i++) 
        {
            int nextX = drX[i] + current.first;
            int nextY = drY[i] + current.second;

            if (nextX >= 0 && nextX < N && nextY >= 0 && nextY < N) 
            {
                if (dist[nextX][nextY] > dist[current.first][current.second]) {
                    if (maps[nextX][nextY] == 1)
                        dist[nextX][nextY] = dist[current.first][current.second];
                    else
                        dist[nextX][nextY] = dist[current.first][current.second] + 1;
                    que.push({nextX, nextY});
                }
            }
        }
    }
}