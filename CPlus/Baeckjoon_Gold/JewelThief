#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    int N, K, idx=0;
    cin >> N >> K;

    long long answer = 0;

    vector<pair<int,int>> arr(N);
    vector<int> maxCost(K);

    for (int i = 0; i < N; i++)
    {
        cin >> arr[i].first >> arr[i].second;
    }

    for (int i = 0; i < K; i++)
    {
        cin >> maxCost[i];
    }

    sort(arr.begin(), arr.end());
    sort(maxCost.begin(), maxCost.end());
        
    priority_queue<int> que;
    
    for (int i = 0; i < K; i++)
    {
        while (idx < N && arr[idx].first <= maxCost[i])
        {
            que.push(arr[idx].second);
            idx++;
        }

        if (!que.empty())
        {
            answer += que.top();
            que.pop();
        }
    }

    cout << answer;

	return 0;
}