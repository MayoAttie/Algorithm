#include <iostream>
#include <vector>
#include <queue>
using namespace std;

char map[5][5];
int drX[] = { -1, 1, 0, 0 };
int drY[] = { 0, 0, -1, 1 };
int combX[25];
int combY[25];
int ans = 0;

// 조합 생성 함수
void combination(int comb[], int idx, int depth, int left);
// BFS로 섬을 확인하는 함수
void bfs(int comb[]);

int main() 
{
    for (int i = 0; i < 5; i++) 
    {
        cin >> map[i]; // 5x5 맵 입력
    }

    // 좌표를 미리 계산하여 저장
    for (int i = 0; i < 25; i++) 
    {
        combX[i] = i % 5; // x 좌표 계산
        combY[i] = i / 5; // y 좌표 계산
    }

    int comb[7] = { 0 }; // 조합을 저장할 배열
    combination(comb, 0, 0, 7); // 7개의 좌표로 가능한 모든 조합을 생성
    cout << ans << endl; // 결과 출력

    return 0;
}

// 조합 생성 함수
void combination(int comb[], int idx, int depth, int left) 
{
    if (left == 0) 
    {
        bfs(comb); // 조합이 완성되면 BFS로 검사
        return;
    }

    if (depth == 25) return; // 모든 가능한 경우를 검사

    comb[idx] = depth;
    combination(comb, idx + 1, depth + 1, left - 1);  // 선택한 경우
    combination(comb, idx, depth + 1, left);          // 선택하지 않은 경우
}

// BFS로 섬을 확인하는 함수
void bfs(int comb[]) 
{
    queue<int> q;
    bool visited[7] = { false };

    visited[0] = true;
    q.push(comb[0]);
    int cnt = 1, sCnt = 0; // 연결된 좌표 개수와 'S'의 개수

    while (!q.empty()) 
    {
        int cur = q.front();
        q.pop();
        int x = combX[cur]; // 현재 x 좌표
        int y = combY[cur]; // 현재 y 좌표

        if (map[y][x] == 'S') sCnt++; // 'S' 발견 시 sCnt 증가

        for (int i = 0; i < 4; i++) 
        {
            for (int next = 1; next < 7; next++) 
            {
                if (!visited[next] && x + drX[i] == combX[comb[next]] && y + drY[i] == combY[comb[next]]) 
                {
                    visited[next] = true;
                    q.push(comb[next]);
                    cnt++;
                }
            }
        }
    }

    // 7개 모두 연결되어 있다면
    if (cnt == 7) 
    {
        if (sCnt >= 4) // 'S'의 개수가 4 이상이면
            ans++; // 결과 증가
    }
}