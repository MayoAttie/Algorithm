#include <iostream>
#include <vector>
#include <cmath>
#include <limits.h>
using namespace std;

void setTree(vector<long>& tree, int index);
long getMin(vector<long>& tree, long start, long end);

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int nodeNum;
    int findNum;
    int treeHeight = 0;
    int treeSize = 0;
    int startIndex = 0;
    vector<long> tree;

    cin >> nodeNum >> findNum;  // 노드 수와 찾을 개수 입력
    int length = nodeNum;

    while (length > 0)
    {
        length /= 2;
        treeHeight++;
    }

    treeSize = int(pow(2, treeHeight + 1));  // 트리 크기 계산
    startIndex = (treeSize / 2) - 1;  // 트리에서 첫 번째 노드의 인덱스 계산

    tree.resize(treeSize);
    fill(tree.begin(), tree.end(), LONG_MAX);  // 트리를 LONG_MAX로 초기화

    for (int i = startIndex + 1; i <= startIndex + nodeNum; i++)
    {
        cin >> tree[i];  // 트리의 리프 노드에 값 입력
    }

    setTree(tree, treeSize - 1);  // 트리 구성 함수 호출

    for (int i = 0; i < findNum; i++)
    {
        long start;
        long end;
        cin >> start >> end;  // 찾을 구간의 시작과 끝 입력

        start += startIndex;  // 전체 트리에서의 시작 인덱스로 변환
        end += startIndex;    // 전체 트리에서의 끝 인덱스로 변환
        cout << getMin(tree, start, end) << "\n";  // 최솟값 찾기 함수 호출 및 출력
    }
}

// 트리 구성 함수
void setTree(vector<long>& tree, int index)
{
    while (index != 1)
    {
        if (tree[index / 2] > tree[index])
            tree[index / 2] = tree[index];  // 부모 노드에 자식 노드의 최솟값 저장

        index--;
    }
}

// 최솟값 찾기 함수
long getMin(vector<long>& tree, long start, long end)
{
    long _min = LONG_MAX;

    while (start <= end)
    {
        if (start % 2 == 1)  // 왼쪽 자식 노드가 포함되는 경우
        {
            _min = min(_min, tree[start]);  // 최솟값 업데이트
            start++;
        }
        start /= 2;  // 부모 노드로 이동

        if (end % 2 == 0)  // 오른쪽 자식 노드가 포함되는 경우
        {
            _min = min(_min, tree[end]);  // 최솟값 업데이트
            end--;
        }
        end /= 2;  // 부모 노드로 이동
    }

    return _min;
}