#include <iostream>
#include <vector>
#include <queue>
#include <set>

using namespace std;

vector<vector<int>> arr;

int drX[4] = {1,0,-1,0};
int drY[4] = {0,1,0,-1};

void bfs(int N, int M) 
{
    queue<pair<int, int>> que;
    set<pair<int, int>> visit;
    que.push(make_pair(0, 0));
    visit.insert(make_pair(0, 0));

    while (!que.empty()) 
    {
        int x = que.front().first;
        int y = que.front().second;
        que.pop();

        for(int i=0; i<4; i++)
        {
            int nx = x+ drX[i];
            int ny = y+ drY[i];
            if (0 <= nx && nx < N && 0 <= ny && ny < M &&
             visit.find(make_pair(nx, ny)) == visit.end()) 
             {
                if (arr[nx][ny] == 0) 
                {
                    que.push(make_pair(nx, ny));
                    visit.insert(make_pair(nx, ny));
                }
                else
                    arr[nx][ny] += 1;
            }
        }
    }

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            if (arr[i][j] >= 3) {
                arr[i][j] = 0;
            }
            else if (arr[i][j] == 2) {
                arr[i][j] = 1;
            }
        }
    }
}

int main() 
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int N, M;
    cin >> N >> M;
    arr = vector<vector<int>>(N, vector<int>(M, 0));

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            cin >> arr[i][j];
        }
    }

    int time = 0;

    while (true) {
        int total = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                total += arr[i][j];
            }
        }

        if (total == 0) {
            cout << time;
            break;
        }

        bfs(N, M);

        time += 1;
    }

    return 0;
}