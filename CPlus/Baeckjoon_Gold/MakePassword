#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int L, C;
vector<char> vowels;
vector<char> cons;

void gnerator(vector<char>& arr, int len, int start, string now, vector<string>& results) 
{
    if (now.length() == len)
    {
        results.push_back(now);
        return;
    }
    for (int i = start; i < arr.size(); ++i)
    {
        gnerator(arr, len, i + 1, now + arr[i], results);
    }
}

int main() 
{
    cin >> L >> C;
    vector<char> all_chars(C);
    for (int i = 0; i < C; ++i) 
    {
        cin >> all_chars[i];

        if (all_chars[i] == 'a' || all_chars[i] == 'e' || all_chars[i] == 'i' || all_chars[i] == 'o' || all_chars[i] == 'u') 
            vowels.push_back(all_chars[i]);
        else 
            cons.push_back(all_chars[i]);
    }

    sort(vowels.begin(), vowels.end());
    sort(cons.begin(), cons.end());

    vector<string> answer;

    for (int v = 1; v <= vowels.size(); ++v) 
    {
        for (int c = 2; c <= cons.size(); ++c) 
        {
            if (v + c == L) 
            {
                vector<string> vowArr;
                vector<string> conArr;

                gnerator(vowels, v, 0, "", vowArr);
                gnerator(cons, c, 0, "", conArr);

                for (const string& vc : vowArr) 
                {
                    for (const string& cc : conArr) 
                    {
                        string password = vc + cc;
                        sort(password.begin(), password.end());
                        answer.push_back(password);
                    }
                }
            }
        }
    }

    sort(answer.begin(), answer.end());
    answer.erase(unique(answer.begin(), answer.end()), answer.end());

    for (const string& password : answer) 
        cout << password << '\n';

    return 0;
}