#include <iostream>
#include <vector>
#include <string>
#include <cmath>
using namespace std;

// 최장 공통 부분 수열을 찾는 재귀 함수
// row: 현재 첫 번째 문자열의 인덱스
// col: 현재 두 번째 문자열의 인덱스
// str1: 첫 번째 문자열
// str2: 두 번째 문자열
// dpTable: DP 테이블
// subStr: 찾은 최장 공통 부분 수열을 저장할 벡터
void lcsFunc(int row, int col, const string str1, const string str2, vector<vector<int>>& dpTable, vector<char>& subStr);

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    string str1;
    string str2;
    cin >> str1 >> str2;

    // DP 테이블 초기화
    vector<vector<int>> dpTable(max(str1.size(), str2.size()) + 1, vector<int>(max(str1.size(), str2.size()) + 1));

    // 최장 공통 부분 수열의 길이 계산
    for(int i = 1; i <= str1.size(); i++)
    {
        for(int j = 1; j <= str2.size(); j++)
        {
            if(str1[i-1] == str2[j-1])
                dpTable[i][j] = dpTable[i-1][j-1] + 1;
            else
                dpTable[i][j] = max(dpTable[i-1][j], dpTable[i][j-1]);
        }
    }

    cout << dpTable[str1.size()][str2.size()] << "\n";

    vector<char> subStr;
    lcsFunc(str1.size(), str2.size(), str1, str2, dpTable, subStr);

    // 찾은 최장 공통 부분 수열 출력
    for(int i = subStr.size() - 1; i >= 0; i--)
    {
        cout << subStr[i];
    } 
    cout << "\n";
}

void lcsFunc(int row, int col, const string str1, const string str2, vector<vector<int>>& dpTable, vector<char>& subStr)
{
    // 재귀 종료 조건: 인덱스가 0이 되면 종료
    if(row == 0 || col == 0)
        return;
    
    // 현재 문자가 같은 경우
    if(str1[row-1] == str2[col-1])
    {
        subStr.push_back(str1[row-1]);
        lcsFunc(row-1, col-1, str1, str2, dpTable, subStr);
    }
    else
    {
        // 현재 문자가 다른 경우, DP 테이블을 이용하여 이동 방향 결정
        if(dpTable[row-1][col] > dpTable[row][col-1])
            lcsFunc(row-1, col, str1, str2, dpTable, subStr);
        else
            lcsFunc(row, col-1, str1, str2, dpTable, subStr);
    }
}