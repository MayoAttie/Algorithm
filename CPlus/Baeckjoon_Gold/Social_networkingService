#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
vector<vector<int>> graph;
vector<bool> visited;
vector<vector<int>> dp;

void dfs(int node)
{
	visited[node] = true;
	dp[node][0] = 0;
	dp[node][1] = 1;

	for (int i = 0; i < graph[node].size(); i++)
	{
		int nextNode = graph[node][i];
		
		if (!visited[nextNode])
		{
			dfs(nextNode);

			dp[node][0] += dp[nextNode][1];
			dp[node][1] += min(dp[nextNode][0], dp[nextNode][1]);
		}
	}
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int N;
	cin >> N;
	graph.resize(N + 1);
	visited.resize(N + 1);
	dp.resize(N + 1, vector<int>(2));

	for (int i = 0; i < N; i++)
	{
		int a, b;
		cin >> a >> b;
		graph[a].push_back(b);
		graph[b].push_back(a);
	}

	dfs(1);
	cout << min(dp[1][0], dp[1][1]);
}