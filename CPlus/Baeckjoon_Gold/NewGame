#include <iostream>
#include <algorithm>	
#include <vector>

struct horse
{
	int x, y, dir;
};

using namespace std;
int N, K;
vector<vector<int>> board; // 보드판
vector<horse> horses[11]; // 말들의 정보를 저장하는 배열
vector<int> boardState[14][14]; // 각 좌표에 있는 말들의 정보를 저장하는 배열
int dx[5] = { 0,1,-1,0,0 }; // 이동 방향의 x 좌표 변화량
int dy[5] = { 0,0,0,-1,1 }; // 이동 방향의 y 좌표 변화량

// 방향을 반대로 바꾸는 함수
void Reverse(int& dir)
{
	if (dir == 1)
		dir = 2;
	else if (dir == 2)
		dir = 1;
	else if (dir == 3)
		dir = 4;
	else if (dir == 4)
		dir = 3;
}

// 시뮬레이션 함수
void Simulation()
{
	int cnt = 1; // 시뮬레이션 횟수
	bool flag = false; // 종료 여부를 나타내는 플래그 변수
	while (true)
	{
		if (cnt > 1000) // 1000번 이상 시뮬레이션을 반복해도 종료되지 않을 경우
		{
			cout << -1; // 불가능한 경우이므로 -1 출력
			break;
		}
		for (int i = 1; i <= K; i++) // 모든 말에 대해 반복
		{
			int x = horses[i][0].x; // 현재 말의 x 좌표
			int y = horses[i][0].y; // 현재 말의 y 좌표
			int dir = horses[i][0].dir; // 현재 말의 이동 방향

			vector<int> tmp; // 임시로 말들의 정보를 저장할 벡터
			if (boardState[y][x].size() > 0) // 현재 위치에 말이 있는 경우
			{
				bool found = false;
				for (int j = 0; j < boardState[y][x].size(); j++) // 해당 위치에 있는 모든 말에 대해 반복
				{
					if (!found)
					{
						if (boardState[y][x][j] == i) // 현재 말의 정보를 찾은 경우
						{
							found = true;
							tmp.push_back(boardState[y][x][j]); // 현재 말의 정보를 임시 벡터에 추가
						}
					}
					else
						tmp.push_back(boardState[y][x][j]); // 현재 말의 정보 이후의 말들을 임시 벡터에 추가
				}
			}

			if (tmp.size() != boardState[y][x].size()) // 현재 위치에 있는 말의 수와 임시 벡터의 크기가 다른 경우
				continue; // 이동 불가능한 경우이므로 다음 말을 처리

			int nx = x + dx[dir]; // 이동한 후의 x 좌표
			int ny = y + dy[dir]; // 이동한 후의 y 좌표
			int state = board[ny][nx]; // 이동한 후의 상태(빈 칸, 빨간색, 파란색)

			if (state == 2) // 파란색인 경우
			{
				int nDir = dir;
				Reverse(nDir); // 이동 방향을 반대로 바꾸어 줌
				nx = x + dx[nDir]; // 반대 방향으로 한 칸 이동한 후의 x 좌표
				ny = y + dy[nDir]; // 반대 방향으로 한 칸 이동한 후의 y 좌표
				horses[i][0].dir = nDir; // 말의 이동 방향을 업데이트

				if (board[ny][nx] == 2) // 반대 방향으로 한 칸 이동한 후에도 파란색인 경우
					continue; // 이동 불가능한 경우이므로 다음 말을 처리
				else
					state = board[ny][nx]; // 반대 방향으로 한 칸 이동한 후의 상태 업데이트
			}
			for (int j = 0; j < tmp.size(); j++) // 현재 위치에 있는 말들의 정보를 삭제
				boardState[y][x].pop_back();

			if (state == 1) // 빨간색인 경우
				reverse(tmp.begin(), tmp.end()); // 말들의 순서를 반대로 바꿈

			for (int j = 0; j < tmp.size(); j++) // 말들을 이동한 위치에 추가
			{
				int curIdx = tmp[j];
				boardState[ny][nx].push_back(curIdx); // 말의 정보를 추가
				horses[curIdx][0].x = nx; // 말의 x 좌표 업데이트
				horses[curIdx][0].y = ny; // 말의 y 좌표 업데이트
			}
			if (boardState[ny][nx].size() > 3) // 이동한 위치에 말이 4개 이상인 경우
			{
				flag = true; // 종료 플래그를 true로 설정
				break; // 반복문 종료
			}
		}
		if (flag) // 종료 플래그가 true인 경우
			break; // 반복문 종료

		cnt++; // 시뮬레이션 횟수 증가
	}
	if (flag) // 종료 플래그가 true인 경우
		cout << cnt; // 결과 출력
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);

	cin >> N >> K; // 보드판 크기와 말의 개수 입력

	board.assign(N + 2, vector<int>(N + 2, 2)); // 보드판 초기화

	for (int i = 1; i <= N; i++) // 보드판 상태 입력
	{
		for (int j = 1; j <= N; j++)
		{
			cin >> board[i][j];
		}
	}

	int x, y, d;
	for (int i = 1; i <= K; i++) // 말의 정보 입력
	{
		cin >> y >> x >> d;
		horses[i].push_back({ x,y,d }); // 말의 정보를 배열에 추가
		boardState[y][x].push_back(i); // 말의 위치를 배열에 추가
	}

	Simulation(); // 시뮬레이션 실행
}