#include <iostream>
#include <vector>
#include <deque>
#include <algorithm>
#include <string>
using namespace std;

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int tCase;
    cin >> tCase;

    while (tCase--)
    {
        string p, x;
        int n;
        cin >> p >> n >> x;

        deque<int> dq;

        bool isError = false;
        bool isFront = true;

        string str = "";

        for (int i = 1; i < x.size(); i++)
        {
            if (x[i] == ',' || x[i] == ']')
            {
                if (str != "")
                    dq.push_back(stoi(str));
                str = "";
            }
            else
                str += x[i];
        }

        for (int i = 0; i < p.size(); i++)
        {
            if (p[i] == 'R')
                isFront = !isFront;
            else if (p[i] == 'D')
            {
                if (dq.empty())
                {
                    isError = true;
                    break;
                }
                else
                {
                    if (isFront)
                        dq.pop_front();
                    else
                        dq.pop_back();
                }
            }
        }
        if (isError)
            cout << "error" << '\n';
        else
        {
            if (!isFront)
                reverse(dq.begin(), dq.end());
            cout << "[";
            if (!dq.empty()) 
            {
                cout << dq.front();
                dq.pop_front(); 
                while (!dq.empty())
                {
                    cout << "," << dq.front(); 
                    dq.pop_front(); 
                }
            }
            cout << "]\n"; 
        }
    }
}