#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <string>
using namespace std;

int n, m;
vector<int> parent;
vector<vector<int>> tree;
vector<int> scoreTable;

void dfs(int idx)
{
    for (int i : tree[idx])
    {
        scoreTable[i] += scoreTable[idx]; 
        dfs(i); 
    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> n >> m;
    parent.resize(n + 1);
    tree.resize(n + 1);
    scoreTable.resize(n + 1, 0);

    for (int i = 1; i <= n; i++)
    {
        cin >> parent[i];
        if (parent[i] != -1)
        {
            tree[parent[i]].push_back(i);
        }
    }

    for (int t = 0; t < m; t++)
    {
        int idx, score;
        cin >> idx >> score;
        scoreTable[idx] += score; 
    }

    dfs(1);

    for (int i = 1; i <= n; i++)
    {
        cout << scoreTable[i] << ' ';
    }
    cout << '\n';

    return 0;
}