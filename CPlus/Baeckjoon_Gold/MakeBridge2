#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <tuple>

using namespace std;

struct Edge
{
    int u, v, weight;
    bool operator<(const Edge& other) const
    {
        return weight < other.weight;
    }
};

struct UnionFind
{
    vector<int> parent, rank;

    UnionFind(int n) : parent(n), rank(n, 0)
    {
        for (int i = 0; i < n; ++i)
        {
            parent[i] = i;
        }
    }

    int find(int u)
    {
        if (u != parent[u])
            parent[u] = find(parent[u]);
        return parent[u];
    }

    bool unionSets(int u, int v)
    {
        int rootU = find(u);
        int rootV = find(v);
        if (rootU != rootV)
        {
            if (rank[rootU] > rank[rootV])
                parent[rootV] = rootU;
            else if (rank[rootU] < rank[rootV])
                parent[rootU] = rootV;
            else
            {
                parent[rootV] = rootU;
                rank[rootU]++;
            }
            return true;
        }
        return false;
    }
};
int N, M;
vector<vector<bool>> visited;
vector<vector<int>> arr;
int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0,1,0,-1 };
void bfs(int x, int y, int islandNum, vector<vector<int>>& islands);
void findBridges(vector<Edge>& edges, const vector<vector<int>>& islands);

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> N >> M;
    arr.resize(N, vector<int>(M));
    visited.resize(N, vector<bool>(M));
    vector<vector<int>> islands(N, vector<int>(M));

    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < M; j++)
        {
            cin >> arr[i][j];
        }
    }

    int islandNum = 1;
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < M; j++)
        {
            if (arr[i][j] == 1 && !visited[i][j])
            {
                bfs(j, i, islandNum, islands);
                ++islandNum;
            }
        }
    }

    vector<Edge> edges;
    findBridges(edges, islands);
    sort(edges.begin(), edges.end());

    UnionFind uf(islandNum);
    int bridgeLength = 0;
    int edgesUsed = 0;

    for (const auto& edge : edges)
    {
        if (uf.unionSets(edge.u, edge.v))
        {
            bridgeLength += edge.weight;
            edgesUsed++;
        }
    }

    if (edgesUsed == islandNum - 2)
    {
        cout << bridgeLength << endl;
    }
    else
    {
        cout << -1 << endl;
    }

    return 0;
}


void bfs(int x, int y, int islandNum, vector<vector<int>>& islands)
{
    queue<pair<int, int>> q;
    q.push({ x, y });
    visited[y][x] = true;
    islands[y][x] = islandNum;

    while (!q.empty())
    {
        pair<int, int> cur = q.front();
        q.pop();

        for (int i = 0; i < 4; i++)
        {
            int nx = cur.first + dx[i];
            int ny = cur.second + dy[i];

            if (nx >= 0 && nx < M && ny >= 0 && ny < N && !visited[ny][nx] && arr[ny][nx] == 1)
            {
                visited[ny][nx] = true;
                islands[ny][nx] = islandNum;
                q.push({ nx, ny });
            }
        }
    }
}

void findBridges(vector<Edge>& edges, const vector<vector<int>>& islands)
{
    for (int y = 0; y < N; ++y)
    {
        for (int x = 0; x < M; ++x)
        {
            if (islands[y][x] != 0)
            {
                int islandNum = islands[y][x];

                for (int i = 0; i < 4; i++)
                {
                    int nx = x;
                    int ny = y;
                    int length = 0;

                    while (true)
                    {
                        nx += dx[i];
                        ny += dy[i];

                        if (nx < 0 || nx >= M || ny < 0 || ny >= N) 
                            break;

                        if (islands[ny][nx] == islandNum)
                            break;

                        if (islands[ny][nx] != 0)
                        {
                            if (length > 1)
                                edges.push_back({ islandNum, islands[ny][nx], length });
                            
                            break;
                        }

                        length++;
                    }
                }
            }
        }
    }
}