#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

vector<string> states;
vector<int> costs;
int start, target;

void Dijkstra();

int main() {
    int N;
    cin >> N;
    states.resize(N);
    costs.assign(N, INT_MAX);

    for (int i = 0; i < N; i++) 
    {
        cin >> states[i];
    }

    cin >> start >> target; 

    start--; 
    target--;

    Dijkstra();

    return 0;
}


void Dijkstra()
{
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> priQ;
    priQ.push({ 0, start });
    costs[start] = 0;

    while (!priQ.empty())
    {
        int current_state = priQ.top().second;
        int current_cost = priQ.top().first;
        priQ.pop();

        if (current_state == target)
        {
            cout << current_cost << endl;
            return;
        }

        if (current_cost > costs[current_state])
            continue;


        for (int i = 0; i < states.size(); i++)
        {
            if (i == current_state) 
                continue;

            int diff = 0;

            for (int j = 0; j < states[i].length(); j++)
            {
                diff += (states[i][j] - states[current_state][j]) * (states[i][j] - states[current_state][j]);
            }
            int next_cost = current_cost + diff;

            if (next_cost < costs[i]) 
            {
                costs[i] = next_cost;
                priQ.push({ next_cost, i });
            }
        }
    }

    cout << -1 << endl;
}