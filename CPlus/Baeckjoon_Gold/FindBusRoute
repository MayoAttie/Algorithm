#include <iostream>
#include <vector>
#include <limits>
using namespace std;

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int stations; // 정거장 개수
    int routes; // 경로 개수
    vector<vector<long>> distance; // 정거장 간 거리를 저장하는 2차원 벡터

    cin >> stations >> routes; // 정거장 개수와 경로 개수 입력받기
    distance.resize(stations + 1, vector<long>(stations + 1)); // 정거장 개수에 맞게 distance 벡터 크기 조정

    // distance 벡터 초기화
    for (int i = 1; i <= stations; i++)
    {
        for (int j = 1; j <= stations; j++)
        {
            if (i == j)
                distance[i][j] = 0; // 자기 자신으로 가는 거리는 0
            else
                distance[i][j] = 999999999; // 충분히 큰 값으로 초기화
        }
    }

    // 경로 입력받아 distance 벡터 업데이트
    for (int i = 0; i < routes; i++)
    {
        int my;
        int target;
        long cost;
        cin >> my >> target >> cost;
        distance[my][target] = min(distance[my][target], cost);
    }

    // Floyd-Warshall 알고리즘을 통해 최단 경로 계산
    for (int first = 1; first <= stations; first++)
    {
        for (int second = 1; second <= stations; second++)
        {
            for (int third = 1; third <= stations; third++)
            {
                if (distance[second][third] > distance[second][first] + distance[first][third])
                    distance[second][third] = distance[second][first] + distance[first][third];
            }
        }
    }

    // 결과 출력
    for (int i = 1; i <= stations; i++)
    {
        for (int j = 1; j <= stations; j++)
        {
            if (distance[i][j] == 999999999)
                cout << "0 ";
            else
                cout << distance[i][j] << " ";
        }
        cout << "\n";
    }

    return 0;
}