#include <iostream>
#include <vector>
#include <queue>

using namespace std;

vector<int> ladders;
vector<int> snakes;
vector<int> dist;
void BFS(int start);
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int N, M;
    cin >> N >> M;
    ladders = vector<int>(101, 0);
    snakes = vector<int>(101, 0);
    dist = vector<int>(101, -1);

    for (int i = 0; i < N; i++)
    {
        int a, b;
        cin >> a >> b;
        ladders[a] = b;
    }
    for (int j = 0; j < M; j++)
    {
        int a, b;
        cin >> a >> b;
        snakes[a] = b;
    }

    BFS(1);
}

void BFS(int start)
{
    queue<int> que;
    que.push(start);
    dist[start] = 0;

    while (!que.empty())
    {
        int cur = que.front();
        que.pop();

        for (int i = 1; i <= 6; i++)
        {
            int next = cur + i;

            if (next > 100)
                continue;

            if (ladders[next] > 0)
                next = ladders[next];
            if (snakes[next] > 0)
                next = snakes[next];

            if (dist[next] == -1)
            {
                dist[next] = dist[cur] + 1;
                que.push(next);
            }
        }
    }

    cout << dist[100] << endl;
}