#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

// 연구소 위치 관련 클래스
struct Position 
{
    int x, y;
    Position() : x(0), y(0) {}  // 기본 생성자 추가
    Position(int _x, int _y) : x(_x), y(_y) {}
};

int N, M, answer = INT_MAX;
vector<vector<int>> laboratory; // 연구실 정보 저장 배열
vector<Position> virus;          // 바이러스 위치 저장 벡터
vector<Position> route;          // M개 선택된 바이러스 위치 저장 벡터
int dx[] = { 0, 0, -1, 1 };        // 상하좌우 x 변경값
int dy[] = { -1, 1, 0, 0 };        // 상하좌우 y 변경값

// M개의 바이러스를 선택하는 재귀 함수
void search(int count, int start);

// M개의 선택된 바이러스 기준 BFS 탐색으로 바이러스 감염 및 걸리는 요일 구하는 함수
void bfs();

// 모든 연구소 칸이 감염되었는지 확인하는 함수
bool laboratoryCheck(const vector<vector<bool>>& visited);

// 이동한 칸이 연구소 안에 존재하는지 확인하는 함수
bool inLaboratory(int x, int y);

int main() 
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    // 입력 처리
    cin >> N >> M;
    laboratory.resize(N, vector<int>(N));
    for (int i = 0; i < N; ++i) 
    {
        for (int j = 0; j < N; ++j) 
        {
            cin >> laboratory[i][j];
            if (laboratory[i][j] == 2)
                virus.emplace_back(j, i);
        }
    }

    route.resize(M);
    // 모든 바이러스에서 M개의 바이러스를 선택
    search(0, 0);

    // 모든 바이러스의 경우에 소요되는 요일에 최소 값을 결과로 출력
    if (answer == INT_MAX)
        cout << "-1";
    else
        cout << answer;

    return 0;
}

void search(int count, int start) 
{
    // 선택한 바이러스에 대하여 BFS 탐색으로 목표에 만족하는 요일을 구함
    if (count == M) 
    {
        bfs();
        return;
    }
    for (int i = start; i < virus.size(); ++i) 
    {
        route[count] = virus[i];
        search(count + 1, i + 1);
    }
}

void bfs() 
{
    queue<Position> q;
    vector<vector<bool>> visited(N, vector<bool>(N, false));
    int result = 0;

    for (int i = 0; i < M; ++i) {
        visited[route[i].y][route[i].x] = true;
        q.push(route[i]);
    }

    while (!q.empty()) 
    {
        if (result >= answer)
            return;

        int size = q.size();
        for (int i = 0; i < size; ++i) 
        {
            Position cur = q.front();
            q.pop();

            // 바이러스 인접한 칸 탐색
            for (int j = 0; j < 4; ++j) 
            {
                int tempX = cur.x + dx[j];
                int tempY = cur.y + dy[j];
                if (inLaboratory(tempX, tempY) && !visited[tempY][tempX]) 
                {
                    if (laboratory[tempY][tempX] != 1) 
                    {
                        visited[tempY][tempX] = true;
                        q.push(Position(tempX, tempY));
                    }
                }
            }
        }
        ++result; // 요일 증가
    }

    // 모든 칸이 감염되었을 때
    if (laboratoryCheck(visited))
        answer = min(answer, result - 1);
}

bool laboratoryCheck(const vector<vector<bool>>& visited) 
{
    for (int i = 0; i < N; ++i) 
    {
        for (int j = 0; j < N; ++j) 
        {
            if (laboratory[i][j] != 1 && !visited[i][j])
                return false;
        }
    }
    return true;
}

bool inLaboratory(int x, int y) 
{
    return x >= 0 && y >= 0 && x < N && y < N;
}