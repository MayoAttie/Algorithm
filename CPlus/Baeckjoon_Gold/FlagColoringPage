#include <iostream>
#include <map>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

#define ll long long

int n, m;
vector<vector<char>> arr1, arr2;

int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0,1,0,-1 };
vector<vector<bool>>visited;

void bfs(int x, int y, char c1, char c2)
{
    queue<pair<int, int>> que;
    que.push({ x,y });
    visited[x][y] = true;
    arr1[x][y] = c2;

    while (!que.empty())
    {
        int curX = que.front().first;
        int curY = que.front().second;
        que.pop();

        for (int i = 0; i < 4; i++)
        {
            int nx = curX + dx[i];
            int ny = curY + dy[i];
            if (nx >= 0 && nx < n && ny >= 0 && ny < m && !visited[nx][ny])
            {
                if (arr1[nx][ny] == c1)
                {
                    visited[nx][ny] = true;
                    arr1[nx][ny] = c2;
                    que.push({ nx,ny });
                }
            }
        }
    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    cin >> n >> m;

    arr1.resize(n, vector<char>(m));
    arr2.resize(n, vector<char>(m));
    visited.resize(n, vector<bool>(m, false));

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            cin >> arr1[i][j];
        }
    }
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            cin >> arr2[i][j];
        }
    }

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (!visited[i][j])
                bfs(i, j, arr1[i][j], arr2[i][j]);
        }
    }

    int answer = 0;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (arr1[i][j] == arr2[i][j])
                answer++;

        }
    }

    if (answer == n * m)
        cout << "YES";
    else
        cout << "NO";

    return 0;
}