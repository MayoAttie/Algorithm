#include <iostream>
#include <vector>
#include <queue>

using namespace std;

const int INF = 987654321;
vector<vector<pair<int, int>>> graph;
vector<int> dist;

int s, t;

void dijkstra();

int main() {
    int n, m;
    cin >> n >> m;
    graph.resize(n + 1);
    dist.resize(n + 1, INF);

    for (int i = 0; i < m; i++)
    {
        int a, b, c;
        cin >> a >> b >> c;
        graph[a].push_back({ b, c });
        graph[b].push_back({ a, c });
    }
    cin >> s >> t;
    dijkstra();

    return 0;
}

void dijkstra()
{
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> priQ;
    priQ.push({ 0, s });
    dist[s] = 0;

    while (!priQ.empty())
    {
        int curDist = priQ.top().first;
        int curNode = priQ.top().second;
        priQ.pop();

        if (curNode == t)
        {
            cout << dist[curNode];
            break;
        }

        for (const auto& edge : graph[curNode])
        {
            int nextNode = edge.first;
            int weight = edge.second;

            if (dist[curNode] + weight < dist[nextNode])
            {
                dist[nextNode] = dist[curNode] + weight;
                priQ.push({ dist[nextNode], nextNode });
            }
        }
    }
}