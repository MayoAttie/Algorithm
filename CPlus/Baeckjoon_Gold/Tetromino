#include <iostream>
#include <vector>    
#include <algorithm>

using namespace std;

int N, M;
vector<vector<int>> board;
vector<vector<bool>> visited;
int dx[4] = {1,0,-1,0 };
int dy[4] = {0,1,0,-1 };

int maxVal = 0;
int answer = 0;

void dfs(int x, int y, int depth, int total)
{
    if (total + maxVal * (4 - depth) <= answer)
        return;

    if (depth == 4)
    {
        answer = max(answer, total);
        return;
    }

    for (int i = 0; i < 4; i++)
    {
        int nx = x + dx[i];
        int ny = y + dy[i];

        if (0 <= nx && nx < N && 0 <= ny && ny < M && !visited[nx][ny])
        {
            if (depth == 2)
            {
                visited[nx][ny] = true;
                dfs(x, y, depth + 1, total + board[nx][ny]);
                visited[nx][ny] = false;
            }

            visited[nx][ny] = true;
            dfs(nx, ny, depth + 1, total + board[nx][ny]);
            visited[nx][ny] = false;
        }
    }
}

int main()
{
    cin >> N >> M;

    board.resize(N, vector<int>(M));
    visited.resize(N, vector<bool>(M, false));
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < M; j++)
        {
            cin >> board[i][j];
        }
    }

    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < M; j++)
        {
            maxVal = max(maxVal, board[i][j]);
        }
    }

    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < M; j++)
        {
            visited[i][j] = true;
            dfs(i, j, 1, board[i][j]);
            visited[i][j] = false;
        }
    }

    cout << answer;

    return 0;
}