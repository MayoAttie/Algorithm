#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<vector<int>> city;
vector<pair<int, int>> chickens;
vector<pair<int, int>> homes;
vector<bool> selected;

const int INF = 1e9;

int N, M;
int minDist = INF;

int DistFunc();
void DFS(int index, int cnt);

int main()
{
    cin >> N >> M;
    city.resize(N, vector<int>(N));
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            cin >> city[i][j];
            if (city[i][j] == 1)
                homes.push_back({ i, j });
            else if (city[i][j] == 2)
                chickens.push_back({ i, j });
        }
    }
    selected.resize(chickens.size(), false);
    DFS(0, 0);

    cout << minDist;

}

void DFS(int index, int cnt)
{
    if (cnt == M)
    {
        minDist = min(minDist, DistFunc());
        return;
    }
    if (index == chickens.size())
        return;

    selected[index] = true;
    DFS(index + 1, cnt + 1);

    selected[index] = false;
    DFS(index + 1, cnt);
}

int DistFunc()
{
    int total = 0;
    for (auto tmp : homes)
    {
        int mins = INF;
        for (int i = 0; i < chickens.size(); i++)
        {
            if (selected[i])
            {
                int dist = abs(tmp.first - chickens[i].first) + abs(tmp.second - chickens[i].second); 
                mins = min(dist, mins); 
            }
        }
        total += mins; 
    }
    return total;
}