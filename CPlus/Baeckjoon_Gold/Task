#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<vector<int>> graph;
vector<int> degrees;
vector<int> times;
int MaxTimeFinder(int N);

int main()
{
    int N;
    cin >> N;

    graph = vector<vector<int>>(N+1);
    degrees = vector<int>(N+1);
    times = vector<int>(N+1);

    for(int i=1; i<=N; i++)
    {
        int time, num;
        cin >> time >> num;
        times[i] = time;

        for(int j= 0; j<num; j++)
        {
            int prerequisite;
            cin >> prerequisite;
            graph[prerequisite].push_back(i);
            degrees[i]++;
        }
    }

    cout << MaxTimeFinder(N);
}

int MaxTimeFinder(int N)
{
    vector<int> result (N+1, 0);
    queue<int> que;

    for(int i=1; i<=N; i++)
    {
        if(degrees[i] == 0)
            que.push(i);
    }

    while(!que.empty())
    {
        int current = que.front();
        que.pop();
        
        for(int next : graph[current])
        {
            degrees[next]--;
            result[next] = max(result[next], result[current] + times[current]);
            if(degrees[next] == 0)
                que.push(next);
        }
    }

    int maxTime = 0;
    for(int i=1; i<=N; i++)
    {
        maxTime = max(maxTime, result[i] + times[i]);
    }

    return maxTime;
}