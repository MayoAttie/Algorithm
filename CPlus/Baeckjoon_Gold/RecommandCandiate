#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>
using namespace std;

int main() 
{
    int N, M;
    cin >> N >> M;

    vector<int> arr(M);
    for (int i = 0; i < M; ++i)
    {
        cin >> arr[i];
    }

    unordered_map<int, int> map;
    for (int i = 0; i < M; ++i)
    {
        if (map.find(arr[i]) != map.end())
        {
            map[arr[i]]++;
        }
        else 
        {
            if (map.size() == N)
            {
                int min_count = M;
                int idx;
                for (auto& j : map)
                {
                    if (j.second < min_count) 
                    {
                        min_count = j.second;
                        idx = j.first;
                    }
                    else if (j.second == min_count) 
                    {
                        for (int m = 0; m < i; m++) 
                        {
                            if (arr[m] == idx)
                                break;
                            if (arr[m] == j.first)
                            {
                                min_count = j.second;
                                idx = j.first;
                                break;
                            }
                        }
                    }
                }
                for (int i = 0; i < min_count; ++i) 
                {
                    auto it = find(arr.begin(), arr.end(), idx);
                    *it = -1;
                }
                map.erase(idx);
            }
            map[arr[i]] = 1;
        }
    }

    vector<int> answer;
    for (auto& i : map)
    {
        answer.push_back(i.first);
    }
    sort(answer.begin(), answer.end());

    for (int i = 0; i < answer.size(); ++i)
    {
        cout << answer[i] << " ";
    }
    return 0;
}