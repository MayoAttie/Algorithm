#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <cctype>
#include <algorithm>
#include <climits>
using namespace std;

int n, m, k;

vector<int> parent;
vector<int> costs;

int Find(int a)
{   
    if (a == parent[a])
        return a;
    return parent[a] = Find(parent[a]);
}

void Unioin(int a, int b)
{
    a = Find(a);
    b = Find(b);

    if (a == b)
        return;
    else
    {
        if (costs[a] < costs[b])
            parent[b] = a;
        else
            parent[a] = b;
    }
}



int main() 
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> n >> m >> k;
    
    costs.resize(n+1);
    parent.resize(n+1);
    for (int i = 1; i <= n; i++)
    {
        cin >> costs[i];
        parent[i] = i;
    }

    for (int i = 0; i < m; i++)
    {
        int v, w;
        cin >> v >> w;
        Unioin(v, w);
    }

    int answer = 0;
    vector<bool> visited(n+1, false);

    for (int i = 1; i <= n; i++)
    {
        int root = Find(i);
        if (!visited[root])
        {
            answer += costs[root];
            visited[root] = true;
        }
    }
    
    if (answer <= k)
        cout << answer << '\n';
    else
        cout << "Oh no" << '\n';

    return 0;
}