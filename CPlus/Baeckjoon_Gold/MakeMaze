#include <iostream>
#include <string>
#include <vector>
#include <unordered_map>
#include <queue>
#include <algorithm>
#include <climits>
using namespace std;

int n;
const int INF = 987654321;
vector<vector<int>> board;
vector<vector<int>> visited;
int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0,1,0,-1 };

void bfs()
{
    queue<pair<int, int>> que;
    que.push({ 0,0 });
    visited[0][0] = 0;

    while (!que.empty())
    {
        int cx = que.front().first;
        int cy = que.front().second;
        que.pop();

        for (int i = 0; i < 4; i++)
        {
            int nx = cx + dx[i];
            int ny = cy + dy[i];

            if (nx >= 0 && nx < n && ny >= 0 && ny < n)
            {
                if (board[nx][ny] == 1)
                {
                    if (visited[nx][ny] > visited[cx][cy])
                    {
                        visited[nx][ny] = visited[cx][cy];
                        que.push({ nx,ny });
                    }
                }
                else
                {
                    if (visited[nx][ny] > visited[cx][cy] + 1)
                    {
                        visited[nx][ny] = visited[cx][cy] + 1;
                        que.push({ nx,ny });
                    }
                }
            }
        }
    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    

    cin >> n;
    board.resize(n, vector<int>(n));
    visited.resize(n, vector<int>(n,INF));
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            char a;
            cin >> a;
            board[i][j] = a - '0';
        }
    }
    
    bfs();
    cout << visited[n - 1][n - 1];



    return 0;
}