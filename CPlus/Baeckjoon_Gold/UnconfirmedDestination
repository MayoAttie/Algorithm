#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

const int INF = 1e9;

vector<vector<pair<int, int>>> graph; // 그래프 정보 저장을 위한 2차원 벡터

vector<int> dijkstra(int start)
{
    int n = graph.size() - 1;
    vector<int> distance(n + 1, INF); // 시작 노드로부터의 거리를 저장하는 배열
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> que; // 최소 힙을 이용한 우선순위 큐
    que.push({ 0, start });
    distance[start] = 0;

    while (!que.empty()) {
        int dist = que.top().first; // 현재까지의 최소 거리
        int now = que.top().second; // 현재 노드
        que.pop();

        if (distance[now] < dist)
            continue; // 이미 더 짧은 경로가 있다면 스킵

        for (const auto& edge : graph[now]) // 현재 노드와 연결된 간선들을 순회
        {
            int next = edge.first; // 다음 노드
            int cost = edge.second; // 현재 노드에서 다음 노드까지의 거리

            int new_dist = dist + cost;

            if (new_dist < distance[next])
            {
                distance[next] = new_dist; // 최단 거리 갱신
                que.push({ new_dist, next }); // 큐에 추가
            }
        }
    }

    return distance;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int T;
    cin >> T;

    while (T--)
    {
        int n, m, t;
        cin >> n >> m >> t;
        int s, g, h;
        cin >> s >> g >> h;

        graph.assign(n + 1, vector<pair<int, int>>()); // 그래프 초기화
        vector<int> end;

        for (int i = 0; i < m; ++i)
        {
            int a, b, d;
            cin >> a >> b >> d;
            graph[a].emplace_back(b, d); // 간선 정보 추가
            graph[b].emplace_back(a, d); // 양방향 그래프이므로 반대 간선도 추가
        }

        for (int i = 0; i < t; ++i)
        {
            int x;
            cin >> x;
            end.push_back(x);
        }

        vector<int> Ds = dijkstra(s); // 시작 노드로부터의 거리 계산
        vector<int> Dg = dijkstra(g); // g에서의 거리 계산
        vector<int> Dh = dijkstra(h); // h에서의 거리 계산

        vector<int> result;

        for (int e : end)
        {
            // g에서 h로 가는 경로 또는 h에서 g로 가는 경로가 최단 경로일 경우 결과에 추가
            if (Ds[g] + Dg[h] + Dh[e] == Ds[e] || Ds[h] + Dh[g] + Dg[e] == Ds[e])
            {
                result.push_back(e);
            }
        }

        sort(result.begin(), result.end()); // 결과 정렬

        for (int r : result)
        {
            cout << r << ' '; // 결과 출력
        }

        cout << '\n';
    }

    return 0;
}