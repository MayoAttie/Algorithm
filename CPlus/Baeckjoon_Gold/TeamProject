#include <iostream>
#include <vector>
#include <climits>
#include <algorithm>
#include <map>
using namespace std;

int n, answer;
vector<int> students;
vector<bool> visited;
vector<bool> finish;

void dfs(int node)
{
    visited[node] = true;
    int next = students[node];

    if (!visited[next])
        dfs(next);
    else if (!finish[next])
    {
        for (int i = next; i != node; i = students[i])
        {
            answer--;
        }
        answer--;
    }
    
    finish[node] = true;
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int t;
    cin >> t;
    while (t--)
    {
        int n;
        cin >> n;
        
        students = vector<int>(n + 1, 0);
        visited = vector<bool>(n + 1, false);
        finish = vector<bool>(n + 1, false);
        answer = n;

        for (int i = 1; i <= n; i++)
        {
            cin >> students[i];
        }

        for (int i = 1; i <= n; i++)
        {
            if (!visited[i])
                dfs(i);
        }
        

        cout << answer <<'\n';
    }


    return 0;
}