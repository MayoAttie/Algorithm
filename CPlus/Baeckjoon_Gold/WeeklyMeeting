#include <iostream>
#include <vector>
#include <queue>
#include <climits>
#include <algorithm>
using namespace std;

const int INF = INT_MAX;

vector<vector<pair<int, int>> > graph;
vector<vector<int>> dist;
vector<int> pos;
int N, V, E;

void Dijkstra(int start, int index);

int main() 
{
    int A, B;
    cin >> N >> V >> E;
    cin >> A >> B;

    pos.resize(N);
    for (int i = 0; i < N; i++)
        cin >> pos[i];

    graph.resize(V + 1);
    dist.resize(V + 1, vector<int>(2, INF));
    for (int i = 0; i < E; i++) 
    {
        int a, b, weight;
        cin >> a >> b >> weight;
        graph[a].push_back({ b, weight });
        graph[b].push_back({ a, weight });
    }

    Dijkstra(A, 0);
    Dijkstra(B, 1);

    int result = 0;
    for (int i : pos) 
    {
        if (dist[i][0] == INF)
            dist[i][0] = -1;
        if (dist[i][1] == INF)
            dist[i][1] = -1;

        result += dist[i][0] + dist[i][1];
    }

    cout << result << endl;
}

void Dijkstra(int start, int index) 
{
    dist[start][index] = 0;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> priQ;
    priQ.push({ 0, start });

    while (!priQ.empty()) 
    {
        int dit = priQ.top().first;
        int cur = priQ.top().second;
        priQ.pop();

        if (dit > dist[cur][index])
            continue;

        for (auto& i : graph[cur]) 
        {
            int next = i.second + dit;
            if (dist[i.first][index] > next) 
            {
                dist[i.first][index] = next;
                priQ.push({ next, i.first });
            }
        }
    }
}