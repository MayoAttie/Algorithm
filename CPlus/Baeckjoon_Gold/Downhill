#include <iostream>
#include <vector>

using namespace std;

const int MAX_M = 500;
const int MAX_N = 500;

vector<vector<int>> graph;
vector<vector<int>> dp;
int N, M;
int dx[4] = { 1, 0, -1, 0 };
int dy[4] = { 0, 1, 0, -1 };
int DFS(int x, int y)
{
    if (x == N - 1 && y == M - 1)
        return 1;
    if (dp[x][y] != -1)
        return dp[x][y];

    int result = 0;


    for (int i = 0; i < 4; i++)
    {
        int nx = x + dx[i];
        int ny = y + dy[i];

        if (0 <= nx && nx < N && 0 <= ny && ny < M && graph[nx][ny] < graph[x][y])
            result += DFS(nx, ny);
    }

    dp[x][y] = result;
    return result;
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cin >> N >> M;
    graph = vector<vector<int>>(N, vector<int>(M));
    dp = vector<vector<int>>(N, vector<int>(M, -1));
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < M; j++)
        {
            cin >> graph[i][j];
        }
    }

    int result = DFS(0, 0);
    cout << result;
    return 0;
}