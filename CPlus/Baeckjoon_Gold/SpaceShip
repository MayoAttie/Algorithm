#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <climits>
using namespace std;
vector<vector<int>> graph;
vector<bool> visited;
int N, K;

int answer = INT_MAX;

void dfs(int now, int cnt, int cost)
{
	if (cnt == N)
	{
		answer = min(answer, cost);
		return;
	}

	for (int i = 0; i < N; i++)
	{
		if (!visited[i])
		{
			visited[i] = true;
			dfs(i, cnt + 1, cost + graph[now][i]);
			visited[i] = false;
		}
	}
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	cin >> N >> K;

	graph.resize(N, vector<int>(N));
	visited.resize(N);

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			cin >> graph[i][j];
		}
	}

	for (int k = 0; k < N; k++)
	{
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < N; j++)
			{
				graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j]);
			}
		}
	}

	visited[K] = true;
	dfs(K, 1, 0);

	cout << answer;
}