#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<vector<pair<int, int>>> graph;
vector<bool> visited;

int bfs(int start, int K) 
{
    int result = 0;
    queue<int> que;
    que.push(start);
    visited[start] = true;

    while (!que.empty()) 
    {
        int now = que.front();
        que.pop();

        for (auto i : graph[now]) 
        {
            int nextNode = i.first;
            int nextCost = i.second;

            if (!visited[nextNode] && nextCost >= K) 
            {
                visited[nextNode] = true;
                que.push(nextNode);
                result++;
            }
        }
    }

    return result;
}

int main() {
    int N, Q;
    cin >> N >> Q;

    graph.resize(N + 1);
    visited.assign(N + 1, false);

    for (int i = 0; i < N - 1; i++) 
    {
        int a, b, c;
        cin >> a >> b >> c;
        graph[a].push_back({ b, c });
        graph[b].push_back({ a, c });
    }

    for (int q = 0; q < Q; q++) 
    {
        int k, v;
        cin >> k >> v;
        cout << bfs(v, k) << '\n';

        fill(visited.begin(), visited.end(), false);
    }

    return 0;
}