#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

// 선분이 겹치는지 확인하는 함수
bool OverLapCheck(long x1, long y1, long x2, long y2, long x3, long y3, long x4, long y4);

// 선분의 방향을 확인하는 함수
long CCW(long x1, long y1, long x2, long y2, long x3, long y3);

// 두 선분이 교차하는지 확인하는 함수
bool CrossChecker(long x1, long y1, long x2, long y2, long x3, long y3, long x4, long y4);

int main()
{
    long x1, x2, y1, y2;
    long x3, x4, y3, y4;

    // 두 선분의 좌표 입력 받기
    cin >> x1 >> y1 >> x2 >> y2;
    cin >> x3 >> y3 >> x4 >> y4;

    // 두 선분이 교차하는지 확인
    bool isCross = CrossChecker(x1, y1, x2, y2, x3, y3, x4, y4);
    
    // 결과 출력
    if (isCross)
        cout << 1;
    else
        cout << 0;
}

// 두 선분이 교차하는지 확인하는 함수
bool CrossChecker(long x1, long y1, long x2, long y2, long x3, long y3, long x4, long y4)
{
    // 각각의 선분에 대해 방향을 확인
    long abc = CCW(x1, y1, x2, y2, x3, y3);
    long abd = CCW(x1, y1, x2, y2, x4, y4);
    long cba = CCW(x3, y3, x4, y4, x1, y1);
    long cdb = CCW(x3, y3, x4, y4, x2, y2);

    // 두 선분이 평행한 경우
    if (abc * abd == 0 && cba * cdb == 0)
        return OverLapCheck(x1, y1, x2, y2, x3, y3, x4, y4);
    // 두 선분이 교차하는 경우
    else if (abc * abd <= 0 && cba * cdb <= 0)
        return true;
    // 두 선분이 교차하지 않는 경우
    return false;
}

// 선분의 방향을 확인하는 함수
long CCW(long x1, long y1, long x2, long y2, long x3, long y3)
{
    // 외적을 이용하여 선분의 방향 확인
    long result = (x1 * y2 + x2 * y3 + x3 * y1) - (x2 * y1 + x3 * y2 + x1 * y3);
    if (result > 0)
        return 1; // 반시계 방향
    else if (result < 0)
        return -1; // 시계 방향
    return 0; // 일직선 상에 위치
}

// 선분이 겹치는지 확인하는 함수
bool OverLapCheck(long x1, long y1, long x2, long y2, long x3, long y3, long x4, long y4)
{
    // 선분의 x, y 좌표 범위를 비교하여 겹치는지 확인
    if (min(x1, x2) <= max(x3, x4) && min(x3, x4) <= max(x1, x2) &&
        min(y1, y2) <= max(y3, y4) && min(y3, y4) <= max(y1, y2))
    {
        return true; // 선분이 겹침
    }
    return false; // 선분이 겹치지 않음
}