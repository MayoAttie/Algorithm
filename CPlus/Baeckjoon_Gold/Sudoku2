#include <iostream>
#include <map>
#include <string>
#include <algorithm>
#include <vector>
#include <sstream>
using namespace std;

vector<vector<int>> board(9, vector<int>(9));
vector<pair<int, int>> blank;

bool isPossible(int x, int y, int num)
{
    for (int i = 0; i < 9; i++)
    {
        if (board[x][i] == num || board[i][y] == num)
            return false;
    }

    int sX = (x / 3) * 3;
    int sY = (y / 3) * 3;

    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            if (board[sX + i][sY + j] == num)
                return false;
        }
    }

    return true;
}

bool dfs(int idx)
{
    if (idx == blank.size())
        return true;

    int x = blank[idx].first;
    int y = blank[idx].second;

    for (int i = 1; i <= 9; i++)
    {
        if (isPossible(x, y, i))
        {
            board[x][y] = i;
            if (dfs(idx + 1))
                return true;
            board[x][y] = 0;
        }
    }
    return false;
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);


    for (int i = 0; i < 9; i++)
    {
        string str;
        cin >> str;
        for(int j=0; j<9; j++)
        {
            board[i][j] = str[j] - '0';
            if (board[i][j] == 0)
                blank.push_back({ i,j });
        }
    }

    sort(blank.begin(), blank.end());

    
    dfs(0);


    for (int i = 0; i < 9; i++)
    {
        for (int j = 0; j < 9; j++)
        {
            cout << board[i][j];
        }
        cout << '\n';
    }


    return 0;
}