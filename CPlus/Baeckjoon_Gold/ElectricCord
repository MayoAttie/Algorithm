#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() 
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    // 전봇대의 개수 입력
    int n;
    cin >> n;

    // 전봇대의 정보를 저장할 벡터
    vector<pair<int, int>> wire(n);

    // 전봇대의 정보 입력
    for (int i = 0; i < n; ++i) {
        cin >> wire[i].first >> wire[i].second;
    }

    // A 전봇대를 기준으로 정렬
    sort(wire.begin(), wire.end());

    // 각 전봇대까지의 최장 증가 수열의 길이를 저장하는 배열
    vector<int> dp(n, 1);

    // LIS 알고리즘 수행
    for (int i = 1; i < n; ++i) 
    {
        for (int j = 0; j < i; ++j) 
        {
            // 현재 전봇대 i의 B 전봇대 연결 번호가 이전 전봇대 j의 B 전봇대 연결 번호보다 크면
            if (wire[j].second < wire[i].second) 
            {
                // 현재 A 전봇대 i까지의 번호들과 교차 없이 연결 가능한 전깃줄 개수가 담긴 dp[i]를
                // dp[j]까지의 최대 전깃줄 개수에 1을 더한 수와 비교하여 더 큰 수로 갱신
                dp[i] = max(dp[i], dp[j] + 1);
            }
        }
    }

    // 전체 전봇대 개수에서 최장 증가 수열의 길이를 뺀 결과를 출력
    int maxLIS = *max_element(dp.begin(), dp.end());
    int result = n - maxLIS;

    cout << result << '\n';

    return 0;
}