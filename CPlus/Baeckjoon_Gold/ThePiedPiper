#include <iostream>
#include <vector>
using namespace std;

int X, Y;
vector<vector<int>> board;
vector<vector<int>> visited;
int dx[4] = { -1, 1, 0, 0 };
int dy[4] = { 0, 0, -1, 1 };

int answer = 0;
void dfs(int x, int y) 
{
    visited[x][y] = 1;
    int dir = board[x][y];
    int nx = x + dx[dir];
    int ny = y + dy[dir];
    if (nx >= 0 && nx < X && ny >= 0 && ny < Y)
    {
        if (visited[nx][ny] == 0)
            dfs(nx, ny);
        if (visited[nx][ny] == 1)
            answer++;
    }
    visited[x][y] = 2;
}

int main() 
{
    cin >> X >> Y;
    board.resize(X, vector<int>(Y));
    visited.resize(X, vector<int>(Y, 0));

    for (int i = 0; i < X; i++) 
    {
        for (int j = 0; j < Y; j++) 
        {
            char ch;
            cin >> ch;
            if (ch == 'U')
                board[i][j] = 0;
            else if (ch == 'D')
                board[i][j] = 1;
            else if (ch == 'L')
                board[i][j] = 2;
            else
                board[i][j] = 3;
        }
    }

    for (int i = 0; i < X; i++) 
    {
        for (int j = 0; j < Y; j++) 
        {
            if (visited[i][j] == 0) 
            {
                dfs(i, j);
            }
        }
    }
    cout << answer << '\n';
    return 0;
}