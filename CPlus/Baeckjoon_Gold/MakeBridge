#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <string>
#include <set>
using namespace std;

int n;
int answer = 987654321;
vector<vector<int>> board;

int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0,1,0,-1 };

struct node
{
    int X;
    int Y;
    int depth;
};

void DivideLand(int x, int y, int id)
{
    queue<pair<int, int>> que;
    que.push({ x,y });
    board[x][y] = id;

    while (!que.empty())
    {
        int cx = que.front().first;
        int cy = que.front().second;
        que.pop();

        for (int i = 0; i < 4; i++)
        {
            int nx = cx + dx[i];
            int ny = cy + dy[i];
            if (nx >= 0 && nx < n && ny >= 0 && ny < n && board[nx][ny] == 1)
            {
                board[nx][ny] = id;
                que.push({ nx,ny });
            }
        }
    }
}

void bfs(int x, int y)
{
    vector<vector<bool>> visited(n ,vector<bool>(n,false));
    queue<node> que;
    que.push({ x,y,0 });
    visited[x][y] = true;

    while (!que.empty())
    {
        int cx = que.front().X;
        int cy = que.front().Y;
        int cDep = que.front().depth;
        que.pop();

        if (board[cx][cy] > 1)
        {
            if (board[cx][cy] != board[x][y])
            {
                answer = min(cDep, answer);
                break;
            }
        }

        for (int i = 0; i < 4; i++)
        {
            int nx = cx + dx[i];
            int ny = cy + dy[i];

            if (nx >= 0 && nx < n && ny >= 0 && ny < n)
            {
                if (!visited[nx][ny] && board[nx][ny] != board[x][y])
                {
                    que.push({ nx,ny,cDep + 1 });
                    visited[nx][ny] = true;
                }
            }
        }
    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    cin >> n;
    board.resize(n, vector<int>(n));

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
            cin >> board[i][j];
    }

    int id = 2;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (board[i][j] == 1)
                DivideLand(i, j, id++);
        }
    }



    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            for (int d = 0; d < 4; d++)
            {
                int nx = i + dx[d];
                int ny = j + dy[d];
                if (nx >= 0 && nx < n && ny >= 0 && ny < n)
                {
                    if(board[i][j] > 1 && board[nx][ny] == 0)
                        bfs(i, j);
                }
            }
        }
    }


    cout << --answer;


    return 0;
}