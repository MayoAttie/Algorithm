#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;
const int INF = 987654321;

vector<vector<pair<int, int>>> graph;
vector<int> dists;
int N, M, K;

void Dijkstra(int N, int M, int K, int start);

int main()
{
    int tCase;
    cin >> tCase;
    while (tCase--)
    {
        cin >> N >> M;
        graph.clear();
        graph.resize(N);

        for (int i = 0; i < M; i++)
        {
            int a, b, c;
            cin >> a >> b >> c;
            graph[a - 1].push_back({ b - 1, c });
            graph[b - 1].push_back({ a - 1, c });
        }

        cin >> K;
        vector<int> answer(N, 0);
        for (int i = 0; i < K; i++)
        {
            dists.clear();
            dists.resize(N, INF);
            int a;
            cin >> a;
            Dijkstra(N, M, K, a - 1);

            for (int j = 0; j < N; j++)
            {
                answer[j] += dists[j];
            }
        }

        int minRoom = min_element(answer.begin(), answer.end()) - answer.begin() + 1; // +1로 방 번호 보정
        cout << minRoom << "\n";
    }
}

void Dijkstra(int N, int M, int K, int start)
{
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> priQ;
    priQ.push({ 0, start });
    dists[start] = 0;

    while (!priQ.empty())
    {
        int curNode = priQ.top().second;
        int curDist = priQ.top().first;
        priQ.pop();

        for (auto i : graph[curNode])
        {
            if (dists[i.first] > dists[curNode] + i.second)
            {
                dists[i.first] = dists[curNode] + i.second;
                priQ.push({ dists[i.first], i.first });
            }
        }
    }
}