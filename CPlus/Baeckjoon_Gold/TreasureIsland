#include <iostream>
#include <vector>
#include <queue>
using namespace std;
 
int H, W;
const int MAX = 51;
vector<vector<char>> map;      // 지도
vector<vector<bool>> visited;  // 방문 표시
vector<vector<int>> path;      // 경로 
int dy[] = { 0,0,-1,1 };       // 상하좌우 이동을 위한 델타 배열
int dx[] = { -1,1,0,0 };
queue<pair<int, int>> q;       // BFS에 사용하는 큐
int max_len = 0;               // 경로 중 최댓값
 
/* 경로 배열의 최댓값을 리턴하는 BFS */
int BFS(int y, int x) {
    path[y][x] = 1;             // 시작 위치의 경로를 1로 초기화
    visited[y][x] = true;       // 시작 위치를 방문 표시
    q.push(make_pair(y, x));    // 큐에 시작 위치 추가
 
    while (!q.empty()) 
    {
        y = q.front().first;
        x = q.front().second;
        q.pop();
 
        for (int i = 0; i < 4; i++) 
        {
            int ny = y + dy[i];
            int nx = x + dx[i];
 
            // 범위를 벗어나거나 이미 방문한 곳이면 넘어감
            if (ny < 0 || nx < 0 || ny >= H || nx >= W)
                continue;
            // 다음 위치가 육지(L)이고 아직 방문하지 않은 곳이면
            if (map[ny][nx] == 'L' && !visited[ny][nx]) 
            {
                visited[ny][nx] = true;            // 방문 표시
                path[ny][nx] = path[y][x] + 1;     // 경로 업데이트
                q.push(make_pair(ny, nx));         // 큐에 다음 위치 추가
                if (max_len < path[ny][nx]) 
                    max_len = path[ny][nx];         // 최댓값 업데이트
            }
        }
    }
    return max_len - 1;   // 가장 긴 경로의 길이 반환
}
 
int main() 
{
    cin >> H >> W;
    
    // 지도, 방문 표시, 경로 배열 초기화
    map.resize(H, vector<char>(W));
    visited = vector<vector<bool>>(H, vector<bool>(W, false));
    path.resize(H, vector<int>(W, 0));
    
    // 지도 입력 받기
    for (int i = 0; i < H; i++) 
    {
        for (int j = 0; j < W; j++) 
        {
            cin >> map[i][j];
        }
    }
 
    int ans = 0; 
    /* 모든 'L'에 대해 BFS 실행 -> 최댓값이 정답 */
    for (int i = 0; i < H; i++) 
    {
        for (int j = 0; j < W; j++) 
        {
            if (map[i][j] == 'L') {
                int temp = BFS(i, j);    // 'L' 지점에서의 가장 긴 경로 찾기
                if (temp > ans) 
                    ans = temp;          // 최댓값 업데이트
                    
                // BFS를 위한 변수 초기화
                visited = vector<vector<bool>>(H, vector<bool>(W, false));
                path = vector<vector<int>>(H, vector<int>(W, 0));
                max_len = 0;
            }
        }
    }
 
    cout << ans;

    return 0;
}