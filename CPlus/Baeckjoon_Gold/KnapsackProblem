#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int N, C;
vector<int> arr;          
vector<long long> lefts, rights;  // meet in the middle을 위한 두 부분 배열

// 부분 합을 생성하는 재귀 함수
void subSum(int start, int end, long long sum, vector<long long>& result) 
{
    if (start > end) 
    {
        result.push_back(sum);
        return;
    }

    // 현재 원소를 선택하지 않는 경우
    subSum(start + 1, end, sum, result);
    // 현재 원소를 선택하는 경우
    subSum(start + 1, end, sum + arr[start], result);
}

// meet in the middle을 위한 부분 합 배열 생성 함수
void generater() 
{
    int mid = N / 2;
    subSum(0, mid - 1, 0, lefts);  // 왼쪽 부분 배열의 부분 합 생성
    subSum(mid, N - 1, 0, rights); // 오른쪽 부분 배열의 부분 합 생성

    sort(rights.begin(), rights.end());  // 오른쪽 부분 배열 정렬
}

// meet in the middle 알고리즘을 이용하여 두 부분 배열의 조합 개수를 계산하는 함수
long long meetMiddle() 
{
    long long result = 0;

    for (int i = 0; i < lefts.size(); i++) 
    {
        long long target = C - lefts[i];

        // 이분 탐색을 통해 target 이하인 값들의 개수를 찾음
        auto it = upper_bound(rights.begin(), rights.end(), target);

        // 해당 값 이하의 원소들의 개수를 더해줌
        result += it - rights.begin();
    }

    return result;
}

int main() 
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    cin >> N >> C;
    arr.resize(N);
    for (int i = 0; i < N; i++) 
    {
        cin >> arr[i];
    }

    // meet in the middle 알고리즘을 이용하여 조합의 개수 계산
    generater();
    long long answer = meetMiddle();

    cout << answer;

    return 0;
}