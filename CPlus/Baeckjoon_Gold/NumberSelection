#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int N;
vector<int> arr;
vector<bool> isVisited;
vector<int> list;

void dfs(int start, int target) {
    // 아직 방문하지 않은 숫자라면
    if (!isVisited[arr[start]]) {
        isVisited[arr[start]] = true; // 방문 표시
        dfs(arr[start], target); // 재귀적으로 탐색
        isVisited[arr[start]] = false; // 재귀 탐색 종료 후 방문 표시 해제
    }

    // 사이클이 발생했다면
    if (arr[start] == target) {
        list.push_back(target); // 리스트에 추가
    }
}

int main() {
    cin >> N;
    arr.resize(N + 1);

    for (int i = 1; i <= N; i++) {
        cin >> arr[i];
    }

    list.clear(); // 결과 리스트 초기화
    isVisited.assign(N + 1, false); // 방문 배열 초기화

    for (int i = 1; i <= N; i++) {
        isVisited[i] = true; // 시작 숫자 방문 표시
        dfs(i, i); // DFS 탐색 시작
        isVisited[i] = false; // DFS 탐색 종료 후 방문 표시 해제
    }

    sort(list.begin(), list.end()); // 리스트 오름차순 정렬

    cout << list.size() << endl; // 사이클 발생한 개수 출력
    for (int i = 0; i < list.size(); i++) {
        cout << list[i] << endl; // 발생한 사이클 숫자들 출력
    }

    return 0;
}