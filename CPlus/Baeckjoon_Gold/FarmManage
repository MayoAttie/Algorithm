#include <iostream>
#include <vector>
#include <queue>

using namespace std;

vector<vector<int>> map;
vector<vector<bool>> visited;
vector<int> dx = { -1, -1, 0, 1, 1, 1, 0, -1 };
vector<int> dy = { 0, 1, 1, 1, 0, -1, -1, -1 };
int ans = 0;

void bfs(int x, int y) 
{
    bool flag = true;
    queue<pair<int, int>> que;
    que.push({ x, y });

    while (!que.empty()) 
    {
        pair<int, int> curr = que.front();
        que.pop();
        int x = curr.first;
        int y = curr.second;

        for (int i = 0; i < 8; i++) 
        {
            int nx = x + dx[i];
            int ny = y + dy[i];

            if (nx < 0 || nx >= map.size() || ny < 0 || ny >= map[0].size()) 
                continue;

            if (map[nx][ny] == map[x][y]) 
            {
                if (!visited[nx][ny]) 
                {
                    visited[nx][ny] = true;
                    que.push({ nx, ny });
                }
            }
            else if (map[nx][ny] > map[x][y]) 
            {
                flag = false;
            }
        }
    }

    if (flag) 
    {
        ans++;
    }
}

int main() 
{
    int n, m;
    cin >> n >> m;

    map.resize(n, vector<int>(m, 0));
    visited.resize(n, vector<bool>(m, false));

    for (int i = 0; i < n; i++) 
    {
        for (int k = 0; k < m; k++) 
        {
            cin >> map[i][k];
            if (map[i][k] == 0) 
            {
                visited[i][k] = true;
            }
        }
    }

    for (int i = 0; i < n; i++) 
    {
        for (int k = 0; k < m; k++) 
        {
            if (!visited[i][k]) 
            {
                visited[i][k] = true;
                bfs(i, k);
            }
        }
    }

    cout << ans << endl;

    return 0;
}