#include <iostream>
#include <cmath>
#include <climits>

using namespace std;

int main()
{
    int index = 1;  // 현재 상태의 인덱스
    int num;  // 입력받은 숫자
    int move[5][5] =
    {
        {0, 2, 2, 2, 2},
        {2, 1, 3, 4, 3},
        {2, 3, 1, 3, 4},
        {2, 4, 3, 1, 3},
        {2, 3, 4, 3, 1}
    };
    long dpTable[100001][5][5];  // 최솟값을 저장하는 DP 테이블

    // dpTable 초기화
    for (int i = 0; i < 100001; i++)
    {
        for (int j = 0; j < 5; j++)
        {
            for (int m = 0; m < 5; m++)
            {
                dpTable[i][j][m] = 100001 * 10;
            }
        }
    }

    dpTable[0][0][0] = 0;  // 초기 상태의 최솟값은 0

    while (true)
    {
        cin >> num;

        if (num == 0)
            break;

        // num에 대한 dpTable 계산
        for (int i = 0; i < 5; i++)
        {
            if (num == i)
                continue;

            for (int j = 0; j < 5; j++)
            {
                // 이전 상태에서 현재 상태로 가는 최솟값 계산
                dpTable[index][i][num] = min(dpTable[index - 1][i][j] + move[j][num], dpTable[index][i][num]);
            }
        }

        // num에 대한 dpTable 계산
        for (int i = 0; i < 5; i++)
        {
            if (num == i)
                continue;
            
            for (int j = 0; j < 5; j++)
            {
                // 이전 상태에서 현재 상태로 가는 최솟값 계산
                dpTable[index][num][i] = min(dpTable[index - 1][j][i] + move[j][num], dpTable[index][num][i]);
            }
        }

        index++;  // 다음 상태로 인덱스 증가
    }

    index--;  // 입력 종료 후 최종 상태의 인덱스

    long minValue = INT_MAX;  // 최솟값 초기화

    // 최솟값 계산
    for (int i = 0; i < 5; i++)
    {
        for (int j = 0; j < 5; j++)
        {
            minValue = min(minValue, dpTable[index][i][j]);
        }
    }

    cout << minValue << "\n";  // 최솟값 출력
}