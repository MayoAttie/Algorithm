#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

struct Node
{
    pair<int, int> pos;
    int cnt;
    int dir;
};

int dx[4] = { 1, 0, -1, 0 };
int dy[4] = { 0, 1, 0, -1 };
vector<vector<char>> board;
vector<pair<int, int>> door;
int N;
vector<vector<vector<bool>>> visited;

void bfs()
{
    int endX = door[1].first;
    int endY = door[1].second;

    queue<Node> que;
    que.push({ door[0], 0, 0 });
    que.push({ door[0], 0, 1 });
    que.push({ door[0], 0, 2 });
    que.push({ door[0], 0, 3 });

    while (!que.empty())
    {
        Node cur = que.front();
        que.pop();

        int curX = cur.pos.first;
        int curY = cur.pos.second;
        int curCnt = cur.cnt;
        int curDir = cur.dir;

        if (visited[curX][curY][curDir])
            continue;

        visited[curX][curY][curDir] = true;

        int nextX = curX + dx[curDir];
        int nextY = curY + dy[curDir];

        while (nextX >= 0 && nextX < N && nextY >= 0 && nextY < N && board[nextX][nextY] != '*')
        {
            if (board[nextX][nextY] == '!')
            {
                if (curDir == 0 || curDir == 2)
                {
                    que.push({ {nextX, nextY}, curCnt + 1, 1 });
                    que.push({ {nextX, nextY}, curCnt + 1, 3 });
                }
                else
                {
                    que.push({ {nextX, nextY}, curCnt + 1, 0 });
                    que.push({ {nextX, nextY}, curCnt + 1, 2 });
                }
            }

            if (nextX == endX && nextY == endY)
            {
                cout << curCnt;
                return;
            }

            nextX += dx[curDir];
            nextY += dy[curDir];
        }


    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> N;
    board.resize(N, vector<char>(N));
    visited.resize(N, vector<vector<bool>>(N, vector<bool>(4, false))); 

    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            cin >> board[i][j];
            if (board[i][j] == '#')
                door.push_back({ i, j });
        }
    }

    bfs();
}