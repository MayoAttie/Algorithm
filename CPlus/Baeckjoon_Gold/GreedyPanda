#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int n;
vector<vector<int>> forest;
vector<vector<int>> dp;

int dx[4] = { 1,-1,0,0 };
int dy[4] = { 0,0,1,-1 };

int dfs(int x, int y)
{
	if (dp[x][y] != -1)
		return dp[x][y];

	dp[x][y] = 1;
	for (int i = 0; i < 4; i++)
	{
		int nx = x + dx[i];
		int ny = y + dy[i];

		if (nx >= 0 && nx < n && ny >= 0 && ny<n && forest[nx][ny] > forest[x][y])
			dp[x][y] = max(dp[x][y], dfs(nx, ny) + 1);

	}
	return dp[x][y];
}

int main()
{
	cin >> n;
	forest.resize(n, vector<int>(n));
	dp.resize(n, vector<int>(n, -1));

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			cin >> forest[i][j];
		}
	}

	int answer = 0;

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			answer = max(answer, dfs(i, j));
		}
	}

	cout << answer;
}