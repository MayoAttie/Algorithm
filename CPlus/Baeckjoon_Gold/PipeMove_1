#include <iostream>
#include <vector>

using namespace std;

int main() 
{
    int n;
    cin >> n;
    vector<vector<int>> data(n, vector<int>(n));

    for (int i = 0; i < n; i++) 
    {
        for (int j = 0; j < n; j++) 
        {
            cin >> data[i][j];
        }
    }

    // 0: 가로, 1: 세로, 2: 대각선을 저장하는 DP 배열 초기화
    vector<vector<vector<int>>> dp(3, vector<vector<int>>(n, vector<int>(n, 0)));

    dp[0][0][1] = 1; // 첫 시작점 (가로, (0, 1) 좌표) 설정

    // 첫 번째 행 초기화
    for (int i = 2; i < n; i++) 
    {
        if (data[0][i] == 0) 
        {
            dp[0][0][i] = dp[0][0][i - 1];
        }
    }

    // DP 테이블 채우기
    for (int x = 1; x < n; x++) 
    {
        for (int y = 1; y < n; y++) 
        {
            // 대각선 방향으로 이동할 수 있는 경우
            if (data[x][y] == 0 && data[x - 1][y] == 0 && data[x][y - 1] == 0) 
            {
                dp[2][x][y] = dp[0][x - 1][y - 1] + dp[1][x - 1][y - 1] + dp[2][x - 1][y - 1];
            }

            if (data[x][y] == 0) 
            {
                // 가로 방향으로 이동할 수 있는 경우
                dp[0][x][y] = dp[0][x][y - 1] + dp[2][x][y - 1];
                // 세로 방향으로 이동할 수 있는 경우
                dp[1][x][y] = dp[1][x - 1][y] + dp[2][x - 1][y];
            }
        }
    }

    // 결과 계산 및 출력
    int result = dp[0][n - 1][n - 1] + dp[1][n - 1][n - 1] + dp[2][n - 1][n - 1];
    cout << result << endl;

    return 0;
}