#include <iostream>
#include <vector>
#include <cmath>
#include <climits>
using namespace std;

int tspFunc(vector<vector<int>>& dpTable, vector<vector<int>>& resources, int current, int visited);

static int MAX = 1000000*16+1;

int main()
{
    int length;
    cin >> length;
    vector<vector<int>> resources(length, vector<int>(length));
    vector<vector<int>> dpTable(length, vector<int>(1 << length));

    for (int i = 0; i < length; i++)
    {
        for (int j = 0; j < length; j++)
        {
            cin >> resources[i][j];
        }
    }

    cout << tspFunc(dpTable, resources, 0, 1) << "\n";
}

// 외판원 문제를 해결하기 위한 동적 계획법 함수
int tspFunc(vector<vector<int>>& dpTable, vector<vector<int>>& resources, int current, int visited)
{
    if (visited == (1 << resources.size()) - 1) // 모든 도시를 방문한 경우
        return resources[current][0] == 0 ? MAX : resources[current][0];

    if (dpTable[current][visited] != 0) // 이미 계산한 값이 있는 경우, 저장된 값을 사용
        return dpTable[current][visited];

    int minCost = MAX;

    for (int i = 0; i < resources.size(); i++)
    {
        if (resources[current][i] != 0 && ((visited & (1 << i)) == 0)) // 현재 도시에서 다음 도시로 이동 가능한 경우
        {
            int newVisited = visited | (1 << i); // 다음 도시를 방문 상태로 변경
            minCost = min(minCost, resources[current][i] + tspFunc(dpTable, resources, i, newVisited)); // 재귀 호출로 다음 도시로 이동하고 비용 계산

            // 다음 도시로 이동하여 얻은 최소 비용 업데이트
        }
    }

    dpTable[current][visited] = minCost; // 계산된 최소 비용을 저장

    return minCost;
}