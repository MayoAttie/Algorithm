#include<vector>
#include<queue>
using namespace std;

int solution(vector<vector<int> > maps)
{
    int n = maps.size();
    int m = maps[0].size();
    vector<pair<int, int>> directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

    queue<pair<pair<int, int>, int>> q;
    q.push({{0, 0}, 1});
    maps[0][0] = 0;

    while (!q.empty()) 
    {
        int x = q.front().first.first;
        int y = q.front().first.second;
        int distance = q.front().second;
        q.pop();

        if (x == n - 1 && y == m - 1) 
        { 
            return distance;
        }

        for (auto dir : directions) {
            int nx = x + dir.first;
            int ny = y + dir.second;

            if (nx >= 0 && nx < n && ny >= 0 && ny < m && maps[nx][ny] == 1)
            {  
                q.push({{nx, ny}, distance + 1});
                maps[nx][ny] = 0;
            }
        }
    }

    return -1; 
}