#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
#include <queue>
using namespace std;

int solution(vector<vector<int>> jobs)
{
    int answer = 0;
    sort(jobs.begin(), jobs.end());
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    int time = 0;
    int index = 0;
    int totalResponseTime = 0;
    int numOfJobs = jobs.size();

    while (true)
    {
        while (index < numOfJobs && jobs[index][0] <= time)
        {
            pq.push(make_pair(jobs[index][1], jobs[index][0]));
            index++;
        }

        if (!pq.empty()) 
        {
            int duration = pq.top().first;
            int requestTime = pq.top().second;
            pq.pop();
            time += duration;
            totalResponseTime += (time - requestTime);
        } 
        else 
        {
            time++;
        }

        if (index >= numOfJobs && pq.empty())
        {
            break;
        }
    }

    answer = totalResponseTime / numOfJobs;
    return answer;
}