#include <iostream>
#include <vector>

using namespace std;

int main()
{
    int num;
    int mod = 1000000000;
    long answer = 0;
    cin >> num;
    
    // 동적 계획법을 위한 dp 테이블 생성
    vector<vector<long>> dpTable(num+1, vector<long>(10));

    for(int i=1; i<10; i++)
    {
        dpTable[1][i] = 1; // 초기 값 설정
    }

    // Bottom-up 방식으로 DP 테이블 채우기
    for(int i=2; i<=num; i++)
    {
        dpTable[i][0] = dpTable[i-1][1] % mod; // 이전 단계의 결과를 이용하여 현재 값을 계산하고 mod 연산 수행
        dpTable[i][9] = dpTable[i-1][8] % mod;

        for(int j=1; j<=8; j++)
        {
            dpTable[i][j] = (dpTable[i-1][j-1] + dpTable[i-1][j+1]) % mod; // 이전 단계의 결과를 이용하여 현재 값을 계산하고 mod 연산 수행
        }
    }

    // 답 계산
    for(int i=0; i<10; i++)
    {
        answer = (answer + dpTable[num][i]) % mod; // dpTable의 각 값을 더하고 mod 연산 수행
    }

    // 결과 출력
    cout << answer;

    return 0;
}