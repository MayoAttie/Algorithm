#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

void bfs(int startNode, vector<int>& distance, vector<vector<int>>& graph);

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    // 그래프 정보를 저장하는 2차원 벡터
    vector<vector<int>> graph;
    
    // 결과값을 저장하는 벡터
    vector<int> answer;
    
    // 시작 노드로부터의 거리를 저장하는 벡터
    vector<int> distance;
    
    // 입력 받을 변수들
    long numNodes, numEdges, targetDistance, startNode;
    cin >> numNodes >> numEdges >> targetDistance >> startNode;
    
    // 그래프 벡터의 크기를 노드 수에 맞게 설정
    graph.resize(numNodes + 1);
    
    // 간선 정보 입력 받기
    for (int i = 0; i < numEdges; i++)
    {
        int from, to;
        cin >> from >> to;
        graph[from].push_back(to);
    }
    
    // 거리 벡터 초기화 (-1로 설정)
    distance.resize(numNodes + 1, -1);
    
    // 너비 우선 탐색 실행
    bfs(startNode, distance, graph);
    
    // 목표 거리에 해당하는 노드들을 answer 벡터에 저장
    for (int i = 0; i <= numNodes; i++)
    {
        if (distance[i] == targetDistance)
            answer.push_back(i);
    }
    
    // 결과 출력
    if (answer.empty())
        cout << -1 << "\n";
    else
    {
        // 오름차순 정렬 후 출력
        sort(answer.begin(), answer.end());
        for (int node : answer)
        {
            cout << node << "\n";
        }
    }
}

// 너비 우선 탐색을 수행하는 함수
void bfs(int startNode, vector<int>& distance, vector<vector<int>>& graph)
{
    queue<int> que;
    que.push(startNode);
    distance[startNode] = 0;
    
    while (!que.empty())
    {
        int currentNode = que.front();
        que.pop();
        
        // 현재 노드의 이웃 노드들을 탐색
        for (int neighbor : graph[currentNode])
        {
            if (distance[neighbor] == -1)
            {
                // 이웃 노드까지의 거리를 업데이트하고 큐에 추가
                distance[neighbor] = distance[currentNode] + 1;
                que.push(neighbor);
            }
        }
    }
}