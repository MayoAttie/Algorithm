#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

int solutuin(int N, int M); // 함수의 원형 선언

int main()
{
	int N, M;
	cin >> N >> M;

	int answer = solutuin(N, M); // solutuin 함수 호출

	cout << answer;

}

int solutuin(const int N, const int M) // 블루레이를 분할하는 함수
{
	int start = 0; // 이진 탐색의 시작 값
	int end = 0; // 이진 탐색의 종료 값
	vector<int> arrBlueray(N, 0); // 녹화된 동영상의 길이를 저장하는 배열

	// 녹화된 동영상의 길이를 입력받고, 동시에 start와 end 값을 설정
	for (int i = 0; i < N; i++)
	{
		cin >> arrBlueray[i];
		if (start < arrBlueray[i])
			start = arrBlueray[i];

		end += arrBlueray[i];
	}

	while (start <= end) // 이진 탐색 수행
	{
		int middle = (start + end) / 2; // 중간 값
		int sum = 0; // 현재 블루레이에 녹화된 동영상 길이의 합
		int count = 0; // 블루레이 개수

		for (int i = 0; i < N; i++)
		{
			if (sum + arrBlueray[i] > middle) // 현재 블루레이에 녹화된 동영상 길이의 합이 중간 값보다 크면
			{
				count++; // 블루레이 개수 증가
				sum = 0; // 현재 블루레이 초기화
			}
			sum += arrBlueray[i]; // 녹화된 동영상 길이를 현재 블루레이에 더함
		}

		if (sum != 0) // 마지막 블루레이에 남은 동영상이 있다면
			count++; // 블루레이 개수 증가

		if (count > M) // 블루레이 개수가 M보다 크면
			start = middle + 1; // 시작 값을 중간 값보다 크게 조정하여 범위를 오른쪽으로 좁힘
		else
			end = middle - 1; // 종료 값을 중간 값보다 작게 조정하여 범위를 왼쪽으로 좁힘
	}

	return start; // 최적의 블루레이 길이를 반환
}
