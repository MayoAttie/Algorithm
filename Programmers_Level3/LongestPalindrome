#include <string>
#include <iostream>
#include <algorithm>
using namespace std;

// 주어진 문자열 `s`에서 특정 중심을 기준으로 팰린드롬을 확장하는 함수
int expandAroundCenter(string s, int left, int right)
{
    int len = s.length();
    
    // 왼쪽 인덱스(left)가 0보다 크거나 같고 오른쪽 인덱스(right)가 len보다 작거나 같으며,
    // s[left]와 s[right]가 같을 때까지 반복합니다.
    while (left >= 0 && right < len && s[left] == s[right]) 
    {
        // 현재 중심을 기준으로 팰린드롬을 확장하기 위해
        // 왼쪽 인덱스(left)를 감소시키고, 오른쪽 인덱스(right)를 증가시킵니다.
        left--;
        right++;
    }
    
    // 확장된 팰린드롬의 길이를 반환합니다.
    return right - left - 1;
}

int solution(string s)
{
    int len = s.length();
    
    // 문자열의 길이가 1 이하인 경우, 길이 그대로 반환합니다.
    if (len <= 1) return len;
    
    int start = 0; // 팰린드롬의 시작 인덱스
    int end = 0;   // 팰린드롬의 끝 인덱스
    
    for (int i = 0; i < len; i++)
    {
        // 현재 인덱스 i를 중심으로 하는 팰린드롬의 길이(len1)를 계산합니다.
        int len1 = expandAroundCenter(s, i, i);
        
        // 현재 인덱스 i와 i+1을 중심으로 하는 팰린드롬의 길이(len2)를 계산합니다.
        int len2 = expandAroundCenter(s, i, i + 1);
        
        // 현재 중심을 기준으로 얻은 두 길이 중 최대 길이(maxLen)를 선택합니다.
        int maxLen = max(len1, len2);
        
        // 현재까지의 가장 긴 팰린드롬보다 새로 얻은 팰린드롬이 더 긴 경우,
        // 시작 인덱스(start)와 끝 인덱스(end)를 갱신합니다.
        if (maxLen > end - start) 
        {
            start = i - (maxLen - 1) / 2;
            end = i + maxLen / 2;
        }
    }
    
    // 가장 긴 팰린드롬의 길이를 반환합니다.
    return end - start + 1;
}